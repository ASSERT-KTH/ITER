bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
7	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;var  a$$module$test=	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  }  ;var  a$$module$test=	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  var  module$test=  [Delete]  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  [Delete]  illegal  start  of  expression  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  [Delete]  illegal  start  of  expression	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  var  module$test=  >=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  >=  illegal  start  of  expression  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  >=  illegal  start  of  expression	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  var  module$test=  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  >>  illegal  start  of  expression  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  >>  illegal  start  of  expression	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  var  module$test=  ==  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  ==  illegal  start  of  expression  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  illegal  start  of  expression	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
33	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(currentFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.endsWith( ".java "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.endsWith( "..   "  +  File.separator))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
38	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=0  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=0  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;var  a$$module$test=0	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;var  a$$module$test=1	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=0  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=0  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  modules$test=  {  }  ;var  a$$module$test=0	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=2  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  ;var  a$$module$test=2  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;var  a$$module$test=2	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=1  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  }  ;var  a$$module$test=1	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=1  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  modules$test=  {  }  ;var  a$$module$test=1	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  ||  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  module$test=  {  }  ;var  a$$module$test=1	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js "))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  e.printStackTrace(System.err);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  e.printStackTrace(System.err);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	e.printStackTrace(System.err);	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( "- "))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator)||  currentFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
71	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
72	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
73	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  &&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  requiredFilename.startsWith( "..   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.substring(0,  requiredFilename.length()  -  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  if(requiredFilename.startsWith( "module$test "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  if(requiredFilename.startsWith( "java/lang/ "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
84	[BUG]  [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  if(requiredFilename.startsWith( ". "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }  if(requiredFilename.startsWith( "- "))  {  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test   ");var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
93	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
95	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
96	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
97	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
98	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename  ==  null)  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename  ==  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  throw  new  RuntimeException( " ");  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  e.printStackTrace();  }  else  {  System.err.println( "Missing  module  name: "  +  requiredFilename);  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  ;var  module$test=  {  }  ;var  a$$module$test=1  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ;var  module$test=  {  }  ;var  a$$module$test=1  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	;var  module$test=  {  }  ;var  a$$module$test=1	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=1    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
105	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
106	[BUG]  [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
107	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
108	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename!=  null)  {  if(requiredFilename.startsWith( "..   "  +  File.separator)||  requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
110	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename.endsWith( ". "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
111	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
112	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX));  return  null;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  return  null;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX),  e);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
115	[BUG]  [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
116	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename!=  null)  {  compiler.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
118	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
119	[BUG]  [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
120	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
121	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
122	[BUG]  [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  &&  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	&&  currentFilename.startsWith( "..   "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
123	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
124	[BUG]  [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  modules$test=  {  }  ;var  a$$module$test=  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  modules$test=  {  }  ;var  a$$module$test=	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
125	[BUG]  [BUGGY]  var  module$test=  >>  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  >>  }  ;var  a$$module$test=  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  >>  }  ;var  a$$module$test=	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
126	[BUG]  [BUGGY]  var  module$test=  ==  }  ;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  ==  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
127	[BUG]  [BUGGY]  var  modules$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  modules$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  modules$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
128	[BUG]  [BUGGY]  var  module$test=  {  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  {  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  {  }	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  ||  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  ||  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	||  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
130	[BUG]  [BUGGY]  Var  module$test=  {  }  ;  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Var  module$test=  {  }  ;  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Var  module$test=  {  }  ;	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
132	[BUG]  [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=0  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  ==  }  ;var  a$$module$test=0  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  ==  }  ;var  a$$module$test=0	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=0    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
133	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
134	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
136	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
137	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
138	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  throw  new  IllegalArgumentException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
141	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". ".  +  File.separator))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
142	[BUG]  [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	requiredFilename.startsWith( ".   "  +  File.separator))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
143	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
144	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
145	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
146	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
147	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
148	[BUG]  [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  pendingFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	pendingFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
149	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ". "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
150	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".. ")||  requiredFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
151	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  currentFilename.startsWith( ".. "))  {  return  toModuleName(requiredFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    return    toModuleName(requiredFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
152	[BUG]  [BUGGY]  var  module$test=  >=  }  ;var  a$$module$test=  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  var  module$test=  >=  }  ;var  a$$module$test=  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	var  module$test=  >=  }  ;var  a$$module$test=	  junit.framework.AssertionFailedError:    Expected:    goog.provide(   "module$test   ");var    module$test=    {    }    ;var    a$$module$test=    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
153	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator)||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
154	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
155	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
156	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
157	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  throw  new  RuntimeException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
158	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(requiredFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
159	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  return  toModuleName(currentFilename);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
160	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.substring(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
161	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  module  =  module.getModule();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
162	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
163	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ".js$ "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
164	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
165	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
166	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  module,  DEFAULT_FILENAME_SEPARATOR,  currentFilename));	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
167	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_SEPARATOR,  requiredFilename));	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
168	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	Context.report(JSError.make(sourceName,  currentFilename,  DEFAULT_FILENAME_PREFIX,  requiredFilename));	  e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
169	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
170	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  throw  new  IllegalStateException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
171	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.startsWith(   "..   "    +    File.separator))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
172	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.endsWith( ".js$ "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
173	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ ")||  requiredFilename.endsWith( ".js$ "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
174	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(currentFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(currentFilename.startsWith( ". "))  {  if(requiredFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
175	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.endsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.endsWith( ".js$ "))  {  if(currentFilename.endsWith( ".. "))  {  return  toModuleName(currentFilename);  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    if(currentFilename.endsWith(   "..   "    +    File.separator))    {    return    toModuleName(currentFilename);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
176	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
177	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    requiredFilename  =  requiredFilename.replaceAll(   "\\.js$   ",     "   ");  currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  return  toModuleName(requiredFilename);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.4472135954999579	109	109	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  throw  new  RuntimeException( " ");  }	  if(requiredFilename.startsWith(   ".   ")||    currentFilename.startsWith(   "..   "    +    File.separator))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
