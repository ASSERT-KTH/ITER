bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
2	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
3	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(currentFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(currentFilename.startsWith( ". "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
4	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ". "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
6	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(currentFilename!=  null)  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(currentFilename!=  null)  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
7	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ".. "  +  File.separator)||  requiredFilename.endsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	  	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
9	[BUG]  [BUGGY]  return  toModuleName(currentFilename);  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  return  toModuleName(currentFilename);  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	return  toModuleName(currentFilename);	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
10	[BUG]  [BUGGY]  if(module!=  null)  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(module!=  null)  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(module!=  null)  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
11	[BUG]  [BUGGY]  return  toModuleName(requiredFilename,  currentFilename);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  return  toModuleName(requiredFilename,  currentFilename);  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	return  toModuleName(requiredFilename,  currentFilename);	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
12	[BUG]  [BUGGY]  return  toModuleName(currentFilename,  requiredFilename);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  return  toModuleName(currentFilename,  requiredFilename);  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	return  toModuleName(currentFilename,  requiredFilename);	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
13	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename!=  null)  {  return  toModuleName(requiredFilename);  }  else  {  throw  new  RuntimeException( " ");  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(currentFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(currentFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(requiredFilename.startsWith( ".. "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
17	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(currentFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(currentFilename.startsWith( ". "  +  File.separator)||  currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
18	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [BUGGY]  if(currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }  [BUGGY]  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	111	111	5	replace	if(currentFilename.startsWith( ".. "  +  File.separator))  {  return  toModuleName(requiredFilename);  }	return  toModuleName(requiredFilename);  	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
