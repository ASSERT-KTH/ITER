bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
2	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
3	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   ")||  requiredFilename.startsWith( ".   "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",       ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
11	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",       ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
12	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
13	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( "	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$       ",    new    String[]    {       "       "    }    );    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
22	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
23	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
24	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
25	[BUG]  [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
26	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/.   ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/.   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/.   ");  }	  currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "/.   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
27	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ".       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ".       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "/ ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "/ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "/ ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       "/   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
31	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
32	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
33	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
34	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
35	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
36	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
37	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "..   ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "..   ");  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "..   ");	  currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "..   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
38	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "..   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "..   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "..   ");  }	  currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "..   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
39	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '_');  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '_');  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '_');  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",    '_');    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
40	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "..   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "..   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "..   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "..   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
41	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
47	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
48	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
49	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
50	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
51	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.re  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.re  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.re	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
52	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( "/.   "  +  File.separator)||  requiredFilename.startsWith( "/.. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
58	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
59	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
60	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",    '.');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
61	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",    '.');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
62	[BUG]  [BUGGY]  int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  requiredFilename.lastIndexOf('.');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
63	[BUG]  [BUGGY]  int  scriptNodeCount  =  requiredFilename.indexOf('.');  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  requiredFilename.indexOf('.');  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  requiredFilename.indexOf('.');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
64	[BUG]  [BUGGY]  Integer  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  Integer  scriptNodeCount  =  requiredFilename.lastIndexOf('.');  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	Integer  scriptNodeCount  =  requiredFilename.lastIndexOf('.');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
65	[BUG]  [BUGGY]  char  scriptNodeCount  =  currentFilename.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  char  scriptNodeCount  =  currentFilename.lastIndexOf('.');  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	char  scriptNodeCount  =  currentFilename.lastIndexOf('.');	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
66	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename.length());	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
67	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename);  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  requiredFilename);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
68	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.   ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/.   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
69	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ".   ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       ".   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
70	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".   ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       ".   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
71	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$       ",    new    String[]    {       "       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
76	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
77	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
78	[BUG]  [BUGGY]  char  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  char  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	char  currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
79	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
80	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  currentFilename.length());  }	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
81	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  requiredFilename  =  requiredFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  requiredFilename  =  requiredFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  else  {  requiredFilename  =  requiredFilename.substring(1);  }	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
82	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  2);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  actualFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  actualFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",.   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
85	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.   ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",.   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
86	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
87	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
89	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.re  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.re  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.re	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
90	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
92	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
93	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
94	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '/');  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '/');  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '/');  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",    '/');    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
95	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
96	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  requiredFilename.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
98	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
100	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  File  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  File  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	File  currentFilename  =  currentFilename.substring(0,  currentFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(1);  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  currentFilename.substring(1);	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
103	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
104	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
105	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
106	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
107	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
108	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
109	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
110	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
111	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
112	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
116	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
117	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
118	[BUG]  [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
119	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  requiredFilename.length()  -  1);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
120	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
121	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
122	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
123	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename    ==    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
124	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js	  if(requiredFilename    ==    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
125	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
126	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
127	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
128	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
129	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( "..   "  +  File.separator))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
130	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
131	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
132	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
133	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
134	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
135	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
136	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
137	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
138	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
139	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
140	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
141	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
142	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
143	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".js$ "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
144	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "/   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
145	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
148	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
149	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ", ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ", ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ", ",   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
150	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
151	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
152	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ");  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
153	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
154	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
155	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
156	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  -1);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
157	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_PREFIX);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
158	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  DEFAULT_FILENAME_SEPARATOR);	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
159	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
160	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   ". ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   ". ");  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   ". ");	  currentFilename    =    requiredFilename.replaceAll(   ".js$       ",    new    String[]    {       "       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
161	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
162	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
163	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
164	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
165	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
166	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
167	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
168	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
169	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
170	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
171	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
172	[BUG]  [BUGGY]  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
173	[BUG]  [BUGGY]  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(String  requiredFilename  :  requiredFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
174	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.. ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.. ");  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/.. ");	  currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "/.   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
175	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",  new  String[]  {   "   "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
176	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
177	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
178	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
179	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
180	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
181	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
182	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
183	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
184	[BUG]  [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	CurrentFilename  =  currentFilename.substring(0,  currentFilename.length());	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
185	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
186	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re	  if(requiredFilename.startsWith(   ".js   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
187	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".js   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
188	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$   ",   "   ");  }  else  {  requiredFilename  =  currentFilename.re	  if(requiredFilename.startsWith(   ".js   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
189	[BUG]  [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
190	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
191	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
192	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
193	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
194	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
195	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
196	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
197	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
198	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
199	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
200	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".java "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
201	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
202	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
203	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
204	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
205	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ".. "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
206	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  expectedFilename.length()  -  1);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
207	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
208	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
209	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
210	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.endsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
211	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(2);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
212	[BUG]  [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(JSModule  module  :  currentFilename.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
213	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  modules.get(0))  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
214	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
215	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
216	[BUG]  [BUGGY]  String  currentFilename  =  actualFilename.substring(0,  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  actualFilename.substring(0,  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  actualFilename.substring(0,  currentFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
217	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/ ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       "/   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
218	[BUG]  [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    2);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
219	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
220	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }	  if(currentFilename!=    null)    {    currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
221	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
222	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   " ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   " ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
223	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
224	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
225	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(2);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
226	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
227	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(2);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
228	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",  '/');  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",  '/');  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",  '/');	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",       ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
229	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "' "  }  );	  currentFilename    =    requiredFilename.replaceAll(   ".js$       ",    new    String[]    {       "       "    }    );    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
230	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
231	[BUG]  [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(module!=  null)  {  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
232	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
233	[BUG]  [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(JSModule  module  :  currentFilename.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
234	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
235	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   ",   ");  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
236	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename  ==  null)  {  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js$	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
237	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
238	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
239	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
240	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
241	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
242	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".java "))  {  requiredFilename  =  currentFilename.substring(2);  }	  if(currentFilename.startsWith(   ".java   ")||    currentFilename.startsWith(   ".java   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
243	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".java ")||  currentFilename.startsWith( ".js "))  {  compiler.reportCodeChange();  }	  if(currentFilename.startsWith(   ".js   ")||    currentFilename.startsWith(   ".js   "))    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
244	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
245	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ ");  }	  if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
246	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  requiredFilename  =  currentFilename.substring(1);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
247	[BUG]  [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(2);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(2);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ". ")||  currentFilename.startsWith( ".. "))  {  requiredFilename  =  currentFilename.substring(2);  }	  if(currentFilename.startsWith(   ".   ")||    currentFilename.startsWith(   ".   "))    {    requiredFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
248	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  this.currentFilename.length());	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length()    -    3);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
249	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {	  if(requiredFilename.startsWith(   ".js   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
250	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  currentFilename.toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  currentFilename.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  return  currentFilename.toString();  }	  if(requiredFilename.startsWith(   ".js   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
251	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".js);	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
252	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/ ".);	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
253	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j	  if(requiredFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
254	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/. ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/. ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "/. ");  }	  if(currentFilename!=    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$   ",       "/   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
255	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ".js "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
256	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ". "))  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
257	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	&&  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
258	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
259	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
260	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)||  requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$	  if(currentFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
261	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  '.');  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",    '.');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
262	[BUG]  [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
263	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(JSModule  module  :  module.getModules())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
264	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
265	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js	  if(requiredFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
266	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
267	[BUG]  [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
268	[BUG]  [BUGGY]  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.toString();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.toString();    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
269	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   ".. ");  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
270	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( "..   "  +  File.separator))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
271	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ".   "  +  File.separator)  ||  requiredFilename.startsWith( ".. "))  {  for(String  requiredFilename  :  currentFilename.toString())  {  compiler.reportCodeChange();  }	  if(currentFilename!=    null)    {    for(String    requiredFilename    :    currentFilename.toString())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
272	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
273	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".js	  if(requiredFilename!=    null)    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
274	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/. ".);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/. ".);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "/. ".);	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "/.   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
275	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js ")||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
276	[BUG]  [BUGGY]  if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ". "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length());  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
277	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "... ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "... ");  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "... ");	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       "..   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
278	[BUG]  [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.. ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.. ");  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	currentFilename  =  requiredFilename.replaceAll( ".js$ ",   ",.. ");	  currentFilename    =    requiredFilename.replaceAll(   ".js$   ",       ",.   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
279	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",  new  String[]  {   ".js$ "  }  );  }	  if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",    new    String[]    {       "       "    }    );    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
280	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
281	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename!=  null)  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   " ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
282	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".modul	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
283	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".module$test	  if(requiredFilename!=    null)    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".j    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
284	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  requiredFilename.startsWith( ".js "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
285	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
286	[BUG]  [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  &&  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	&&  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
287	[BUG]  [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  if(requiredFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.startsWith( ".js "))  {  if(requiredFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.startsWith( ".js "))  {  if(requiredFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
288	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
289	[BUG]  [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  ||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	||  currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".js   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
290	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  4);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
291	[BUG]  [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  +  1);  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	String  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  +  1);	  String    currentFilename    =    currentFilename.substring(0,    currentFilename.length());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
292	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  requiredFilename.replaceAll( ".js$ ",  new  String[]  {   "   "  }  );  }	  currentFilename    =    requiredFilename.replaceAll(   ".js$       ",    new    String[]    {       "       "    }    );    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
293	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
294	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename!=  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename!=    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
295	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
296	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }   ");  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( "  }   ");  }	  if(requiredFilename.startsWith(   ".       "    +    File.separator)    ||    requiredFilename.startsWith(   "..       "    +    File.separator))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   "    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
297	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename!=  null)  {  if(requiredFilename  ==  null)  {  requiredFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll( ".j	  if(requiredFilename    ==    null)    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(   ".js$       ",       "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
298	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.length());  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.length());  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.length());	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
299	[BUG]  [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.lastIndexOf('.'));  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.lastIndexOf('.'));  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	int  scriptNodeCount  =  currentFilename.lastIndexOf('.',  currentFilename.lastIndexOf('.'));	  int    scriptNodeCount    =    currentFilename.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
300	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$ ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
301	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$, ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$, ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(requiredFilename.startsWith( ". "))  {  if(currentFilename  ==  null)  {  currentFilename  =  currentFilename.replaceAll( ".js$, ",   "   ");  }  else  {  requiredFilename  =  currentFilename.replaceAll(	  if(requiredFilename.startsWith(   ".   "))    {    if(currentFilename    ==    null)    {    currentFilename    =    currentFilename.replaceAll(   ".js$   ",       "       ");    }    else    {    requiredFilename    =    currentFilename.replaceAll(    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
302	[BUG]  [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(module!=  null)  {  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
303	[BUG]  [BUGGY]  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [CE]  illegal  start  of  expression  [FE]                                        junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	for(JSModule  module  :  module.getModules())  {  requiredFilename  =  module.getName();  }	  if(currentFilename!=    null)    {    for(JSModule    module    :    currentFilename.getModules())    {    requiredFilename    =    module.getName();    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
304	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                    junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.endsWith( ".java ")||  currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
305	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                      junit.framework.AssertionFailedError:  Expected:  goog.provide(     "module$test     ");var  module$test={};var  a$$module$test=1      [CONTEXT]      public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  requiredFilename  =  requiredFilename.replaceAll(     "\\.js$     ",       "     ");      [BUGGY]  if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]        if  (requiredFilename.startsWith(     ".     "  +  File.separator)  ||  requiredFilename.startsWith(     "..     "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	100	100	5	replace	if(currentFilename.startsWith( ".java "))  {  currentFilename  =  currentFilename.substring(1);  }	  if(currentFilename.endsWith(   ".java   "))    {    currentFilename    =    currentFilename.substring(1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
