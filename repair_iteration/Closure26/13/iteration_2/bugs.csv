bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  String  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	String  currentFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");	  if(requiredFilename.equals(   "   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".java ")||  requiredFilename.startsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  ||  requiredFilename.startsWith( ".js$ "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  ||  requiredFilename.startsWith( ".js$ "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	||  requiredFilename.startsWith( ".js$ "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredF  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredF  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredF	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  1);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  2);  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	String  currentFilename  =  requiredFilename.substring(0,  currentFilename.length()  -  2);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  currentFilename.startsWith( ". "))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  2);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.length()  ==  0)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.endsWith( ".java "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.endsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  if(requiredFilename.length()!=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.length()!=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.length()!=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.length()    ==    0)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  if(currentFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.length()    ==    0)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  JSModule  module  =  compiler.getModule(currentFilename);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  JSModule  module  =  compiler.getModule(currentFilename);  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	JSModule  module  =  compiler.getModule(currentFilename);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  module.toString();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  currentFilename  =  module.toString();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  JSModule  currentFilename  =  module.getModule();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  JSModule  currentFilename  =  module.getModule();  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	JSModule  currentFilename  =  module.getModule();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  JSModule  currentFilename  =  compiler.getModule(currentFilename);  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  JSModule  currentFilename  =  compiler.getModule(currentFilename);  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	JSModule  currentFilename  =  compiler.getModule(currentFilename);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  module.toString();  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename  ==  null)  {  currentFilename  =  module.toString();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename  ==  null)  {  currentFilename  =  module.toString();  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  currentFilename  =  module.substring(0,  currentFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  JSModule  module  =  compiler.getModule(currentFilename);  currentFilename  =  module.toString();  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  JSModule  module  =  compiler.getModule(currentFilename);  currentFilename  =  module.toString();  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	JSModule  module  =  compiler.getModule(currentFilename);  currentFilename  =  module.toString();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename!=  null)  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length()  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length()  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length()	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    System.arraycopy(requiredFilename,    0,    currentFilename,    0,    requiredFilename.length());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(requiredFilename.endsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".   "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(requiredFilename.startsWith(   ".   ")||    requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  if(requiredFilename.equals( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.equals( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.equals( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$   ",   "   ");  }	  if(requiredFilename.equals(   "   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".js ")||  requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".java "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.startsWith( ".js ")||  currentFilename.startsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [CE]  illegal  start  of  expression  [FE]                                junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  }  [CE]  illegal  start  of  expression  [FE]                                  junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename.endsWith( ".js "))  {  currentFilename  =  currentFilename.substring(0,  currentFilename.length()  -  3);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(requiredFilename.equals( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.equals( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.equals( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.equals(   "   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$, ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$, ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$, ",   "   ");  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  if(requiredFilename.length()  >=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.length()  >=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.length()  >=  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	  if(requiredFilename.length()    >    0)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }	  if(requiredFilename.length()    >    0)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.endsWith( ".js ")||  requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.endsWith(   ".js   "))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   ". ");  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(currentFilename  ==  null)  {  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  else  {  compiler.reportCodeChange();  }	  if(requiredFilename!=    null)    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide(   "module$test   ");var  module$test={};var  a$$module$test=1    [CONTEXT]    public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {    [BUGGY]  if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }  [BUGGY]    currentFilename  =  currentFilename.replaceAll(   "\\.js$   ",     "   ");  if  (requiredFilename.startsWith(   ".   "  +  File.separator)  ||  requiredFilename.startsWith(   "..   "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".js$ ")||  requiredFilename.startsWith( ".js$ "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   "   ");  }	  if(requiredFilename.startsWith(   "..   "    +    File.separator))    {    requiredFilename    =    requiredFilename.replaceAll(   ".js$   ",       "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
