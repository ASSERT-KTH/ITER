bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
3	[BUG]  [BUGGY]  if(requiredFilename.equals( " "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.equals( " "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.equals( " "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
4	[BUG]  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.endsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
5	[BUG]  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename  ==  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
6	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".js "))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
7	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ". ")||  requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]    [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	  	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
9	[BUG]  [BUGGY]  if(requiredFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.length()  ==  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
10	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  compiler.reportCodeChange();  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  compiler.reportCodeChange();  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
11	[BUG]  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename!=  null)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  else  {  System.arraycopy(requiredFilename,  0,  currentFilename,  0,  requiredFilename.length());  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
12	[BUG]  [BUGGY]  if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.length()  >  0)  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  goog.provide( "module$test ");var  module$test={};var  a$$module$test=1  [CONTEXT]  public  static  String  toModuleName(String  requiredFilename,  String  currentFilename)  {  [BUGGY]  if(requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }  [BUGGY]  currentFilename  =  currentFilename.replaceAll( "\\.js$ ",   " ");  if  (requiredFilename.startsWith( ". "  +  File.separator)  ||  requiredFilename.startsWith( ".. "  +  File.separator))  {  try  {  requiredFilename  =  (new  URI(currentFilename)).resolve(new  URI(requiredFilename))  .toString();  }  catch  (URISyntaxException  e)  {  throw  new  RuntimeException(e);  }  [CLASS]  ProcessCommonJSModules  ProcessCommonJsModulesCallback  SuffixVarsCallback  [METHOD]  toModuleName  [RETURN_TYPE]  String  String  requiredFilename  String  currentFilename  [VARIABLES]  JSModule  module  AbstractCompiler  compiler  boolean  reportDependencies  String  DEFAULT_FILENAME_PREFIX  EXPORTS  MODULE_NAME_PREFIX  MODULE_NAME_SEPARATOR  currentFilename  filename  filenamePrefix  requiredFilename  suffix  URISyntaxException  e  int  scriptNodeCount  	projects/Closure26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java	0.8944271909999159	99	99	5	replace	if(requiredFilename.startsWith( ".. "  +  File.separator))  {  requiredFilename  =  requiredFilename.replaceAll( ".js$ ",   " ");  }	requiredFilename  =  requiredFilename.replaceAll( "\\.js$ ",   " ");  	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
