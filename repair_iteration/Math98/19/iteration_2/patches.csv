bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	37	None	add
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	4	add
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	4	add
9	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	4	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	4	add
11	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	52	4	add
12	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
13	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
14	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  nRows  =  this.getRowDimension();	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	112	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  int  cannot  be  dereferenced	112	None	replace
16	[BUG]  [BUGGY]  out[i]  =  ZERO;  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ZERO;	  out[i]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
17	[BUG]  [BUGGY]  out[i]  =  sum.copyOf(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  sum.copyOf(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.copyOf(data[row][i].multiply(v[i]));	  out[i]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  in  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    in[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  in	46	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  in  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    in[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  in	46	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  int  cannot  be  dereferenced	92	None	replace
21	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
22	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][row.length];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
23	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row.length];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
24	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  +  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
25	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
26	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
27	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[v.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[v.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[v.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
29	[BUG]  [BUGGY]  out[row]  =  v.cloneTree();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.cloneTree();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.cloneTree();	  out[row]    =    v;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
30	[BUG]  [BUGGY]  out[row]  =  v.intValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.intValue();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.intValue();	  out[row]    =    v;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.add(data[row][0].multiply(v[1]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	4	replace
32	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][0].multiply(v[1]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	4	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[nCols]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.add(data[row][0].multiply(v[nCols]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	4	replace
34	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[nCols]));  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[nCols]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][0].multiply(v[nCols]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	4	replace
35	[BUG]  [BUGGY]  out[row]  =  data[row][0].multiply(v[i]));  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][0].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][0].multiply(v[i]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	74	None	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	4	replace
37	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	4	replace
38	[BUG]  [BUGGY]  nRows  =  data[row][i].multiply(v[i]);  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  nRows  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	nRows  =  data[row][i].multiply(v[i]);	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	114	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	137	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
41	[BUG]  [BUGGY]  out[row]  =  Sum.valueOf(v[i]);  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.valueOf(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.valueOf(v[i]);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  i	139	None	replace
42	[BUG]  [BUGGY]  out[row]  =  sum.valueOf(sum);  [CE]  no  suitable  method  found  for  valueOf(BigDecimal)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.valueOf(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.valueOf(sum);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(BigDecimal)	139	None	replace
43	[BUG]  [BUGGY]  out[row]  =  Sum.valueOf(sum,  sum);  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.valueOf(sum,  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.valueOf(sum,  sum);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  Sum	139	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[row][i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[row][i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[row][i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
47	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	non-compiled	[CE]  cannot  find  symbol  i	93	None	replace
48	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	93	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
50	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
52	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
54	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
56	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	4	add
57	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  array  required,  but  BigDecimal  found	54	None	add
58	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	88	None	replace
59	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	88	None	replace
60	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	88	None	replace
61	[BUG]  [BUGGY]  out[i]  =  sum.toBigDecimal();  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  sum.toBigDecimal();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.toBigDecimal();	  out[row]    =    sum.toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol  i	70	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ';'  expected	129	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	129	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ';'  expected	129	None	replace
65	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	106	None	replace
66	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[0]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[0]));	  out[row]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  cannot  find  symbol  i	124	None	replace
67	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	117	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].Multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].Multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
70	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	111	None	replace
71	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    out    =    new    ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	91	None	replace
72	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row][i].multiply(v[i]));  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row][i].multiply(v[i]));	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    out    =    new    ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ')'  expected	91	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	2	add
74	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	2	add
75	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[	  	non-compiled	[CE]  ']'  expected	22	None	add
76	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
77	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[	  	non-compiled	[CE]  ']'  expected	22	None	add
78	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(	  	non-compiled	[CE]  ')'  expected	22	None	add
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].add(data[i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].add(data[i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  sum.add(data[i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  sum.add(data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  sum.add(data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].add(data[i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
83	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
85	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
86	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  sum.subtract(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  sum.subtract(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out  =  sum.subtract(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
87	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
88	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
90	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
92	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
93	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
94	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
95	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	50	None	add
96	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[row]  =  ZERO;	  out[row]    =    ZERO;    ArrayIndexOutOfBoundsException    out[row]    =    ZERO;    	non-compiled	[CE]  ']'  expected	95	None	replace
97	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  0;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  0;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[row]  =  0;	  out[row]    =    ZERO;    ArrayIndexOutOfBoundsException    out[row]    =    ZERO;    	non-compiled	[CE]  ']'  expected	95	None	replace
98	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  null;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  null;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[row]  =  null;	  out[row]    =    ZERO;    ArrayIndexOutOfBoundsException    out[row]    =    ZERO;    	non-compiled	[CE]  ']'  expected	95	None	replace
99	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(sum);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(sum);	  out[row]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
100	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(sum,  v[i]);  [CE]  cannot  find  symbol  i  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(sum,  v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(sum,  v[i]);	  out[row]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
101	[BUG]  [BUGGY]  out[row]  =  data[row][j].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][j].multiply(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][j].multiply(v[i]);	  out[row]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
102	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(sum);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(sum);	  out[row]    =    data[row][i].copyOf(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	144	None	replace
103	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(sum,  v[i]);  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(sum,  v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(sum,  v[i]);	  out[row]    =    data[row][i].copyOf(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	144	None	replace
104	[BUG]  [BUGGY]  out[row]  =  data[row][j].copyOf(v[i]);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][j].copyOf(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][j].copyOf(v[i]);	  out[row]    =    data[row][i].copyOf(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	144	None	replace
105	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i])+  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(v[i])+  1);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i])+  1);	  out[row]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	14	None	replace
106	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i]),  sum);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(v[i]),  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i]),  sum);	  out[row]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	14	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
109	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][0];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	30	None	replace
110	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1][0];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1][0];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	30	None	replace
111	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	107	None	replace
112	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows  +  1;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	107	None	replace
113	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	107	None	replace
114	[BUG]  [BUGGY]  out[row]  =  sum.copyOf(data[row][i]));  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.copyOf(data[row][i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.copyOf(data[row][i]));	  out[row]    =    data[row][i].copyOf(v[i]));    	non-compiled	[CE]  ';'  expected	105	None	replace
115	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(sum,  v[i]));  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(sum,  v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(sum,  v[i]));	  out[row]    =    data[row][i].copyOf(v[i]));    	non-compiled	[CE]  ';'  expected	105	None	replace
116	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][nCols];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	replace
117	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][v.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nCols][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][nCols];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i].multiply(v[i]))    {    return    out;    }    	non-compiled	[CE]  ')'  expected	89	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].subply(v[i]))  {  return  out;  }  [CE]  ')'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].subply(v[i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].subply(v[i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i].multiply(v[i]))    {    return    out;    }    	non-compiled	[CE]  ')'  expected	89	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  output;  }  [CE]  ')'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  output;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  output;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i].multiply(v[i]))    {    return    out;    }    	non-compiled	[CE]  ')'  expected	89	None	replace
121	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	113	2	add
123	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	113	2	add
124	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfB  [CE]  '('  or  '['  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfB  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfB	  	non-compiled	[CE]  '('  or  '['  expected	113	None	add
125	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBo  [CE]  '('  or  '['  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBo  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBo	  	non-compiled	[CE]  '('  or  '['  expected	113	None	add
126	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOf  [CE]  '('  or  '['  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOf  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOf	  	non-compiled	[CE]  '('  or  '['  expected	113	None	add
127	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][v.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	61	None	replace
128	[BUG]  [BUGGY]  out[row]  =  nRows.copyOf(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  nRows.copyOf(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  nRows.copyOf(data[row][i].multiply(v[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
129	[BUG]  [BUGGY]  out[row]  =  sum.copyOf(data[row][0].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.copyOf(data[row][0].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.copyOf(data[row][0].multiply(v[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  cannot  find  symbol  i	16	None	replace
130	[BUG]  [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	9	None	replace
131	[BUG]  [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	9	None	replace
132	[BUG]  [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  dataset[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  dataset[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  dataset[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	9	None	replace
133	[BUG]  [BUGGY]  out[row]  =  v[i].add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[i].add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[i].add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
134	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	128	None	replace
135	[BUG]  [BUGGY]  result[i]  =  sum.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  result[i]  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	result[i]  =  sum.add(data[row][i].multiply(v[i]));	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
136	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	128	None	replace
137	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  '.class'  expected	82	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  Sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	82	None	replace
139	[BUG]  [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  v[row];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
141	[BUG]  [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  v[row];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
143	[BUG]  [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
144	[BUG]  [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
145	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][row];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][row];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nCols][row];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	28	None	replace
146	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][v[i]);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][v[i]);	  out[row]    =    sum.multiply(data[row][i]);    	non-compiled	[CE]  ']'  expected	35	None	replace
147	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][0]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.multiply(data[row][0]);	  out[row]    =    sum.multiply(data[row][i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
148	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][0]);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][0]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][0]);	  out[row]    =    sum.multiply(data[row][i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	45	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	45	None	replace
151	[BUG]  [BUGGY]  out[row][i]  =  sum.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  sum.multiply(data[row][i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  sum.multiply(data[row][i]);	  out[i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	140	None	replace
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
153	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
154	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
156	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
157	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
158	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
159	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
160	[BUG]  [BUGGY]  out[row]  =  v.length;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.length;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.length;	  out[row]    =    Sum;    	non-compiled	[CE]  incompatible  types	17	None	replace
161	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
162	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
163	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
164	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
165	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
166	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  sum.toArray(new  BigDecimal[nRows]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  sum.toArray(new  BigDecimal[nRows]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out  =  sum.toArray(new  BigDecimal[nRows]);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
167	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
168	[BUG]  [BUGGY]  out[row]  =  data[row][i].add(v[i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].add(v[i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].add(v[i].multiply(v[i]));	  out[row]    =    v.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	73	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [CE]  cannot  find  symbol  V  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(V[i]));    }    	non-compiled	[CE]  cannot  find  symbol  V	151	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [CE]  cannot  find  symbol  V  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(V[i]));    }    	non-compiled	[CE]  cannot  find  symbol  V	151	None	replace
172	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	154	None	replace
173	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[row.size()  ]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[row.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[row.size()  ]);	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	154	None	replace
174	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	154	None	replace
175	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	96	None	replace
176	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]),  v[i]);	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	96	None	replace
177	[BUG]  [BUGGY]  bigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  bigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
178	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i])||  sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i])||  sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i])||  sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
182	[BUG]  [BUGGY]  out[row]  =  Sum.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	125	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[	  for(int    i    =    0;    i    <    nSum;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
185	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
186	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
187	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
188	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
189	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.remove(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
190	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	133	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[  [CE]  illegal  start  of  expression  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  }  [CE]  illegal  start  of  expression  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data.length];    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data.length];    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  illegal  start  of  expression  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data.length];    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
197	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][v.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	27	None	replace
198	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[selectedRows.length][row];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[selectedRows.length][row];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[selectedRows.length][row];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	27	None	replace
199	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    sum.add(data[row][0].multiply(v[0]));    out[row]  =  sum.add(data[row][0].multiply(v[0]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
200	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    out[row]  =  sum.add(data[row][0].multiply(v[0]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
201	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  ArrayIndexOutOfBoundsException  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  ArrayIndexOutOfBoundsException  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    ArrayIndexOutOfBoundsException  out[row]  =  sum.add(data[row][0].multiply(v[0]));	  	non-compiled	[CE]  ']'  expected	123	None	add
202	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  int  row]  =  sum.add(data[row][0].multiply(v[0]));  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  int  row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    int  row]  =  sum.add(data[row][0].multiply(v[0]));	  	non-compiled	[CE]  ';'  expected	123	None	add
203	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal[]  sum  =  sum.add(data[row][0].multiply(v[0]));  [CE]  variable  sum  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal[]  sum  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    BigDecimal[]  sum  =  sum.add(data[row][0].multiply(v[0]));	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  operate(BigDecimal[])	123	None	add
204	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    sum.add(data[row][0].multiply(v[0]));    out[row]  =  sum.add(data[row][0].multiply(v[1]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
205	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  out[row]  =  sum.add(data[row][0].multiply(v[1]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    out[row]  =  sum.add(data[row][0].multiply(v[1]));	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
206	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	2	None	replace
207	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][data.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][data.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][data.length];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	2	None	replace
208	[BUG]  [BUGGY]  out[i]  =  Sum.toBigDecimal();  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  Sum.toBigDecimal();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  Sum.toBigDecimal();	  out[i]    =    v.toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol  i	72	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Sum.subtract(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	56	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Sum.subtract(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	56	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]),    v[i]);    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	84	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]),    v[i]);    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	84	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]),    v[i]);    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	84	None	replace
214	[BUG]  [BUGGY]  out[row]  =  sum.multiply(v);  [CE]  no  suitable  method  found  for  multiply(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(v);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(v);	  out[row]    =    v.multiply(sum);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(BigDecimal[])	86	None	replace
215	[BUG]  [BUGGY]  out[row]  =  v.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.multiply(data[row][i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.multiply(data[row][i]);	  out[row]    =    v.multiply(sum);    	non-compiled	[CE]  cannot  find  symbol  i	86	None	replace
216	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
218	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	78	None	add
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	78	None	add
222	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  data[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  data[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i],  data[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i],    v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	142	None	replace
223	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i],    v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	142	None	replace
224	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nCols));  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nCols));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i],  nCols));	  out[row]    =    sum.add(data[row][i].multiply(v[i],    v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	142	None	replace
225	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  ']'  expected	99	None	replace
226	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	99	None	replace
227	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	99	None	replace
228	[BUG]  [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  if(sum!=    null)    {    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
229	[BUG]  [BUGGY]  out[row]  =  sum.one;  [CE]  cannot  find  symbol  one  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.one;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.one;	  out[row]    =    Sum.ONE;    	non-compiled	[CE]  cannot  find  symbol  one	94	None	replace
230	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.ONE;	  out[row]    =    Sum.ONE;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	4	replace
231	[BUG]  [BUGGY]  out[row]  =  sum.ONE;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.ONE;	  out[row]    =    Sum.ONE;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	4	replace
232	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
233	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
234	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
235	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
236	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
237	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
238	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  int  nRows  =  this.getRowDimension();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
239	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
240	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
241	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	126	None	replace
242	[BUG]  [BUGGY]  result.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  result.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	result.add(data[row][i].multiply(v[i]));	  int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	126	None	replace
243	[BUG]  [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	  if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].subtract(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
244	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	  if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].subtract(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	4	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	  if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].subtract(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	4	replace
246	[BUG]  [BUGGY]  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal    v    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	97	None	replace
247	[BUG]  [BUGGY]  BigDecimal  out  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal  out  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal  out  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal    v    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	97	None	replace
248	[BUG]  [BUGGY]  BigDecimal  v  =  sum.add(data[row][i].multiply(nCols[i]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal  v  =  sum.add(data[row][i].multiply(nCols[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal  v  =  sum.add(data[row][i].multiply(nCols[i]));	  out[row]    =    ZERO;    BigDecimal    v    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	97	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data  [CE]  ')'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  ')'  expected	69	None	replace
251	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
252	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  ZERO;  out[row]  =  ZERO;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
253	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
254	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
255	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	4	None	add
256	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum.length()  ==  0)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum.length()  ==  0)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    if(sum.length()  ==  0)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
257	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	add
258	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	add
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows.length;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows.length;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
261	[BUG]  [BUGGY]  while(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  while(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
262	[BUG]  [BUGGY]  while(data!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(data!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(data!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  while(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
263	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][columnDimension];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][columnDimension];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][columnDimension];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][columnDimension];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	replace
264	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  +  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][columnDimension];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	replace
265	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
266	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
267	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
268	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
269	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	8	None	add
270	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
271	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
272	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
273	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	add
274	[BUG]  [BUGGY]  out[row][0]  =  sum.add(data[row][i].multiply(v[0]));  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  sum.add(data[row][i].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  sum.add(data[row][i].multiply(v[0]));	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	47	None	replace
275	[BUG]  [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[1]));  [CE]  array  required,  but  BigDecimal  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[1]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  sum.add(data[row][0].multiply(v[1]));	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	47	None	replace
276	[BUG]  [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[0]),  v[i]);  [CE]  array  required,  but  BigDecimal  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[0]),  v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  sum.add(data[row][0].multiply(v[0]),  v[i]);	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	47	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  ']'  expected	120	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]  [CE]  ')'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	120	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
281	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	146	None	replace
282	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][2];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][2];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	146	None	replace
283	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
284	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
285	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
286	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
287	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
288	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
289	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	6	None	add
290	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
291	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
292	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][0];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nCols][0];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	131	None	replace
293	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][1];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	131	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[row][i]    	non-compiled	[CE]  ')'  expected	68	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]!=  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]!=  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]!=	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[row][i]    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
296	[BUG]  [BUGGY]  }  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  }  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	}  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Data	26	None	replace
298	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  v[row];	  out[row]    =    ZERO;    out[row]    =    ZERO;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
299	[BUG]  [BUGGY]  out[row]  =  v[row];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row];  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row];	  out[row]    =    ZERO;    out[row]    =    ZERO;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	3	replace
300	[BUG]  [BUGGY]  out[row]  =  v[i];  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[i];  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[i];	  out[row]    =    ZERO;    out[row]    =    ZERO;    	non-compiled	[CE]  cannot  find  symbol  i	5	None	replace
301	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  2];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  2];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	replace
302	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  *  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  *  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row  *  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	replace
303	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  3];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  3];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  3];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	replace
304	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  v.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  v.length;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  v.length;	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row],    sum;    	non-compiled	[CE]  ';'  expected	100	None	replace
305	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  data.length;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  data.length;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum,  data.length;	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row],    sum;    	non-compiled	[CE]  ';'  expected	100	None	replace
306	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  v.length;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  v.length;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  v.length;	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row],    sum;    	non-compiled	[CE]  ';'  expected	100	None	replace
307	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i]),  data[i]);	  out[row]    =    sum.add(data[row][i].multiply(v[i]),    v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	143	None	replace
308	[BUG]  [BUGGY]  out[row][i]  =  sum.multiply(data[row][i]));  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  sum.multiply(data[row][i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  sum.multiply(data[row][i]));	  out[row][i]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	49	None	replace
309	[BUG]  [BUGGY]  out[row][i]  =  sum.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  sum.multiply(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  sum.multiply(data[row][i].multiply(v[i]));	  out[row][i]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
310	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
311	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
312	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
314	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
315	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
316	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(sum);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].multiply(sum);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(sum);	  out[row][i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	157	None	replace
317	[BUG]  [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0]);  [CE]  array  required,  but  BigDecimal  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  data[row][0].multiply(v[0]);	  out[row][i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  array  required,  but  BigDecimal  found	157	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    Sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	25	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    Sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Sum	25	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[row][i]    	non-compiled	[CE]  ')'  expected	66	None	replace
321	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	130	None	replace
322	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum.length  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][sum.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	130	None	replace
323	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][sum];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][sum];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	119	None	replace
324	[BUG]  [BUGGY]  out[row]  =  nRows.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  nRows.multiply(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  nRows.multiply(data[row][i].multiply(v[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
325	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][v.multiply(nRows[i]));  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v.multiply(nRows[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][v.multiply(nRows[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  ']'  expected	21	None	replace
326	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
327	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
328	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  v[i];  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  v[i];  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
329	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  v[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  v[i];  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  v[i];  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
330	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ONE;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ONE;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
331	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ONE;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ONE;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ONE;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
332	[BUG]  [BUGGY]  out[row]  =  data[row].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row].multiply(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row].multiply(v[i]);	  out[row]    =    data[row].toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol  i	71	None	replace
333	[BUG]  [BUGGY]  out[row]  =  v[row].toBigDecimal();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row].toBigDecimal();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row].toBigDecimal();	  out[row]    =    data[row].toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
334	[BUG]  [BUGGY]  out[row]  =  v.multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.multiply(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.multiply(v[i]);	  out[row]    =    ZERO;    if(sum!=    null)    {    out[row]    =    ZERO;    }    else    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	153	None	replace
335	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
337	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
339	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	121	None	add
342	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
343	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  nSum	53	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    v.length;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	152	None	replace
346	[BUG]  [BUGGY]  out[row]  =  Sum.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.multiply(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.multiply(data[row][i].multiply(v[i]));	  out[row]    =    ZERO.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
347	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])/  1;  [CE]  cannot  find  symbol  i  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])/  1;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i])/  1;	  out[row][i]    =    data[row][i].multiply(v[i])+    1;    	non-compiled	[CE]  cannot  find  symbol  i	158	None	replace
348	[BUG]  [BUGGY]  out[row][i]  =  sum.multiply(data[row][i])+  1;  [CE]  cannot  find  symbol  i  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  sum.multiply(data[row][i])+  1;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  sum.multiply(data[row][i])+  1;	  out[row][i]    =    data[row][i].multiply(v[i])+    1;    	non-compiled	[CE]  cannot  find  symbol  i	158	None	replace
349	[BUG]  [BUGGY]  out[row]  =  sum.subtract(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.subtract(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.subtract(data[row][i].multiply(v[i]));	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	non-compiled	[CE]  cannot  find  symbol  i	104	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data[row][i].multiply(v[i]));  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  data[row][i].multiply(v[i]));  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  data[row][i].multiply(v[i]));  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nRows.length;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ';'  expected	83	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nSum;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
352	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	24	None	replace
353	[BUG]  [BUGGY]  out[row][i]  =  sum.subtract(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  sum.subtract(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  sum.subtract(data[row][i].multiply(v[i]));	  out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	85	None	replace
354	[BUG]  [BUGGY]  out[row]  =  data[row][i].subtract(sum.multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].subtract(sum.multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].subtract(sum.multiply(v[i]));	  out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	85	None	replace
355	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	155	None	replace
356	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	155	None	replace
357	[BUG]  [BUGGY]  BigDecimal[]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	155	None	replace
358	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i]);	  bigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	109	None	replace
359	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);	  bigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	109	None	replace
360	[BUG]  [BUGGY]  out[i]  =  sum.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  sum.multiply(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.multiply(data[row][i].multiply(v[i]));	  out[i]    =    sum.multiply(data[row][i]);    	non-compiled	[CE]  cannot  find  symbol  i	87	None	replace
361	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
362	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
363	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
364	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
365	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data.length];    }    	non-compiled	[CE]  >  expected	136	None	replace
366	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data.length];    }    	non-compiled	[CE]  >  expected	136	None	replace
367	[BUG]  [BUGGY]  if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
368	[BUG]  [BUGGY]  bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	155	None	replace
369	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	4	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	4	replace
371	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  1);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i])+  1);	  out[row][i]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	49	None	replace
372	[BUG]  [BUGGY]  out[row][i]  =  v[i].multiply(data[row][i]));  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  v[i].multiply(data[row][i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  v[i].multiply(data[row][i]));	  out[row][i]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	49	None	replace
373	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
374	[BUG]  [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
375	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  ONE;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
376	[BUG]  [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
377	[BUG]  [BUGGY]  int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);	  int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	126	None	replace
378	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].add(data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	108	None	replace
379	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].add(data[i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
380	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(v[i])+  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(v[i])+  1);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(v[i])+  1);	  out[row]    =    data[row][i].copyOf(v[i]));    	non-compiled	[CE]  ';'  expected	105	None	replace
381	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]),  sum);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]),  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(v[i]),  sum);	  out[row]    =    data[row][i].copyOf(v[i]));    	non-compiled	[CE]  ';'  expected	105	None	replace
382	[BUG]  [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subply(v[i]));  }	  if(sum!=    null)    {    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
383	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	156	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nLows  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nLows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  nLows	92	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nSum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  nSum	92	None	replace
387	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  out[row]  =  ZERO;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  out[row]  =  ZERO;	  	non-compiled	[CE]  ']'  expected	4	None	add
388	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	4	None	add
389	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  BigDecimal  out[row]  =  ZERO;  out[row]  =  ZERO;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  BigDecimal  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    BigDecimal  out[row]  =  ZERO;  out[row]  =  ZERO;	  	non-compiled	[CE]  ']'  expected	4	None	add
390	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  out[row]  =  ZERO;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    ArrayIndexOutOfBoundsException  out[row]  =  ONE;  out[row]  =  ZERO;	  	non-compiled	[CE]  ']'  expected	4	None	add
391	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Data	134	None	replace
392	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  ']'  expected	63	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[1];  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[1];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[1];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
394	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  >  expected	63	None	replace
395	[BUG]  [BUGGY]  if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	107	None	replace
396	[BUG]  [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0])+  1;  [CE]  array  required,  but  BigDecimal  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0])+  1;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  data[row][0].multiply(v[0])+  1;	  out[row][i]    =    data[row][i].multiply(v[i])+    1;    	non-compiled	[CE]  array  required,  but  BigDecimal  found	158	None	replace
397	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  2;  [CE]  cannot  find  symbol  i  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  2;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i])+  2;	  out[row][i]    =    data[row][i].multiply(v[i])+    1;    	non-compiled	[CE]  cannot  find  symbol  i	158	None	replace
398	[BUG]  [BUGGY]  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ZERO.add(data[row][i].multiply(v[i]));	  int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	106	None	replace
399	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][nRows];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][nRows];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][nRows];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	59	None	replace
400	[BUG]  [BUGGY]  out[row]  =  Sum.ZERO;  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.ZERO;	  out[row]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	17	None	replace
401	[BUG]  [BUGGY]  bigDecimal[][]  out  =  new  BigDecimal[sum.length][row];  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  bigDecimal[][]  out  =  new  BigDecimal[sum.length][row];  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal[][]  out  =  new  BigDecimal[sum.length][row];	  out[row]    =    ZERO;    BigDecimal[][]    out    =    new    BigDecimal[sum.length][row];    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
402	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[0]);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(v[0]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[0]);	  out[i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	140	None	replace
403	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  sum;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  sum;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[row]  =  sum;	  out[row]    =    ZERO;    ArrayIndexOutOfBoundsException    out[row]    =    ZERO;    	non-compiled	[CE]  ']'  expected	95	None	replace
404	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	ArrayIndexOutOfBoundsException  out[row]  =  ONE;	  out[row]    =    ZERO;    ArrayIndexOutOfBoundsException    out[row]    =    ZERO;    	non-compiled	[CE]  ']'  expected	95	None	replace
405	[BUG]  [BUGGY]  out[row]  =  data[row][i].add(v[i]);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].add(v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].add(v[i]);	  out[row]    =    v.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	73	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[i]	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  ']'  expected	64	None	replace
408	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal[][]  out  =  sum.add(data[row][0].multiply(v[0]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal[][]  out  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    BigDecimal[][]  out  =  sum.add(data[row][0].multiply(v[0]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	123	None	add
409	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal  v  =  sum.add(data[row][0].multiply(v[0]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  BigDecimal  v  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    BigDecimal  v  =  sum.add(data[row][0].multiply(v[0]));	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	123	None	add
410	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i])+  1,  v[i]);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i])+  1,  v[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i])+  1,  v[i]);	  out[row]    =    sum.add(data[row][i].multiply(v[i]),    v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	143	None	replace
411	[BUG]  [BUGGY]  out[row]  =  Sum.valueOf(sum,  data[row][i]);  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.valueOf(sum,  data[row][i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.valueOf(sum,  data[row][i]);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  i	139	None	replace
412	[BUG]  [BUGGY]  out[row]  =  Sum.valueOf(sum,  i);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.valueOf(sum,  i);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.valueOf(sum,  i);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  i	139	None	replace
413	[BUG]  [BUGGY]  int  i  =  0;  nRows  =  data[row][i].length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  nRows  =  data[row][i].length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  nRows  =  data[row][i].length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ';'  expected	128	None	replace
414	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[0],  v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[0],  v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[0],  v[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i],    v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	142	None	replace
415	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i],  nRows));	  out[row]    =    sum.add(data[row][i].multiply(v[i],    v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	142	None	replace
416	[BUG]  [BUGGY]  bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
417	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  ']'  expected	31	None	replace
418	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][nCols];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][nCols];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	replace
419	[BUG]  [BUGGY]  if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	88	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i].multiply(v[i]))    {    return    out;    }    	non-compiled	[CE]  ')'  expected	89	None	replace
421	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	99	None	replace
422	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
423	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
424	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
425	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
426	[BUG]  [BUGGY]  out[row]  =  sum.copyOf(data[row][v.multiply(nRows[i]));  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.copyOf(data[row][v.multiply(nRows[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.copyOf(data[row][v.multiply(nRows[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  ']'  expected	16	None	replace
427	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
428	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
429	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
430	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
431	[BUG]  [BUGGY]  out[row]  =  ONE.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	125	None	replace
432	[BUG]  [BUGGY]  out[row]  =  v.add(data[row][0].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.add(data[row][0].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.add(data[row][0].multiply(v[i]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	74	None	replace
433	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	146	None	replace
434	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	6	None	add
435	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	6	None	add
436	[BUG]  [BUGGY]  out[i]  =  v;  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  v;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  v;	  out[row]    =    v;    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
437	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][v.length].multiply(nRows[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v.length].multiply(nRows[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][v.length].multiply(nRows[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
438	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][v.length].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v.length].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][v.length].multiply(v[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  cannot  find  symbol  i	21	None	replace
439	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLeft;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nLeft  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nLeft;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nLeft;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  nLeft	133	None	replace
440	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	122	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	78	None	add
442	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	78	None	add
443	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	78	None	add
444	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
445	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	2	add
446	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    out    =    new    ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	4	replace
447	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    out    =    new    ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	4	replace
448	[BUG]  [BUGGY]  out[row]  =  data[row].toBigDecimal(sum);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row].toBigDecimal(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row].toBigDecimal(sum);	  out[row]    =    data[row].toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
449	[BUG]  [BUGGY]  out[row]  =  data[row].multiply(sum);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row].multiply(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row].multiply(sum);	  out[row]    =    data[row].toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
450	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	76	None	replace
451	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
452	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
453	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
454	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
455	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
456	[BUG]  [BUGGY]  out[i]  =  ONE;  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ONE;	  out[i]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  i	18	None	replace
457	[BUG]  [BUGGY]  out[row]  =  ONE;  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE;  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal    v    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	97	None	replace
458	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  For(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  '.class'  expected	80	None	replace
459	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	8	None	add
460	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	8	None	add
461	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i])  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i])  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i])	  	non-compiled	[CE]  ']'  expected	8	None	add
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    new    BigDecimal[data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	120	None	replace
463	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][2];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][2];	  BigDecimal[][]    out    =    new    BigDecimal[sum.length][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	29	None	replace
464	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][sum];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][sum];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][sum];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][sum];    	non-compiled	[CE]  ']'  expected	119	None	replace
465	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])data[	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
466	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0],  sum;  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0],  sum;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0],  sum;	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row],    sum;    	non-compiled	[CE]  ']'  expected	100	None	replace
467	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	135	None	replace
468	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	135	None	replace
469	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
470	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
471	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
472	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	22	None	add
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	121	None	add
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	121	None	add
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	121	None	add
476	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	121	None	add
477	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
478	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	4	add
479	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][sum.length];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][sum.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][sum.length];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][sum.length];    	non-compiled	[CE]  ']'  expected	1	None	replace
480	[BUG]  [BUGGY]  out[row]  =  ZERO.subtract(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ZERO.subtract(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ZERO.subtract(data[row][i].multiply(v[i]));	  out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	85	None	replace
481	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
482	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].subtract(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
483	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
484	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	57	None	add
485	[BUG]  [BUGGY]  if(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
486	[BUG]  [BUGGY]  out[0]  =  0;  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[0]  =  0;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[0]  =  0;	  out[row]    =    ZERO;    out[row]    =    ZERO;    	non-compiled	[CE]  incompatible  types	5	None	replace
487	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][v.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	117	None	replace
488	[BUG]  [BUGGY]  out[row][0]  =  v[0].add(data[row][0].multiply(v[0]));  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  v[0].add(data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  v[0].add(data[row][0].multiply(v[0]));	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	47	None	replace
489	[BUG]  [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0]));  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  data[row][0].multiply(v[0]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  data[row][0].multiply(v[0]));	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  ';'  expected	47	None	replace
490	[BUG]  [BUGGY]  BigDecimal[][]  out  =  v[i].multiply(data[row][i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  v[i].multiply(data[row][i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  v[i].multiply(data[row][i]);	  bigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	109	None	replace
491	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;	  bigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	109	None	replace
492	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  >  expected	37	None	add
493	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	37	None	add
494	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	37	None	add
495	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	37	None	add
496	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  >  expected	37	None	add
497	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLeft;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nLeft  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nLeft;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nLeft;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    nRows    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  nLeft	24	None	replace
498	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i])+  1;  }  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i])+  1;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i])+  1;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	129	None	replace
499	[BUG]  [BUGGY]  out[i]  =  data[row][i].multiply(sum);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  data[row][i].multiply(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  data[row][i].multiply(sum);	  out[i]    =    sum.multiply(data[row][i]);    	non-compiled	[CE]  cannot  find  symbol  i	87	None	replace
500	[BUG]  [BUGGY]  out[i]  =  ONE.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ONE.multiply(data[row][i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ONE.multiply(data[row][i]);	  out[i]    =    sum.multiply(data[row][i]);    	non-compiled	[CE]  cannot  find  symbol  i	87	None	replace
501	[BUG]  [BUGGY]  out[i]  =  ZERO.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ZERO.multiply(data[row][i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ZERO.multiply(data[row][i]);	  out[i]    =    sum.multiply(data[row][i]);    	non-compiled	[CE]  cannot  find  symbol  i	87	None	replace
502	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum][row.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum][row.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum][row.length];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
503	[BUG]  [BUGGY]  out[row]  =  ONE.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE.multiply(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE.multiply(data[row][i].multiply(v[i]));	  out[row]    =    ZERO.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	116	None	replace
504	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(value[i]);  [CE]  cannot  find  symbol  value  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(value[i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(value[i]);	  out[row]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  value	36	None	replace
505	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  value.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  value  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  value.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  value.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data[row][i].length);    	non-compiled	[CE]  cannot  find  symbol  value	93	None	replace
506	[BUG]  [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	9	None	replace
507	[BUG]  [BUGGY]  out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
508	[BUG]  [BUGGY]  out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  ONE;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
509	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i].length);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i].length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i].length);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
510	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(nRows);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(nRows);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(nRows);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
511	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length,  data.length);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length,  data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length,  data.length);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
512	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  ONE;	  out[row]    =    ZERO;    if(sum!=    null)    {    out[row]    =    ZERO;    }    else    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	4	replace
513	[BUG]  [BUGGY]  out[row]  =  ONE;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  ONE;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ONE;	  out[row]    =    ZERO;    if(sum!=    null)    {    out[row]    =    ZERO;    }    else    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	4	replace
514	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[i]  }  [CE]  ')'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[i]  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    }    	non-compiled	[CE]  ')'  expected	138	None	replace
515	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v.length]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.multiply(data[row][v.length]);	  out[row]    =    sum.multiply(data[row][i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
516	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][v.length]);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][v.length]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][v.length]);	  out[row]    =    sum.multiply(data[row][i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	4	replace
517	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
518	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
519	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
520	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
521	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
522	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
523	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(sum);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(sum);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
524	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum.length);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum.length);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    ArrayIndexOutOfBoundsException  out[]  =  new  ArrayIndexOutOfBoundsException(sum.length);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
525	[BUG]  [BUGGY]  out[row][i]  =  data[row][j].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][j].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][j].multiply(v[i]);	  out[row][i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	157	None	replace
526	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
527	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(nCols,  data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
528	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data,  row);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
529	[BUG]  [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
530	[BUG]  [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.length;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.length;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
531	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSums;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nSum;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
532	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(v.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(v.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
533	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(v.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(v.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(v.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	add
534	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
535	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Data	134	None	replace
536	[BUG]  [BUGGY]  out[row][0]  =  data[row][i].multiply(v[i]);  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  data[row][i].multiply(v[i]);	  out[row][i]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  array  required,  but  BigDecimal  found	157	None	replace
537	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
538	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
539	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  Data	26	None	replace
540	[BUG]  [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	128	None	replace
541	[BUG]  [BUGGY]  if(v.length  ==  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v.length  ==  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v.length  ==  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	128	None	replace
542	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    }    	non-compiled	[CE]  >  expected	138	None	replace
543	[BUG]  [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [CE]  ')'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    }    	non-compiled	[CE]  ')'  expected	138	None	replace
544	[BUG]  [BUGGY]  if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
545	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
546	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
547	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
548	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
549	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[1]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[1]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
550	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[1]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[1]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    sum.add(data[row][0].multiply(v[0]));    if(sum!=  null)  {  out[row]  =  sum.add(data[row][0].multiply(v[0]));  }  else  {  out[row]  =  sum.add(data[row][0].multiply(v[1]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	123	2	add
551	[BUG]  [BUGGY]  out[row]  =  v[row][i].add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row][i].add(data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row][i].add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	125	None	replace
552	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
553	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	58	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
555	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[    	non-compiled	[CE]  >  expected	69	None	replace
556	[BUG]  [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	106	None	replace
557	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]),  v[1]);  [CE]  no  suitable  method  found  for  add(BigDecimal,BigDecimal)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]),  v[1]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][0].multiply(v[0]),  v[1]);	  out[row]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  no  suitable  method  found  for  add(BigDecimal,BigDecimal)	124	None	replace
558	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(v[i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
559	[BUG]  [BUGGY]  out[row]  =  data[row][i].add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
560	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
561	[BUG]  [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
562	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
563	[BUG]  [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  row;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  row;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  row;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
565	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(v[i],  sum);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].copyOf(v[i],  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(v[i],  sum);	  out[row]    =    data[row][i].copyOf(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	144	None	replace
566	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
567	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i])+  1;  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(v[i])+  1;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i])+  1;	  out[row]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
568	[BUG]  [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
569	[BUG]  [BUGGY]  out[row]  =  sum.valueOf(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.valueOf(data[row][i]);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.valueOf(data[row][i]);	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  i	139	None	replace
570	[BUG]  [BUGGY]  out[row]  =  sum.valueOf(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.valueOf(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.valueOf(data[row][i].multiply(v[i]));	  out[row]    =    Sum.valueOf(sum);    	non-compiled	[CE]  cannot  find  symbol  i	139	None	replace
571	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  -  1];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][columnDimension];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	replace
572	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
573	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	52	None	add
574	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
575	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	add
576	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	57	None	add
577	[BUG]  [BUGGY]  out[i]  =  data[row][i].multiply(v[i]));  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  data[row][i].multiply(v[i]));  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  data[row][i].multiply(v[i]));	  out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	85	None	replace
578	[BUG]  [BUGGY]  out[row]  =  row;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  row;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  row;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
579	[BUG]  [BUGGY]  out[row]  =  row;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  row;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  row;  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  incompatible  types	11	None	replace
580	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
581	[BUG]  [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  new  BigDecimal(v.length);  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
582	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	37	None	add
583	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	37	None	add
584	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
585	[BUG]  [BUGGY]  while(sum!=  null  &&  data[row][i].equals(v[i]))  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(sum!=  null  &&  data[row][i].equals(v[i]))  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(sum!=  null  &&  data[row][i].equals(v[i]))  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  while(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
586	[BUG]  [BUGGY]  while(sum!=  null  &&  v.length  >  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  while(sum!=  null  &&  v.length  >  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(sum!=  null  &&  v.length  >  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  while(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
587	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
588	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
589	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "The  BigDecimal  is  not  supported. ");  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "The  BigDecimal  is  not  supported. ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	2	add
590	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "The  BigDecimal  is  not  supported. ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "The  BigDecimal  is  not  supported. ");  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "The  BigDecimal  is  not  supported. ");	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	2	add
591	[BUG]  [BUGGY]  out[row]  =  v[row][i].multiply(data[row][i]));  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v[row][i].multiply(data[row][i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v[row][i].multiply(data[row][i]));	  out[row]    =    ZERO.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	116	None	replace
592	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
593	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nCols  =  data[row][i].multiply(v[i]);  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nCols  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nCols  =  data[row][i].multiply(v[i]);	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	121	None	add
594	[BUG]  [BUGGY]  out[row]  =  Sum.createBigDecimal(sum);  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.createBigDecimal(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.createBigDecimal(sum);	  out[row]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	17	None	replace
595	[BUG]  [BUGGY]  out[row]  =  Sum.createBigDecimal(sum,  sum);  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  Sum.createBigDecimal(sum,  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.createBigDecimal(sum,  sum);	  out[row]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	17	None	replace
596	[BUG]  [BUGGY]  int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	107	None	replace
597	[BUG]  [BUGGY]  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol  i	107	None	replace
598	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][0].multiply(nRows[0]));  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum.multiply(data[row][0].multiply(nRows[0]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][0].multiply(nRows[0]));	  out[row]    =    sum.multiply(data[row][i].multiply(nRows[i]));    	non-compiled	[CE]  array  required,  but  int  found	21	None	replace
599	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  0;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out[row]  =  0;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out[row]  =  0;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  ']'  expected	10	None	add
600	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
601	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row.length];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row.length];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	replace
602	[BUG]  [BUGGY]  out[row]  =  data[row].subtract(sum);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row].subtract(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row].subtract(sum);	  out[row]    =    data[row].toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
603	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i],  sum);  [CE]  cannot  find  symbol  i  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  data[row][i].multiply(v[i],  sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i],  sum);	  out[row]    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
604	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[0]  =  sum;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[0]  =  sum;	  out[row]    =    ZERO;    out[row]    =    ZERO;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
605	[BUG]  [BUGGY]  out[0]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[0]  =  sum;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[0]  =  sum;	  out[row]    =    ZERO;    out[row]    =    ZERO;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
606	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	For(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  For(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  '.class'  expected	34	None	replace
607	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	Integer  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  For(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	34	None	replace
608	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][nCols];  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][nCols];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	replace
609	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])/  2;  [CE]  cannot  find  symbol  i  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])/  2;  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i])/  2;	  out[row][i]    =    data[row][i].multiply(v[i])+    1;    	non-compiled	[CE]  cannot  find  symbol  i	158	None	replace
610	[BUG]  [BUGGY]  if(v.length  ==  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v.length  ==  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v.length  ==  0)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
611	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	replace
612	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	4	replace
613	[BUG]  [BUGGY]  out[row][0]  =  data[row][0].add(v[0]);  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][0]  =  data[row][0].add(v[0]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  data[row][0].add(v[0]);	  out[row][0]    =    sum.add(data[row][0].multiply(v[0]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	47	None	replace
614	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  data[i][i];  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  data[i][i];  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =  data[i][i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
615	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
616	[BUG]  [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[data.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  out[row]    =    ZERO;    BigDecimal[][]    out    =    sum.toArray(new    BigDecimal[sum.size()    ]);    for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	156	None	replace
617	[BUG]  [BUGGY]  int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	88	None	replace
618	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    if(sum!=  null)  {  out[row]  =  ZERO;  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	4	None	add
619	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        out[row]    =    ZERO;    if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
620	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    if(sum!=  null)  {  out[row]  =  sum;  out[row]  =  ZERO;  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
621	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[i].multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
622	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  sum;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        out[row]    =    ZERO;    out[row]  =  sum;  out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
623	[BUG]  [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  sum;  out[row]  =  ZERO;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    out[row]  =  ZERO;  out[row]  =  sum;  out[row]  =  ZERO;  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        out[row]    =    ZERO;    out[row]  =  sum;  out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	2	add
624	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
625	[BUG]  [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO;  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  ZERO;  }	  out[row]    =    ZERO;    for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    ZERO;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
626	[BUG]  [BUGGY]  bigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  bigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));	  out[row]    =    ZERO;    BigDecimal    v    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
627	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	78	None	add
628	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  data[row][i].multiply(v[i]);  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  data[row][i].multiply(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  data[row][i].multiply(v[i]);	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	78	None	add
629	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
630	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[row][i]    	non-compiled	[CE]  >  expected	68	None	replace
631	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(data[row][i]    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
632	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].add(v[i]);  [CE]  cannot  find  symbol  i  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row][i]  =  data[row][i].add(v[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].add(v[i]);	  out[row][i]    =    data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	49	None	replace
633	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getColumnDimension();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
634	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
635	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	41	None	add
636	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	6	None	add
637	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
638	[BUG]  [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]        =        ZERO;        for(int    i    =    0;    i    <    nRows;    i++)    {    out[row]    =    sum.add(data[row][i].multiply(v[i]));    }    out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	2	add
639	[BUG]  [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(v.length  >  0)  {  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	126	None	replace
640	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	Integer  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	126	None	replace
641	[BUG]  [BUGGY]  out[row]  =  v.subtract(sum);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[row]  =  v.subtract(sum);  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.subtract(sum);	  out[row]    =    v;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
642	[BUG]  [BUGGY]  out[i]  =  sum.add(data[row][0].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  out[i]  =  sum.add(data[row][0].multiply(v[i]));  [BUGGY]      }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.add(data[row][0].multiply(v[i]));	  out[row]    =    sum.add(data[row][0].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	74	None	replace
643	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  e.printStackTrace();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    e.printStackTrace();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	113	2	add
644	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  e.printStackTrace();  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  e.printStackTrace();  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    e.printStackTrace();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	113	2	add
645	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  Exception  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  Exception  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    Exception  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
646	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i]);  [CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i]);  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(data.length);    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[i]);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  operate(BigDecimal[])	113	None	add
647	[BUG]  [BUGGY]  }  else  if(v.length  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  }  else  if(v.length  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	}  else  if(v.length  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
648	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
649	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        out[i]        =        sum.subtract(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	54	None	add
