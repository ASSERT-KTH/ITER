bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	81	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
4	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	88	None	replace
5	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  final  int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	final  int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	88	None	replace
6	[BUG]  [BUGGY]  int  nRows  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nRows  =  data[row][i].multiply(v[i]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nRows  =  data[row][i].multiply(v[i]);	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
8	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
10	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
11	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
12	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
14	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
16	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
17	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
18	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
19	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
21	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
22	[BUG]  [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  '.class'  expected	57	None	replace
24	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row  +  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][row  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  ']'  expected	15	None	replace
25	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length  -  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i  <  v.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    v.length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	4	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length  -  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length  -  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  v.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    v.length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	4	replace
27	[BUG]  [BUGGY]  int  nSum  =  data[row][i].multiply(v[i])+  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nSum  =  data[row][i].multiply(v[i])+  1;  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nSum  =  data[row][i].multiply(v[i])+  1;	  int    nSum    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
28	[BUG]  [BUGGY]  int  nSum  =  data[row][i].multiply(v[i],  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nSum  =  data[row][i].multiply(v[i],  sum);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nSum  =  data[row][i].multiply(v[i],  sum);	  int    nSum    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
29	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  -  1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  -  1]);	  BigDecimal[]    data    =    this.data[row].toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
30	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  +  1]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length  +  1]);	  BigDecimal[]    data    =    this.data[row].toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length],  sum);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length],  sum);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[v.length],  sum);	  BigDecimal[]    data    =    this.data[row].toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
32	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[nRows]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.data[row].toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
34	[BUG]  [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	60	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    FOR(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	102	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    FOR(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	102	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  FOR(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    FOR(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	102	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  >  expected	82	None	replace
41	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  >  expected	82	None	replace
42	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][0];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][0];    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
43	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][0];    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
44	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][0];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][0];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][0];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][0];    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	2	add
46	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	2	add
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	2	add
48	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	2	add
49	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
50	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
51	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
52	[BUG]  [BUGGY]  int  nCols  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  data[row][i].multiply(v[i]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  data[row][i].multiply(v[i]);	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  Data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
54	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][0].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[row][0].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
55	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][0].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[row][0].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
56	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(v[0]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(v[0]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(v[0]);	  BigDecimal[][]    out    =    new    BigDecimal[row][0].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
57	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(data[row][0]);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(data[row][0]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][0].multiply(data[row][0]);	  BigDecimal[][]    out    =    new    BigDecimal[row][0].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
58	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.getDataRef().toArray(new    BigDecimal[nCols]);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
59	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nCols  -  1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nCols  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nCols  -  1]);	  BigDecimal[]    data    =    this.getDataRef().toArray(new    BigDecimal[nCols]);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    for(int  i  =  1;  i  <  nRows;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
61	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  For(int  i  =  1;  i  <  nRows;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  For(int  i  =  1;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    For(int  i  =  1;  i  <  nRows;  i++)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
62	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  <  nRows);  i++)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  <  nRows);  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    for(int  i  =  1;  i  <  nRows);  i++)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
63	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  >=  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  1;  i  >=  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    for(int  i  =  1;  i  >=  nRows;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
64	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  int  i  =  1;  i  <  nRows;  i++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  int  i  =  1;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    int  i  =  1;  i  <  nRows;  i++)  {	  	non-compiled	[CE]  >  expected	23	None	add
65	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  -  1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  -  1]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[data.length]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
66	[BUG]  [BUGGY]  BigDecimal[]  data  =  data.toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  data.toArray(new  BigDecimal[v.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  data.toArray(new  BigDecimal[v.length]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[data.length]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
67	[BUG]  [BUGGY]  BigDecimal[]  data  =  data.toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  data.toArray(new  BigDecimal[data.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  data.toArray(new  BigDecimal[data.length]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[data.length]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
68	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  +  1]);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[data.length  +  1]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[data.length]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
69	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
70	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row].multiply(data[row][row]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row].multiply(data[row][row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][row].multiply(data[row][row]);	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
71	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][v.length].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][v.length].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][v.length].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
74	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
75	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
76	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
77	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
78	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
79	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][nRows].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][nRows].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][nRows].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[nRows][row].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
82	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	For(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
84	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
85	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
86	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
87	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
89	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
91	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
93	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
94	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
95	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
96	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	94	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[row][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	94	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
101	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][2];  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][2];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][2];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][1];    	non-compiled	[CE]  ']'  expected	80	None	replace
102	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][size()];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][size()];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][size()];	  BigDecimal[][]    out    =    new    BigDecimal[row][size()    -    1];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nCols][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	93	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nCols][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nCols][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nCols][i].multiply(v[i]);    	non-compiled	[CE]  ']'  expected	93	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    row;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nCols][i].multiply(v[i]);    	non-compiled	[CE]  ']'  expected	93	None	replace
107	[BUG]  [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
108	[BUG]  [BUGGY]  }  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(v.length  >  col)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
109	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows];	  BigDecimal[]    data    =    new    BigDecimal[row];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
110	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[v.length];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[v.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[v.length];	  BigDecimal[]    data    =    new    BigDecimal[row];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[row.length];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[row.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[row.length];	  BigDecimal[]    data    =    new    BigDecimal[row];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  <  data.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  <  data.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    for(int  i  =  0;  i  <  data.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  For(int  i  =  0;  i  <  data.length;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  For(int  i  =  0;  i  <  data.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    For(int  i  =  0;  i  <  data.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  <  dataset.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  <  dataset.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    for(int  i  =  0;  i  <  dataset.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  >=  data.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  for(int  i  =  0;  i  >=  data.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    for(int  i  =  0;  i  >=  data.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  int  i  =  0;  i  <  data.length;  i++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  int  i  =  0;  i  <  data.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    int  i  =  0;  i  <  data.length;  i++)  {	  	non-compiled	[CE]  >  expected	6	None	add
117	[BUG]  [BUGGY]  int  nCols  =  this.getColumnDimension()  *  row;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  this.getColumnDimension()  *  row;  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  this.getColumnDimension()  *  row;	  int    nCols    =    this.getColumnDimension()    +    row;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
118	[BUG]  [BUGGY]  int  nCols  =  this.getRowDimension()  +  row;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  this.getRowDimension()  +  row;  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  this.getRowDimension()  +  row;	  int    nCols    =    this.getColumnDimension()    +    row;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
119	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  For(int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	For(int  i  =  0;  i  <  nCols;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    For(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
120	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    For(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
121	[BUG]  [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  this.getRowDimension()  +  1;	  int    nCols    =    this.getColumnDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
122	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols  -  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[nCols  -  1];	  BigDecimal[]    data    =    new    BigDecimal[nCols];    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[nCols  +  1];	  BigDecimal[]    data    =    new    BigDecimal[nCols];    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nRows]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nRows]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
125	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[data.length]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[data.length]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
126	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nCols]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[nCols]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    for(int  i  =  0;  i  <  nRows  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  For(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  For(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    For(int  i  =  0;  i  <  nRows  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  int  i  =  0;  i  <  nRows  +  1;  i++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  int  i  =  0;  i  <  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    int  i  =  0;  i  <  nRows  +  1;  i++)  {	  	non-compiled	[CE]  >  expected	21	None	add
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0;  i  >=  nRows  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0;  i  >=  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    for(int  i  =  0;  i  >=  nRows  +  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    Sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
133	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
134	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
135	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][1];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
136	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[v.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[v.length]);	  BigDecimal[]    data    =    nCols.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
137	[BUG]  [BUGGY]  BigDecimal[]  data  =  nCols.toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  nCols.toArray(new  BigDecimal[nCols]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  nCols.toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    nCols.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
138	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[row],  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[row],  sum);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[row],  sum);	  BigDecimal[]    data    =    this.getDataRef().toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(Data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols.length;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][size()    ];    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
142	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  -  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][size()  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][size()    ];    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
143	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row()  ];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row()  ];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row()  ];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][size()    ];    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
144	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][size()  *  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][size()  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][size()  *  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][size()    +    1];    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
145	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[row]);  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
146	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1;  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1;  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1;	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
147	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1);  [CE]  ']'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][row].multiply(v[row])+  1);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i  <  nCols  +  1;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	4	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols  +  1;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	4	replace
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  2;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i  <  nRows  +  2;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	4	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  2;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows  +  2;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	4	replace
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  row  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i  <  row  +  1;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	3	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  row  +  1;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  row  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  row  +  1;  i++)  {	  for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	3	replace
154	[BUG]  [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  1;  i  <  nCols;  i++)  {	  for(int    i    =    1;    i    <    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
157	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nCols;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  1;  i  <  nCols;  i++)  {	  for(int    i    =    1;    i    <    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
158	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  2;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  2;  i  <  nRows;  i++)  {	  for(int    i    =    1;    i    <    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
159	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  nRows;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  2;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  2;  i  <  nRows;  i++)  {	  for(int    i    =    1;    i    <    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	4	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  Sum  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
161	[BUG]  [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[nCols]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    v[row].toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
162	[BUG]  [BUGGY]  BigDecimal[]  data  =  out[row].toArray(new  BigDecimal[row]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  out[row].toArray(new  BigDecimal[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  out[row].toArray(new  BigDecimal[row]);	  BigDecimal[]    data    =    v[row].toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
163	[BUG]  [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[0]);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[0]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[0]);	  BigDecimal[]    data    =    v[row].toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
164	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
165	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
166	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  sum);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  sum);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  sum);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
167	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i])+  1;	  BigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
168	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i],  sum);	  BigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
169	[BUG]  [BUGGY]  }  else  if(row  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  ==  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	44	None	replace
170	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
171	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nCols];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
172	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    for(int  i  =  0;  i  <  v.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  For(int  i  =  0;  i  <  v.length;  i++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  For(int  i  =  0;  i  <  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    For(int  i  =  0;  i  <  v.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	47	None	add
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  for(int  i  =  0;  i  >=  v.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  for(int  i  =  0;  i  >=  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    for(int  i  =  0;  i  >=  v.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  int  i  =  0;  i  <  v.length;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  int  i  =  0;  i  <  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    int  i  =  0;  i  <  v.length;  i++)  {	  	non-compiled	[CE]  >  expected	47	None	add
177	[BUG]  [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
179	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0]  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ncols;  i++)  {  [CE]  cannot  find  symbol  ncols  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  ncols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  ncols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  ncols	1	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCOLs;  i++)  {  [CE]  cannot  find  symbol  nCOLs  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCOLs;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCOLs;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  nCOLs	1	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  [CE]  cannot  find  symbol  nSum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    <    nCols;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  nSum	4	None	replace
183	[BUG]  [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nCols)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
185	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
186	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
187	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	2	add
188	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
189	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
190	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
191	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum()  +  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum()  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][sum()  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum()    ];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
192	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][sum()  ];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][sum()  ];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][sum()  ];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum()    ];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
193	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum()  ];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum()  ];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][sum()  ];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum()    ];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][row].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	83	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][row].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][row].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	2	add
197	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	2	add
198	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
199	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
200	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
201	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	2	add
202	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	2	add
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  >=  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i  >=  nCols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    >=    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  nCols;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  >=  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  >=  nCols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    >=    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	4	replace
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i!=  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	for(int  i  =  0;  i!=  nCols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    >=    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  nCols;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i!=  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i!=  nCols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    for(int    i    =    0;    i    >=    nRows;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	replace
207	[BUG]  [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  <  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
208	[BUG]  [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
209	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row  +  2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][row  +  2];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row    +    1];    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
210	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row  *  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][row  *  1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][row    +    1];    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
211	[BUG]  [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  }  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	}  else  if(row  ==  nRows)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
212	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
213	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
214	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
215	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
216	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
217	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
218	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  Sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    Sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nSums;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nSums;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nSum;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    Sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
222	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[row][0].toArray();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[row][0].toArray();  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  new  BigDecimal[row][0].toArray();	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
223	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(data);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(data);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(data);	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
224	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
225	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
226	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
227	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
228	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
229	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
230	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
231	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][column  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][column];    	non-compiled	[CE]  ']'  expected	79	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  row;  i++)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  >  expected	20	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  int  i  =  0;  i  <  row;  i++)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  >  expected	20	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    FOR(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  '.class'  expected	97	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  FOR(int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    FOR(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  '.class'  expected	97	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  nRows;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    FOR(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  BigDecimal  v  =  0;  i  <  v.length;  i++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  BigDecimal  v  =  0;  i  <  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    BigDecimal  v  =  0;  i  <  v.length;  i++)  {	  	non-compiled	[CE]  >  expected	47	None	add
238	[BUG]  [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[data.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  v[row].toArray(new  BigDecimal[data.length]);	  BigDecimal[]    data    =    v[row].toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ')'  expected	76	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    BigDecimal[][]  out  =  data[row][i].multiply(v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
242	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[data.length];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[data.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  new  BigDecimal[data.length];	  BigDecimal[]    data    =    new    BigDecimal[nCols];    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
243	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
244	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	41	None	add
245	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	41	None	add
246	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	59	None	add
247	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	59	None	add
248	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	39	None	add
249	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nCols];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nCols];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out  =  new  BigDecimal[nCols];  for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	39	None	add
250	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	39	None	add
251	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[data.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[data.length]);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
252	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	53	None	add
253	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	53	None	add
254	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	27	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].add(v[i]);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].add(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].add(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
256	[BUG]  [BUGGY]  BigDecimal[][]  data  =  out.toArray(new  BigDecimal[row]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  out.toArray(new  BigDecimal[row]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  out.toArray(new  BigDecimal[row]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
257	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[1]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[1]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
258	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][2];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][2];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][0];    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    For(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  For(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    For(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
261	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[data.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[data.length]);	  BigDecimal[]    data    =    this.getDataRef().toArray(new    BigDecimal[nCols]);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
262	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][nCols];  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][nCols];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  ']'  expected	31	None	replace
263	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
264	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	61	None	add
265	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	61	None	add
266	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }	  	non-compiled	[CE]  ')'  expected	61	None	add
267	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    BigDecimal[][]  out  =  new  BigDecimal[nRows][i].multiply(v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
268	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    BigDecimal[][]  out  =  data[row][i].multiply(v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
269	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  -  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][column  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[data[row][column];    	non-compiled	[CE]  ']'  expected	79	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ')'  expected	40	None	replace
271	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[0]);  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[0]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[0]);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
272	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column].multiply(v[row]);  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][column].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][column].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
273	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[1]);  [CE]  ']'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[1]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0].multiply(v[1]);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][row].multiply(v[row]);    	non-compiled	[CE]  ']'  expected	34	None	replace
274	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  Integer  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	Integer  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	88	None	replace
275	[BUG]  [BUGGY]  int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  nRows  =  data[row][i].multiply(v[i]);	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
276	[BUG]  [BUGGY]  int  nCols  =  this.getColumnDimension(row);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  this.getColumnDimension(row);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  this.getColumnDimension(row);	  int    nCols    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(c[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(c[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(c[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
278	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row.length];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][row.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][row.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  ']'  expected	37	None	replace
279	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][v.length];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][v.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][v.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  ']'  expected	37	None	replace
280	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum()  ];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum()  ];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][sum()  ];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum()    ];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
281	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum()  -  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum()  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][sum()  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][sum()    ];    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
282	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	28	None	replace
283	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	28	None	replace
284	[BUG]  [BUGGY]  int  nCols  =  this.getColumnDimension()  +  v.length;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  this.getColumnDimension()  +  v.length;  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  this.getColumnDimension()  +  v.length;	  int    nCols    =    this.getColumnDimension()    +    row;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
285	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
286	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	8	None	add
287	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	8	None	add
288	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	63	None	add
289	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	63	None	add
290	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	55	None	add
291	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	55	None	add
292	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][size()    -    1];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  new  BigDecimal(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  new  BigDecimal(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  new  BigDecimal(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
294	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[data.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[data.length]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[data.length]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
295	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	43	None	add
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(c[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(c[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(c[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data.length][i].multiply(v[i]);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data.length][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    BigDecimal[][]  out  =  new  BigDecimal[data.length][i].multiply(v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
298	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    row;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	104	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    row;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  int  i  =  0;  i  <  nRows;  i++)  {  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  >  expected	82	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ')'  expected	54	None	replace
303	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][0]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][0]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][0]);	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
304	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][row]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][row]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][row]);	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
305	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
307	[BUG]  [BUGGY]  int  nSum  =  data[row][i].multiply(v[i])-  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nSum  =  data[row][i].multiply(v[i])-  1;  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nSum  =  data[row][i].multiply(v[i])-  1;	  int    nSum    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
308	[BUG]  [BUGGY]  int  nSum  =  data[row][i].multiply(v[0]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nSum  =  data[row][i].multiply(v[0]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nSum  =  data[row][i].multiply(v[0]);	  int    nSum    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  row;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  for(int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    FOR(int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
310	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
311	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	add
312	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
313	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
314	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nLows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  for(int    i    =    0;    i    <    nSum;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].add(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].add(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[row][i].add(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
317	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][size()  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][size()  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][size()  1];	  BigDecimal[][]    out    =    new    BigDecimal[row][size()    +    1];    	non-compiled	[CE]  ']'  expected	52	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	81	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  ']'  expected	81	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  2;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  1;  i  <  nRows;  i++)  {  for(int  i  =  2;  i  <  nRows;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    1;    i    <    nRows;    i++)    {    for(int  i  =  2;  i  <  nRows;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
322	[BUG]  [BUGGY]  int  nCols  =  data[row][i].getColumnDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  nCols  =  data[row][i].getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  nCols  =  data[row][i].getColumnDimension();	          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
323	[BUG]  [BUGGY]  int  i  =  0;  i  <  row;  i++)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  row;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  row;  i++)  {	  for(int    i    =    0;    i    <    row;    i++)    {    int    i    =    0;    i    <    row;    i++)    {    	non-compiled	[CE]  >  expected	20	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);  }  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  BigDecimal[][]  out  =  new  BigDecimal[1][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    BigDecimal[][]    out    =    new    BigDecimal[nRows][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
325	[BUG]  [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	Integer  nCols  =  this.getColumnDimension();	  int    nCols    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]);  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(Data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ')'  expected	86	None	replace
327	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	10	None	add
328	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
329	[BUG]  [BUGGY]  int  i  =  0;  nCols  =  data[row][i].multiply(v[i]);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  nCols  =  data[row][i].multiply(v[i]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  nCols  =  data[row][i].multiply(v[i]);	  int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
330	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][col  +  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][col  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][col  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[data.length][row    +    1];    	non-compiled	[CE]  ']'  expected	15	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    v.length;    i++)    {    data[row][i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
332	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[v.length]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[v.length]);	  BigDecimal[]    data    =    nCols.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
333	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][0];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][0];	  BigDecimal[][]    out    =    new    BigDecimal[row][v.length];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  FOR(int  i  =  0;  i  <  data.length;  i++)  {  [CE]  '.class'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  FOR(int  i  =  0;  i  <  data.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    data.length;    i++)    {    FOR(int  i  =  0;  i  <  data.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
335	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  ++i)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
337	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[row]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.data[row].toArray(new  BigDecimal[row]);	  BigDecimal[]    data    =    this.data[row].toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
338	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	61	None	add
339	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	61	None	add
340	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
341	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	add
342	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[row][i].toArray();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[row][i].toArray();  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  new  BigDecimal[row][i].toArray();	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
343	[BUG]  [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][i]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][i]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  v.toArray(new  BigDecimal[row][i]);	  BigDecimal[][]    data    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
344	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length];  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length];	  BigDecimal[][]    out    =    new    BigDecimal[row][nCols];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
345	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	55	None	add
346	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  incompatible  types	55	None	add
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  FOR(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [CE]  '.class'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  FOR(int  i  =  0;  i  <  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    FOR(int  i  =  0;  i  <  nRows  +  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0,  i  <  nRows  +  1;  i++)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows  +  1;  i++)  {  for(int  i  =  0,  i  <  nRows  +  1;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    nRows    +    1;    i++)    {    for(int  i  =  0,  i  <  nRows  +  1;  i++)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
350	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	int  i  =  0;  i  <  nCols;  i++)  {	  for(int    i    =    0;    i    <    nRows;    i++)    {    int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  >  expected	82	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  this.data[row][i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  this.data[row][i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  this.data[row][i]  =  data[row][i].multiply(v[i]);  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[row][i]    =    data[row][i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  FOR(int  i  =  0;  i  <  v.length;  i++)  {  [CE]  '.class'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  FOR(int  i  =  0;  i  <  v.length;  i++)  {  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int    i    =    0;    i    <    v.length;    i++)    {    FOR(int  i  =  0;  i  <  v.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	47	None	add
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
354	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	39	None	add
355	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	39	None	add
356	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
357	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	add
358	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[row]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[row]);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
359	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  out);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  out);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[row],  out);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
360	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	41	None	add
361	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
362	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	add
363	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	63	None	add
364	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][1].multiply(v[row]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][1].multiply(v[row]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][1].multiply(v[row]);	  BigDecimal[][]    out    =    new    BigDecimal[row][0].multiply(v[row]);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  ++i)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  i  =  0;  i  <  nCols;  ++i)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  i  =  0;  i  <  nCols;  ++i)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
366	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  incompatible  types	53	None	add
367	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	53	None	add
368	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[0]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[0]);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[0]);	  BigDecimal[]    data    =    this.getDataRef().toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
369	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nRows;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	43	None	add
370	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
371	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
372	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
373	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	4	add
374	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  n  =  0;  n  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	8	None	add
375	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nRows  =  0;  nRows  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nRows  =  0;  nRows  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  nRows  =  0;  nRows  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
376	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nRows  =  0;  nRows  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  nRows  =  0;  nRows  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  nRows  =  0;  nRows  <  v.length;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
377	[BUG]  [BUGGY]  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    For(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
378	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  nCols  =  0;  nCols  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	59	None	add
379	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  j  =  0;  j  <  nCols;  j++)  {  sum  =  sum.add(data[row][j].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	59	None	add
380	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
381	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]          for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	                for(int        i        =        0;        i        <        nCols;        i++)        {        sum        =        sum.add(data[row][i].multiply(v[i]));        }        for(int    i    =    0;    i    <    nCols;    i++)    {    sum    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	4	add
382	[BUG]  [BUGGY]  BigDecimal[][]  data  =  data[row][i].toArray(new  BigDecimal[data.length]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  data[row][i].toArray(new  BigDecimal[data.length]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  data[row][i].toArray(new  BigDecimal[data.length]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
383	[BUG]  [BUGGY]  BigDecimal[][]  data  =  this.data[row][i].toArray(new  BigDecimal[row]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  data  =  this.data[row][i].toArray(new  BigDecimal[row]);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  data  =  this.data[row][i].toArray(new  BigDecimal[row]);	  BigDecimal[][]    data    =    v.toArray(new    BigDecimal[row]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
384	[BUG]  [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  v.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  data[row][i].multiply(v[i],  v.length);  [BUGGY]      sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  data[row][i].multiply(v[i],  v.length);	  BigDecimal[][]    out    =    data[row][i].multiply(v[i]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
385	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].copyInto(v);  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0].copyInto(v);  [BUGGY]      for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0].copyInto(v);	  BigDecimal[][]    out    =    new    BigDecimal[data[row][0];    	non-compiled	[CE]  ']'  expected	16	None	replace
