bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getRowDimension())    {    if(v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	2	replace
2	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getRowDimension())    {    if(v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	2	replace
3	[BUG]  [BUGGY]  int  vCols  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  vCols  =  this.getRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  vCols  =  this.getRowDimension();	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
4	[BUG]  [BUGGY]  int  vCols  =  this.getSelectedRowDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  vCols  =  this.getSelectedRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  vCols  =  this.getSelectedRowDimension();	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
5	[BUG]  [BUGGY]  BigDecimal  vCols  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal  vCols  =  this.getRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal  vCols  =  this.getRowDimension();	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
6	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.size()  ];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.size()  ];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.size()  ];	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.getRowDimension().toArray(new  BigDecimal[v.size()  ]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.getRowDimension().toArray(new  BigDecimal[v.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.getRowDimension().toArray(new  BigDecimal[v.size()  ]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	2	replace
10	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	2	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	4	replace
12	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	4	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	4	replace
14	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	4	replace
15	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  -  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getColumnDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
16	[BUG]  [BUGGY]  int  v  =  this.getEntryDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getEntryDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getEntryDimension()  +  1;	  int    v    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
17	[BUG]  [BUGGY]  BigDecimal  v  =  this.getEntryDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal  v  =  this.getEntryDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal  v  =  this.getEntryDimension();	  int    v    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
18	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
19	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
20	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
21	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
22	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
23	[BUG]  [BUGGY]  int  v  =  this.getSelectedRowDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getSelectedRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getSelectedRowDimension();	  int    v    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  <  this.getRowDimension())  {	  if(v.length    <    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	2	replace
25	[BUG]  [BUGGY]  if(v.length  <  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  <  this.getRowDimension())  {	  if(v.length    <    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	59	2	replace
26	[BUG]  [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  nCols  =  this.getRowDimension()  +  1;	  int    nCols    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().size()  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().size()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().size()  +  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getColumnDimension().size()    ];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
29	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
30	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
31	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length  >=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
32	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
33	[BUG]  [BUGGY]  int  v  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getColumnDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getColumnDimension()  +  1;	  int    v    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	replace
35	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	replace
37	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	4	replace
38	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension()  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension()  +  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getColumnDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
39	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length    ];    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
40	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length    ];    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
41	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length    ];    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
42	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  2];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length  -  2];	  BigDecimal[][]    out    =    new    BigDecimal[v.length    ];    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
43	[BUG]  [BUGGY]  BigDecimal  v  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal  v  =  this.getColumnDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal  v  =  this.getColumnDimension();	  BigDecimal    v    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  BigDecimal  v  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal  v  =  this.getRowDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal  v  =  this.getRowDimension()  +  1;	  BigDecimal    v    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
45	[BUG]  [BUGGY]  If(v.length  ==  this.getRowDimension())  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  If(v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	If(v.length  ==  this.getRowDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    If(v.length    ==    this.getColumnDimension())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
46	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  If(v.length  ==  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension())  {  If(v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension())  {  If(v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    If(v.length    ==    this.getColumnDimension())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
47	[BUG]  [BUGGY]  If(v.length  ==  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  If(v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	If(v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    If(v.length    ==    this.getColumnDimension())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
48	[BUG]  [BUGGY]  If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    If(v.length    ==    this.getColumnDimension())    {    	non-compiled	[CE]  ';'  expected	38	None	replace
49	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().length  ];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getColumnDimension().length  ];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getErrorDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
53	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getErrorDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
54	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.length]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.length]);	  BigDecimal[][]    outData    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
55	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.length];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.length];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  new  BigDecimal[v.length];	  BigDecimal[][]    outData    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	2	replace
57	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	2	replace
58	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
59	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
60	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  -  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
61	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension(),  v.length  ];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension(),  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension(),  v.length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
62	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  this.getColumnDimension()  ];  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  this.getColumnDimension()  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  this.getColumnDimension()  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
63	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  +  1];  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension(),  v.length  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
64	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().length  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
66	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.toArray();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.toArray();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.toArray();	  BigDecimal[]    out    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.getEndRowDimension();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.getEndRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.getEndRowDimension();	  BigDecimal[]    out    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  <  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v  ==  null  ||  v.length  <  this.getRowDimension())  {	  if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	2	replace
69	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  <  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  <  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v  ==  null  ||  v.length  <  this.getRowDimension())  {	  if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	26	2	replace
70	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  <  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  <  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    <    this.getColumnDimension())    {    if(v.length  <  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
71	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension())  {  If(v.length  <  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension())  {  If(v.length  <  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    <    this.getColumnDimension())    {    If(v.length  <  this.getColumnDimension())  {	  	non-compiled	[CE]  ';'  expected	58	None	add
72	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    <    this.getColumnDimension())    {    if(v.length  >=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
73	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  <  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension())  {  if(v.length  <  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    <    this.getColumnDimension())    {    if(v.length  <  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
74	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  /  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  /  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  /  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension()    +    1];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
75	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  *  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  *  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  *  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension()    +    1];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  int  nCols  =  this.getSelectedRowDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  nCols  =  this.getSelectedRowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  nCols  =  this.getSelectedRowDimension();	  int    nCols    =    this.getSelectedColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  int  nCols  =  this.getSelectedColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  nCols  =  this.getSelectedColumnDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  nCols  =  this.getSelectedColumnDimension()  +  1;	  int    nCols    =    this.getSelectedColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
78	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  +  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
79	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  ']'  expected	51	None	replace
80	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][0];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][1];    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
81	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][1];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length  -  1][1];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][1];    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
82	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][2];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][2];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][2];	  BigDecimal[][]    out    =    new    BigDecimal[v.length][1];    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
83	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
84	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
85	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
86	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
87	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getColumnDimension())    {    If(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {	  	non-compiled	[CE]  ';'  expected	25	None	add
88	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[this.getEntryDimension()  ];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[this.getEntryDimension()  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  new  BigDecimal[this.getEntryDimension()  ];	  BigDecimal[]    v    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
89	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getRangeDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getRangeDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getRangeDimension();	  BigDecimal[]    v    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
90	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[size()  1];  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[size()  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[size()  1];	  BigDecimal[]    out    =    new    BigDecimal[size()    -    1];    	non-compiled	[CE]  ']'  expected	16	None	replace
91	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[size()  *  1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[size()  *  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[size()  *  1];	  BigDecimal[]    out    =    new    BigDecimal[size()    -    1];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
92	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.getDataDimension();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.getDataDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.getDataDimension();	  BigDecimal[]    out    =    this.getDataDimension();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension()  ];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension()  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension()  ];	  BigDecimal[]    out    =    this.getDataDimension();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {	  if(v.length    ==    this.getRowDimension())    {    If(v.length    ==    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
95	[BUG]  [BUGGY]  If(v.length!=  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  If(v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	If(v.length!=  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    If(v.length    ==    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	replace
97	[BUG]  [BUGGY]  if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v!=  null  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	replace
98	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    if(v  ==  null  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
99	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length  >=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length  >=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    if(v  ==  null  ||  v.length  >=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
100	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v!=  null  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v!=  null  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    if(v!=  null  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
101	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    if(v  ==  null  ||  v.length!=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
102	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  If(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  If(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    If(v  ==  null  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  ';'  expected	12	None	add
103	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getRowDimension())    {    If(v.length!=    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	49	None	replace
104	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {  If(v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getRowDimension())    {    If(v.length!=    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	49	None	replace
105	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
106	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
107	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
108	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
109	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];	  BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.size()  ];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.size()  ];  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  new  BigDecimal[v.size()  ];	  BigDecimal[][]    outData    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
113	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.size()  +  1]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[v.size()  +  1]);	  BigDecimal[][]    outData    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
114	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  *  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  *  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  *  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getColumnDimension()    +    1];    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
115	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedColumnDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getSelectedColumnDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getSelectedColumnDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
116	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedDataDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getSelectedDataDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getSelectedDataDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
117	[BUG]  [BUGGY]  int  length  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  length  =  this.getRowDimension();  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  length  =  this.getRowDimension();	  int    length    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
118	[BUG]  [BUGGY]  int  length  =  this.getLength();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  length  =  this.getLength();  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  length  =  this.getLength();	  int    length    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
119	[BUG]  [BUGGY]  int  length  =  this.getColumnDimension()  -  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  length  =  this.getColumnDimension()  -  1;  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  length  =  this.getColumnDimension()  -  1;	  int    length    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
120	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.size()  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.size()  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.size()  +  1];	  BigDecimal[]    out    =    new    BigDecimal[this.size()    ];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
121	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.size()  -  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.size()  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.size()  -  1];	  BigDecimal[]    out    =    new    BigDecimal[this.size()    ];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
122	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSerialDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getSerialDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getSerialDimension();	  BigDecimal[]    v    =    this.getDataDimension();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  <  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v  ==  null  ||  v.length  <  this.getColumnDimension())  {	  if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	2	replace
124	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  <  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  <  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v  ==  null  ||  v.length  <  this.getColumnDimension())  {	  if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	2	replace
125	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
126	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    if(v  ==  null  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
127	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v!=  null  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v!=  null  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    if(v!=  null  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
128	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
129	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  If(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  If(v  ==  null  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v    ==    null    ||    v.length    ==    this.getRowDimension())    {    If(v  ==  null  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  ';'  expected	32	None	add
130	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  -  1]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  -  1]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  -  1]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
131	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.selectedRows.toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.selectedRows.toArray(new  BigDecimal[v.length]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.selectedRows.toArray(new  BigDecimal[v.length]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
132	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  +  1]);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  +  1]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.toArray(new  BigDecimal[v.length  +  1]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
134	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
135	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
136	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  If(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  If(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    If(v.length  ==  this.getColumnDimension()  ||  v.length  ==  this.getRowDimension())  {	  	non-compiled	[CE]  ';'  expected	60	None	add
137	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  /  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  /  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  /  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension()    +    1];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
138	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  ];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getErrorDimension()  ];	  BigDecimal[]    out    =    new    BigDecimal[this.getColumnDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
139	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.data.size()  ]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.data.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.data.size()  ]);	  BigDecimal[][]    outData    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
140	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.getOutputDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.getOutputDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.getOutputDimension();	  BigDecimal[]    out    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
141	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.getEndDimension();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.getEndDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.getEndDimension();	  BigDecimal[]    out    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
142	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  *  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  *  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  *  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension()    +    1];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
143	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension().length];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension().length];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getDataDimension().length];	  BigDecimal[]    out    =    this.getDataDimension();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
144	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.data.size()  ]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.data.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.data.size()  ]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
146	[BUG]  [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v  ==  null  ||  v.length  ==  this.getColumnDimension())  {  if(v.length!=  this.getRowDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getVarDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getVarDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getVarDimension();	  BigDecimal[]    v    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
148	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  -  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getErrorDimension()    ];    	non-compiled	[CE]  ']'  expected	53	None	replace
149	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  ];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension(),  v.length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getErrorDimension()    ];    	non-compiled	[CE]  ']'  expected	53	None	replace
150	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    if(v.length    >=    this.getColumnDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
151	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length  >  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length  >  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {  if(v.length  >  this.getRowDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    if(v.length    >=    this.getColumnDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
152	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    if(v.length    >=    this.getColumnDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
153	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension())  {  if(v.length  >=  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    if(v.length    >=    this.getColumnDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
154	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
155	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  -  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  ']'  expected	62	None	replace
156	[BUG]  [BUGGY]  int  length  =  this.getEndColumnDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  length  =  this.getEndColumnDimension();  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  length  =  this.getEndColumnDimension();	  int    length    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
157	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  +  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().length  +  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getColumnDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
158	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension().length  ];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension().length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension().length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getColumnDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
159	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
160	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
161	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  ];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension(),  v.length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
162	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[0]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[0]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[0]);	  BigDecimal[][]    outData    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
163	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[size()  ]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[size()  ]);	  BigDecimal[][]    outData    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
164	[BUG]  [BUGGY]  BigDecimal  v  =  this.getUpperDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal  v  =  this.getUpperDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal  v  =  this.getUpperDimension();	  BigDecimal    v    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
165	[BUG]  [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	Integer  nCols  =  this.getColumnDimension();	  int    nCols    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
166	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getVowDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getVowDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getVowDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
167	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getColumnDimension())  {  If(v.length  ==  this.getRowDimension())  {	  if(v.length    ==    this.getRowDimension())    {    If(v.length    ==    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
168	[BUG]  [BUGGY]  if(v  ==  null)  {  If(v.length  ==  this.getColumnDimension())  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v  ==  null)  {  If(v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v  ==  null)  {  If(v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    If(v.length    ==    this.getRowDimension())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
169	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[data.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[data.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[data.length];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
170	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
171	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension())  {  if(v.length!=  this.getColumnDimension())  {	  if(v.length    ==    this.getColumnDimension())    {    if(v.length!=    this.getColumnDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
172	[BUG]  [BUGGY]  int  v  =  this.getVarDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getVarDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getVarDimension();	  int    v    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
173	[BUG]  [BUGGY]  int  v  =  this.getDecimalDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getDecimalDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getDecimalDimension();	  int    v    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
174	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length  >=  this.getRowDimension())  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  if(v.length  >=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {  if(v.length  >=  this.getRowDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length    >=    this.getRowDimension())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
175	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  -  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
176	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];	  BigDecimal[]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
177	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().length  ];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().length  ];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension().length    ];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
178	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  If(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  If(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getRowDimension())    {    If(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getRowDimension())  {	  	non-compiled	[CE]  ';'  expected	64	None	add
179	[BUG]  [BUGGY]  int  vCols  =  this.getVarDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  vCols  =  this.getVarDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  vCols  =  this.getVarDimension();	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
180	[BUG]  [BUGGY]  int  vCols  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  vCols  =  this.getColumnDimension()  +  1;  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  vCols  =  this.getColumnDimension()  +  1;	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
181	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  1];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension().size()    +    1];    	non-compiled	[CE]  ']'  expected	11	None	replace
182	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
183	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  v.toArray(new  BigDecimal[this.getRowDimension()  ]);	  BigDecimal[][]    outData    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
184	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  this.getDataRef().toArray(new  BigDecimal[v.size()  ]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  this.getDataRef().toArray(new  BigDecimal[v.size()  ]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  this.getDataRef().toArray(new  BigDecimal[v.size()  ]);	  BigDecimal[][]    outData    =    v.toArray(new    BigDecimal[v.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
185	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];	  BigDecimal[][]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
186	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getEntryDimension()  *  v.length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
187	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedValueDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  v  =  this.getSelectedValueDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  v  =  this.getSelectedValueDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
188	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().size()  ];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().size()  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension().size()  ];	  BigDecimal[]    out    =    new    BigDecimal[this.getColumnDimension().size()    ];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
189	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getEntryDimension()  *  2];	  BigDecimal[]    out    =    new    BigDecimal[this.getEntryDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
190	[BUG]  [BUGGY]  BigDecimal[]  out  =  v.getEntryDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  v.getEntryDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  v.getEntryDimension();	  BigDecimal[]    out    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
191	[BUG]  [BUGGY]  BigDecimal[]  out  =  this.getDataRef().toArray(new  BigDecimal[v.length]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  this.getDataRef().toArray(new  BigDecimal[v.length]);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  this.getDataRef().toArray(new  BigDecimal[v.length]);	  BigDecimal[]    out    =    v.toArray(new    BigDecimal[v.length]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
192	[BUG]  [BUGGY]  int  vCols  =  this.getEntryDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  vCols  =  this.getEntryDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  vCols  =  this.getEntryDimension();	  int    vCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getRowDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	2	replace
194	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getRowDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getRowDimension())  {	  if(v.length    ==    this.getColumnDimension()    ||    v.length    ==    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	2	replace
195	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getColumnDimension())  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    if(v.length!=  this.getColumnDimension()  ||  v.length  >=  this.getColumnDimension())  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length    >=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	2	replace
197	[BUG]  [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  <  this.getColumnDimension()  ||  v.length  >  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length    >=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	2	replace
198	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  1];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  1];	  BigDecimal[]    out    =    new    BigDecimal[this.getRowDimension().size()    +    1];    	non-compiled	[CE]  ']'  expected	1	None	replace
199	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  1];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  1];	  BigDecimal[][]    out    =    new    BigDecimal[this.getColumnDimension().size()    +    1];    	non-compiled	[CE]  ']'  expected	34	None	replace
200	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
201	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension()  ||  v.length!=  this.getColumnDimension())  {	  if(v.length!=    this.getColumnDimension()    ||    v.length!=    this.getColumnDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	4	replace
202	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[selectedRows.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[selectedRows.length];  System.arraycopy(v,  0,  out,  0,  v.length);  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[]  out  =  new  BigDecimal[selectedRows.length];  System.arraycopy(v,  0,  out,  0,  v.length);	  BigDecimal[]    out    =    new    BigDecimal[v.length];    System.arraycopy(v,    0,    out,    0,    v.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
203	[BUG]  [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.length].toArray();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  outData  =  new  BigDecimal[v.length].toArray();  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  outData  =  new  BigDecimal[v.length].toArray();	  BigDecimal[][]    outData    =    v.toArray();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
204	[BUG]  [BUGGY]  int  v  =  this.getSecondDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  int  v  =  this.getSecondDimension();  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	int  v  =  this.getSecondDimension();	  int    v    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
205	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getLineDimension(),  v.length  ];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getLineDimension(),  v.length  ];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getLineDimension(),  v.length  ];	  BigDecimal[][]    out    =    new    BigDecimal[this.getRowDimension(),    v.length    ];    	non-compiled	[CE]  ']'  expected	20	None	replace
206	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  *  2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  *  2];  [BUGGY]      if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	BigDecimal[][]  out  =  new  BigDecimal[this.getErrorDimension()  *  2];	  BigDecimal[][]    out    =    new    BigDecimal[this.getErrorDimension()    ];    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v!=  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v!=  null  ||  v.length!=  this.getColumnDimension())  {	  if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
208	[BUG]  [BUGGY]  if(v!=  null  ||  v.length!=  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v!=  null  ||  v.length!=  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v!=  null  ||  v.length!=  this.getColumnDimension())  {	  if(v    ==    null    ||    v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
209	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	replace
210	[BUG]  [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {      [BUGGY]  if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {  [BUGGY]      throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getColumnDimension()  ||  v.length  ==  this.getColumnDimension())  {	  if(v.length    ==    this.getRowDimension())    {    if(v.length!=    this.getRowDimension())    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	4	replace
