bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length!=  this.getRowDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length!=  this.getRowDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	2	replace
2	[BUG]  [BUGGY]  if(v.length!=  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length!=  this.getRowDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length!=  this.getRowDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	2	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getRowDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	replace
4	[BUG]  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length  ==  this.getRowDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getRowDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	  	if  (v.length  !=  this.getColumnDimension())  {  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  ];  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension().size()  ];		non-compiled	[CE]  int  cannot  be  dereferenced	22	None	add
7	[BUG]  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  ];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[]  out  =  new  BigDecimal[this.getRowDimension()  ];		non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
8	[BUG]  [BUGGY]    BigDecimal[]  v  =  this.getRowDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[]  v  =  this.getRowDimension();  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[]  v  =  this.getRowDimension();		non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
9	[BUG]  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[size()  ];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[]  out  =  new  BigDecimal[size()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[]  out  =  new  BigDecimal[size()  ];		non-compiled	[CE]  cannot  find  symbol	22	None	add
10	[BUG]  [BUGGY]    BigDecimal[]  out  =  this.getRowDimension();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[]  out  =  this.getRowDimension();  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[]  out  =  this.getRowDimension();		non-compiled	[CE]  incompatible  types	22	None	add
11	[BUG]  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  ];  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension().size()  ];		non-compiled	[CE]  int  cannot  be  dereferenced	22	None	add
12	[BUG]  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  ];  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension()  ];		non-compiled	[CE]  incompatible  types	22	None	add
13	[BUG]  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  ];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[][]  out  =  new  BigDecimal[this.getRowDimension()  ];		non-compiled	[CE]  incompatible  types	22	None	add
14	[BUG]  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  ];  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  ];  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    BigDecimal[][]  out  =  new  BigDecimal[this.getColumnDimension().size()  ];		non-compiled	[CE]  int  cannot  be  dereferenced	22	None	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	if(v.length  ==  this.getColumnDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	replace
16	[BUG]  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]  if(v.length  ==  this.getColumnDimension())  {  [BUGGY]  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	if(v.length  ==  this.getColumnDimension())  {	if  (v.length  !=  this.getColumnDimension())  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	4	replace
17	[BUG]  [BUGGY]    int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    int  nCols  =  this.getColumnDimension();  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    int  nCols  =  this.getColumnDimension();		non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
18	[BUG]  [BUGGY]    int  v  =  this.getRowDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  [BUGGY]    int  v  =  this.getRowDimension();  [BUGGY]  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	    int  v  =  this.getRowDimension();		non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	22	None	add
