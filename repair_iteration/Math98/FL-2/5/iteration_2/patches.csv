bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	107	None	replace
2	[BUG]  [BUGGY]  int  out[0]  =  Math.max(out[0],  v[1]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  out[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  ']'  expected	13	None	replace
3	[BUG]  [BUGGY]  int  out[]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  out[]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  out[]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  out[1]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  -  2];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  -  2];	  final    double[]    out    =    new    double[v.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
7	[BUG]  [BUGGY]  final  double[]  out  =  new  double[nRows  -  1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[nRows  -  1];	  final    double[]    out    =    new    double[v.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
9	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
11	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
13	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
14	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	101	None	add
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	4	add
16	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[3]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	4	add
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
18	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.min(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
20	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.min(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
21	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0,  v[1]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0,  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0,  v[1]);	  	non-compiled	[CE]  ']'  expected	11	None	add
22	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [CE]  cannot  find  symbol  Out  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    Out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	non-compiled	[CE]  cannot  find  symbol  Out	11	None	add
23	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
24	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  cannot  find  symbol  row  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  row	79	None	replace
25	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
26	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
27	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
28	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
29	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
31	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
33	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
34	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0,  v[1]);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0,  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0,  v[1]);	  	non-compiled	[CE]  ']'  expected	69	None	add
35	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [CE]  cannot  find  symbol  Out  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    Out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	non-compiled	[CE]  cannot  find  symbol  Out	69	None	add
36	[BUG]  [BUGGY]  out[0]  =  v[1].doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v[1].doubleValue()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v[1].doubleValue()  +  1;	  out[0]    =    v[1].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  out[0]  =  data[1].doubleValue();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  data[1].doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  data[1].doubleValue();	  out[0]    =    v[1].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
39	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.min(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.min(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.min(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
40	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
42	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
43	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
44	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
46	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	4	add
48	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[3]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	4	add
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
50	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nRows;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  1;  row  <  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    for(int    row    =    0;    row    <    nRows;    row++)    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
52	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nRows;  row++)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nRows;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  1;  row  <  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    for(int    row    =    0;    row    <    nRows;    row++)    {    	compilable	  [FE]  AssertionFailedError  	26	4	replace
53	[BUG]  [BUGGY]  For(int  row  =  0;  row  <  nRows;  row++)  {  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  For(int  row  =  0;  row  <  nRows;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	For(int  row  =  0;  row  <  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    for(int    row    =    0;    row    <    nRows;    row++)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
54	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  *  nCols);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  *  nCols);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]  *  nCols);	  out[0]    =    Math.max(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
55	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  *  nRows);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  *  nRows);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]  *  nRows);	  out[0]    =    Math.max(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
56	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  +  1]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  +  1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]  +  1]);	  out[0]    =    Math.max(v[0],    v[1]);    	non-compiled	[CE]  ')'  expected	67	None	replace
57	[BUG]  [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nCols  =  this.getRowDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nCols  =  this.getRowDimension()  +  1;	  int    nCols    =    this.getColumnDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
58	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension()  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension()  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension()  -  1;	  out[0]    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
59	[BUG]  [BUGGY]  out[0]  =  v.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.length  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.length  -  1;	  out[0]    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  4;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  nRows  +  4;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	replace
61	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  4;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  4;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  4;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	4	replace
62	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    2;    row++)    {    for(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
63	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  For(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  For(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    2;    row++)    {    For(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  	non-compiled	[CE]  '.class'  expected	37	None	add
64	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  final  int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  final  int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    2;    row++)    {    final  int  row  =  0;  row  <  nRows  +  2;  row++)  {	  	non-compiled	[CE]  >  expected	37	None	add
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  data.length;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  data.length;  i++)  {  v[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
66	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
68	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
69	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
70	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
71	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
72	[BUG]  [BUGGY]  out[1]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    int    nRows    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    int    nRows    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows,  v.length  +  1;  row++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows,  v.length  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows,  v.length  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows,    v.length;    row++)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
77	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols,  v.length;  row++)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols,  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols,  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows,    v.length;    row++)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
78	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1,  v.length;  row++)  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1,  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  1,  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows,    v.length;    row++)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  out[i].length;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  out[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  out[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
81	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
82	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	1	None	add
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
84	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *  v[i];  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	30	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i].doubleValue();  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i].doubleValue();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i].doubleValue();  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	30	None	replace
87	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
88	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
89	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
90	[BUG]  [BUGGY]  out[1]  =  data[0].doubleValue();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  data[0].doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  data[0].doubleValue();	  out[0]    =    data[0].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
92	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
94	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
95	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
96	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	4	add
98	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[3]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[3]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[3]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	4	add
99	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	98	None	add
100	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[2]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    Out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
101	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    Out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  1;  row  <  v.length;  row++)  {	  for(int    row    =    0;    row    <    v.length;    row++)    {    	compilable	  [FE]  AssertionFailedError  	83	4	replace
103	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  v.length;  row++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  1;  row  <  v.length;  row++)  {	  for(int    row    =    0;    row    <    v.length;    row++)    {    	compilable	  [FE]  AssertionFailedError  	83	4	replace
104	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  nRows);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  nRows);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nCols,  nRows);	  out[0]    =    Math.max(out[0],    v[1]    *    nCols);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
105	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols  +  1);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols  +  1);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nCols  +  1);	  out[0]    =    Math.max(out[0],    v[1]    *    nCols);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
106	[BUG]  [BUGGY]  out[0]  =  v.getEntryDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.getEntryDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.getEntryDimension();	  out[0]    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
107	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension()  -  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension()  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension()  -  1;	  out[0]    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
108	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension()  +  1;	  out[0]    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
109	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  nRows  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  nRows  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  out[1]  =  this.getRowDimension();  nRows  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
113	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
115	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
116	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
117	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
118	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  final  ArrayIndexOutOfBoundsException  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  final  ArrayIndexOutOfBoundsException  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    final  ArrayIndexOutOfBoundsException  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  ']'  expected	92	None	add
119	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	92	None	add
120	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension()  +  1;	  out[0]    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
121	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getColumnDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getColumnDimension()  +  1;	  final    int    nRows    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  v[i].length;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  v[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  v[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    v[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  v[i].length;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  v[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  v[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    v[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
124	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
125	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
126	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
127	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
128	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length	  	non-compiled	[CE]  ';'  expected	51	None	add
129	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]	  	non-compiled	[CE]  not  a  statement	51	None	add
130	[BUG]  [BUGGY]  final  int  nCols  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nCols  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nCols  =  this.getRowDimension();	  final    int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
131	[BUG]  [BUGGY]  final  int  nCols  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nCols  =  this.getColumnDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nCols  =  this.getColumnDimension()  +  1;	  final    int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
132	[BUG]  [BUGGY]  final  int  nCols  =  this.getSelectedColumnDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nCols  =  this.getSelectedColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nCols  =  this.getSelectedColumnDimension();	  final    int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  +=  data[i]  *  v[i];  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
134	[BUG]  [BUGGY]  out[i]  +=  data[i]  *  v[i];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[i]  +=  data[i]  *  v[i];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[i]  +=  data[i]  *  v[i];	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
135	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  1;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
136	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols  +  1;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  1;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  1;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
138	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nRows  +  1;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  1;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
139	[BUG]  [BUGGY]  out[0]  =  v.getColumnDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.getColumnDimension();	  out[0]    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
140	[BUG]  [BUGGY]  out[0]  =  v.getRowDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.getRowDimension();	  out[0]    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
141	[BUG]  [BUGGY]  out[0]  =  v.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.length;	  out[0]    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
142	[BUG]  [BUGGY]  final  double[]  out  =  new  double[nRows  +  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[nRows  +  1];	  final    double[]    out    =    new    double[nRows];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
143	[BUG]  [BUGGY]  final  double[]  out  =  new  double[nCols];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[nCols];	  final    double[]    out    =    new    double[nRows];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
144	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  +  2];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  +  2];	  final    double[]    out    =    new    double[v.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
145	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  +  3];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  +  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  +  3];	  final    double[]    out    =    new    double[v.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
146	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    for(int  row  =  0;  row  <  nRows  +  3;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
147	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  For(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  For(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    For(int  row  =  0;  row  <  nRows  +  3;  row++)  {	  	non-compiled	[CE]  '.class'  expected	41	None	add
148	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  int  row  =  0;  row  <  nRows  +  3;  row++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    int  row  =  0;  row  <  nRows  +  3;  row++)  {	  	non-compiled	[CE]  >  expected	41	None	add
149	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  for(int  row  =  0;  row  <  nRows  +  4;  row++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  for(int  row  =  0;  row  <  nRows  +  4;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    for(int  row  =  0;  row  <  nRows  +  4;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
150	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  1]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  1]);	  out[0]    =    Math.max(out[0],    v[1]    +    1]);    	non-compiled	[CE]  ')'  expected	46	None	replace
151	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  +  2]);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  +  2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  +  2]);	  out[0]    =    Math.max(out[0],    v[1]    +    1]);    	non-compiled	[CE]  ')'  expected	46	None	replace
152	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  +  1]  *  2);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  +  1]  *  2);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  +  1]  *  2);	  out[0]    =    Math.max(out[0],    v[1]    +    1]);    	non-compiled	[CE]  ')'  expected	46	None	replace
153	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getColumnDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getColumnDimension()  +  1;	  int    nRows    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
155	[BUG]  [BUGGY]  final  int  row  =  0;  row  <  nRows  +  1;  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  row  =  0;  row  <  nRows  +  1;  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  row  =  0;  row  <  nRows  +  1;	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	22	None	replace
156	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	22	None	replace
157	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
158	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
159	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
161	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
162	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
163	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
164	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  +  1);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  +  1);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]  +  1);	  out[0]    =    Math.min(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
165	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  *  nCols);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  *  nCols);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]  *  nCols);	  out[0]    =    Math.min(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
166	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  +  1]);  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  +  1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]  +  1]);	  out[0]    =    Math.min(v[0],    v[1]);    	non-compiled	[CE]  ')'  expected	91	None	replace
167	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  >  expected	81	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
169	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
170	[BUG]  [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
171	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[2]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
172	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension()  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getColumnDimension()  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getColumnDimension()  -  1;	  final    int    nRows    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *=  v[i].length;  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *=  v[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  *=  v[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *=  data[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
175	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  /  v.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension()  /  v.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension()  /  v.length;	  final    int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
176	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  v.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  v.length  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension()  *  v.length  -  1;	  final    int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
177	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  v.length  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  v.length  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension()  *  v.length  +  1;	  final    int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
178	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getRowDimension();	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
179	[BUG]  [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
180	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[2]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
181	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
182	[BUG]  [BUGGY]  out[1]  =  dataRow[0].doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  dataRow[0].doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  dataRow[0].doubleValue();	  out[0]    =    dataRow[0].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
183	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getRowDimension();  }  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getRowDimension();  }	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
184	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getColumnDimension();  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  final  int  nRows  =  this.getColumnDimension();	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	88	None	replace
185	[BUG]  [BUGGY]  out[0]  =  this.getLowerDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getLowerDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getLowerDimension();	  out[0]    =    this.getUpperDimension();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
186	[BUG]  [BUGGY]  out[0]  =  v.getUpperDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.getUpperDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.getUpperDimension();	  out[0]    =    this.getUpperDimension();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
187	[BUG]  [BUGGY]  out[0]  =  this.getUpperDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getUpperDimension()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getUpperDimension()  +  1;	  out[0]    =    this.getUpperDimension();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
188	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
189	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
190	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
191	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    v[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
192	[BUG]  [BUGGY]  v[0]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	v[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    v[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
194	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
195	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
196	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
197	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
198	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
199	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
200	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
201	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    int  nRows  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	5	None	add
202	[BUG]  [BUGGY]  final  int  nRows  =  getRowDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  getRowDimension();	  final    int    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  nRows  +  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
204	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  v.length;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
205	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  nRows.length;  row++)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  nRows.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols  +  nRows.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	50	None	replace
206	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  nSum.length;  row++)  {  [CE]  cannot  find  symbol  nSum  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  nSum.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  nSum.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	non-compiled	[CE]  cannot  find  symbol  nSum	50	None	replace
207	[BUG]  [BUGGY]  out[0]  =  v[1].doubleValue().doubleValue();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v[1].doubleValue().doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v[1].doubleValue().doubleValue();	  out[0]    =    v[0].doubleValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
208	[BUG]  [BUGGY]  out[0]  =  v[0].doubleValue().doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v[0].doubleValue().doubleValue()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v[0].doubleValue().doubleValue()  +  1;	  out[0]    =    v[0].doubleValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
209	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
210	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
211	[BUG]  [BUGGY]  out[0]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  row  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.length;  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  row	95	None	replace
212	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols;  row++)  {  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  For(int  row  =  0;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    For(int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  '.class'  expected	24	None	replace
213	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    for(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
214	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  For(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  For(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    For(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  	non-compiled	[CE]  '.class'  expected	39	None	add
215	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    int  row  =  0;  row  <  nCols  +  1;  row++)  {	  	non-compiled	[CE]  >  expected	39	None	add
216	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  for(int  row  =  0;  row  <  nCOLs  +  1;  row++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  for(int  row  =  0;  row  <  nCOLs  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    for(int  row  =  0;  row  <  nCOLs  +  1;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
217	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  data[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  data[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  data[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    data[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
218	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  data[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  data[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  data[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    data[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
219	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  data[1]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  data[1]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  data[1]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    data[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
220	[BUG]  [BUGGY]  data[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  data[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	data[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    data[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
221	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
222	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
223	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
224	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    For(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  '.class'  expected	55	None	replace
226	[BUG]  [BUGGY]  double  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  double  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	double  nRows  =  this.getRowDimension();	  double    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
227	[BUG]  [BUGGY]  final  double  nRows  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double  nRows  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double  nRows  =  this.getColumnDimension();	  double    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
228	[BUG]  [BUGGY]  Double  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  Double  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	Double  nRows  =  this.getRowDimension();	  double    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
229	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  >  expected	27	None	replace
230	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  }  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  }	  for(int    row    =    0;    row    <    nCols;    row++)    {    int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  >  expected	27	None	replace
231	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  final  int  row  =  0;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  >  expected	27	None	replace
232	[BUG]  [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
233	[BUG]  [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.get  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.get  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  out[1]  =  this.get	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  ';'  expected	94	None	replace
234	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
235	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
236	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
237	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  *  v[i];  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	32	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *    data[i].length;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
240	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  nCols);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  nCols);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nRows,  nCols);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
241	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows  +  1);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nRows  +  1);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
242	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  dataRows[1]  *  nRows);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  dataRows[1]  *  nRows);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  dataRows[1]  *  nRows);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
243	[BUG]  [BUGGY]  int  v  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  v  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  v  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    v    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
244	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[0],  v[2]);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[0],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    int    v    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  2;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  2;  row  <  nCols;  row++)  {	  for(int    row    =    1;    row    <    nCols;    row++)    {    	compilable	  [FE]  AssertionFailedError  	63	4	replace
246	[BUG]  [BUGGY]  for(int  row  =  2;  row  <  nCols;  row++)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  2;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  2;  row  <  nCols;  row++)  {	  for(int    row    =    1;    row    <    nCols;    row++)    {    	compilable	  [FE]  AssertionFailedError  	63	4	replace
247	[BUG]  [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[1]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
248	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
249	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension()  *  v.length  -  1;	  int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
250	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension()  *  v.length  +  1;	  int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
251	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension()  *  v.length;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getColumnDimension()  *  v.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getColumnDimension()  *  v.length;	  int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
252	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension().doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension().doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension().doubleValue();	  out[0]    =    this.getRowDimension().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
253	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension().doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension().doubleValue()  +  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension().doubleValue()  +  1;	  out[0]    =    this.getRowDimension().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
254	[BUG]  [BUGGY]  out[0]  =  v.doubleValue();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  v.doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  v.doubleValue();	  out[0]    =    this.getRowDimension().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
255	[BUG]  [BUGGY]  int  nRows  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
256	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[2]);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
257	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]  +  nCols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]  +  nCols);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]  +  nCols);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
258	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    int    nRows    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
259	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension(v.length);	  final    int    nRows    =    this.getRowDimension(v);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
260	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension(v);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getColumnDimension(v);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getColumnDimension(v);	  final    int    nRows    =    this.getRowDimension(v);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  data[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
262	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  *  2];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  *  2];	  final    double[]    out    =    new    double[v.length    *    nCols];    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
263	[BUG]  [BUGGY]  final  double[]  out  =  new  double[nRows  *  v.length];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[nRows  *  v.length];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[nRows  *  v.length];	  final    double[]    out    =    new    double[v.length    *    nCols];    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
264	[BUG]  [BUGGY]  final  double[]  out  =  new  double[nCols  *  v.length];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[nCols  *  v.length];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[nCols  *  v.length];	  final    double[]    out    =    new    double[v.length    *    nCols];    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
265	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  /  nCols];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  /  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  /  nCols];	  final    double[]    out    =    new    double[v.length    *    nCols];    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  out[i];  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  out[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  out[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *    out[i];    }    	non-compiled	[CE]  not  a  statement	84	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  out[i];  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  out[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  out[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *    out[i];    }    	non-compiled	[CE]  not  a  statement	84	None	replace
268	[BUG]  [BUGGY]  out[0]  =  Math.max(v[1],  out[1]);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[1],  out[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[1],  out[1]);	  out[0]    =    Math.max(out[1],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
269	[BUG]  [BUGGY]  out[0]  =  Math.max(out[1],  v[2]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[1],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[1],  v[2]);	  out[0]    =    Math.max(out[1],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
270	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  for(int  row  =  0;  row  <  v.length;  row++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  for(int  row  =  0;  row  <  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    v.length;    row++)    {    for(int  row  =  0;  row  <  v.length;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
271	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  For(int  row  =  0;  row  <  v.length;  row++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  For(int  row  =  0;  row  <  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    v.length;    row++)    {    For(int  row  =  0;  row  <  v.length;  row++)  {	  	non-compiled	[CE]  '.class'  expected	82	None	add
272	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  int  row  =  0;  row  <  v.length;  row++)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  v.length;  row++)  {  int  row  =  0;  row  <  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    v.length;    row++)    {    int  row  =  0;  row  <  v.length;  row++)  {	  	non-compiled	[CE]  >  expected	82	None	add
273	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nCols;  row++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    for(int  row  =  1;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
274	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  For(int  row  =  1;  row  <  nCols;  row++)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  For(int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    For(int  row  =  1;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  '.class'  expected	62	None	add
275	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nCOLs;  row++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nCOLs;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    for(int  row  =  1;  row  <  nCOLs;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
276	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nRows;  row++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  for(int  row  =  1;  row  <  nRows;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    for(int  row  =  1;  row  <  nRows;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
277	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  int  row  =  1;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    int  row  =  1;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  >  expected	62	None	add
278	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i]  *  v[i];  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    v[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	18	None	replace
279	[BUG]  [BUGGY]  out[0]  =  Math.max(v[1],  v[1]);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[1],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[1],  v[1]);	  out[0]    =    Math.max(out[1],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  out[i].length;  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  out[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  out[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
281	[BUG]  [BUGGY]  out[0]  =  this.getUpperDimension()  -  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getUpperDimension()  -  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getUpperDimension()  -  1;	  out[0]    =    this.getUpperDimension();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
282	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
283	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
284	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	75	None	add
285	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
286	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	75	2	add
287	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowD  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowD  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowD	  	non-compiled	[CE]  ';'  expected	75	None	add
288	[BUG]  [BUGGY]  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	For(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
289	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
290	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
291	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[0]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
292	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[0]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	96	2	add
293	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	96	None	add
294	[BUG]  [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nCols;  i++)  {  data[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	107	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
296	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
297	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  r.length;  row++)  {  [CE]  cannot  find  symbol  r  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  r.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  r.length;  row++)  {	  for(int    row    =    0;    row    <    v.length;    row++)    {    	non-compiled	[CE]  cannot  find  symbol  r	83	None	replace
298	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  data.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  data.length;  row++)  {	  for(int    row    =    0;    row    <    v.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	2	replace
299	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  data.length;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  data.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  data.length;  row++)  {	  for(int    row    =    0;    row    <    v.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	2	replace
300	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
301	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
302	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	51	None	add
303	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	51	None	add
304	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	non-compiled	[CE]  >  expected	51	None	add
305	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  data[i].length;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	add
306	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getColumnDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getColumnDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
307	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getColumnDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getColumnDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getColumnDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
308	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
309	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nCols;  i++)  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	add
310	[BUG]  [BUGGY]  out[0]  =  Math.max(dataRows[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(dataRows[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(dataRows[0],  v[1]);  int  nRows  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
311	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[1],  v[2]);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[1],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  nRows  =  Math.max(out[1],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
312	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  v.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  v.length);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  v.length);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
313	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  0);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  0);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nRows,  0);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
314	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension()  *  v.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getColumnDimension()  *  v.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getColumnDimension()  *  v.length;	  final    int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
315	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  out.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  out.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension()  *  out.length;	  final    int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
316	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]);  int  nRows  =  this.getColumnDimension();	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
317	[BUG]  [BUGGY]  out[0]  =  data[0].doubleValue().doubleValue();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  data[0].doubleValue().doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  data[0].doubleValue().doubleValue();	  out[0]    =    v[0].doubleValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
318	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  +=  data[i]  *  v[i];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  +=  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  out[i]  +=  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    +=    data[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	17	None	replace
319	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v.length,  nRows;  row++)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  v.length,  nRows;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  v.length,  nRows;  row++)  {	  for(int    row    =    0;    row    <    nRows,    v.length;    row++)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
320	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.min(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
321	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.min(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.min(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
322	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
323	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
324	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [CE]  cannot  find  symbol  Out  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol  Out	1	None	add
325	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[1],  v[2]);  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[1],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[1],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    v[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
326	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  v[0]  =  Math.max(out[0],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    v[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
327	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  final  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  final  int  nRows  =  this.getRowDimension();  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  final  int  nRows  =  this.getRowDimension();	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	88	None	replace
328	[BUG]  [BUGGY]  out[0]  =  dataRow[1].doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  dataRow[1].doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  dataRow[1].doubleValue();	  out[0]    =    v[1].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
329	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  *  nRows];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  *  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  *  nRows];	  final    double[]    out    =    new    double[v.length    *    nCols];    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
330	[BUG]  [BUGGY]  out[1]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
331	[BUG]  [BUGGY]  out[0]  =  Math.max(out[1],  v[1]  +  1]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[1],  v[1]  +  1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[1],  v[1]  +  1]);	  out[0]    =    Math.max(out[0],    v[1]    +    1]);    	non-compiled	[CE]  ')'  expected	46	None	replace
332	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
333	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	2	add
334	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  out[0]  =  Math.max(out[1],  v[2]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  out[0]  =  Math.max(out[1],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  out[0]  =  Math.max(out[1],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    int    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  ']'  expected	13	None	replace
335	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  int  out[0]  =  Math.max(out[0],  v[1]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]);  int  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]);  int  out[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  ']'  expected	13	None	replace
336	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    Out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
337	[BUG]  [BUGGY]  out[0]  =  Math.max(dataRows[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(dataRows[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(dataRows[0],  v[1]);  Out[0]  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    Out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
338	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  -  3];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  -  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  -  3];	  final    double[]    out    =    new    double[v.length    -    1];    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  data[i]  +=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  data[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  data[i]  +=  data[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
340	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  final  int  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  final  int  nCols  =  this.getColumnDimension();  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nCols    +    1;    row++)    {    final  int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
341	[BUG]  [BUGGY]  final  double[]  out  =  new  double[v.length  *  1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[v.length  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[v.length  *  1];	  final    double[]    out    =    new    double[v.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
342	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  >  expected	43	None	replace
343	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  *  v[i];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  out[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	32	None	replace
344	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
345	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
346	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[0]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
347	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[0]);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[0]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[0]);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	2	add
348	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	98	None	add
349	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  0);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  0);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nCols,  0);	  out[0]    =    Math.max(out[0],    v[1]    *    nCols);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
350	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  data.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  nRows  +  data.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
351	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  data.length;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  data.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  data.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
352	[BUG]  [BUGGY]  if(v.length!=  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  cannot  find  symbol  row  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  if(v.length!=  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	if(v.length!=  nCols)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    double    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    	non-compiled	[CE]  cannot  find  symbol  row	86	None	replace
353	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  final  int  row  =  1;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  final  int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    1;    row    <    nCols;    row++)    {    final  int  row  =  1;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  >  expected	62	None	add
354	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
355	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension().doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension().doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension().doubleValue();	  out[0]    =    this.getRowDimension().doubleValue();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
356	[BUG]  [BUGGY]  int  row  =  0;  row  <  nRows  +  1;  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  row  =  0;  row  <  nRows  +  1;  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  row  =  0;  row  <  nRows  +  1;	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
357	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [CE]  cannot  find  symbol  Out  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    Out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol  Out	5	None	add
358	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
359	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
360	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  final  int  row  =  0;  row  <  nRows  +  3;  row++)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  final  int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int    row    =    0;    row    <    nRows    +    3;    row++)    {    final  int  row  =  0;  row  <  nRows  +  3;  row++)  {	  	non-compiled	[CE]  >  expected	41	None	add
361	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
362	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[1]  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
363	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
364	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[2]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[2]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
365	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension();  out[0]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    int    nRows    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
366	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  1;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nRows  =  this.getRowDimension()  *  1;	  final    int    nRows    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
367	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  *  out.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  this.getRowDimension()  *  out.length;  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  this.getRowDimension()  *  out.length;	  int    nRows    =    this.getRowDimension()    *    v.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
368	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i];  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	30	None	replace
369	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[1],  v[2]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[1],  v[2]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  int  v  =  Math.max(out[1],  v[2]);	          out[0]    =    Math.max(out[0],    v[1]);    int    v    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
370	[BUG]  [BUGGY]  for(final  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  cannot  assign  a  value  to  final  variable  row  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(final  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(final  int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    final    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  row	22	None	replace
371	[BUG]  [BUGGY]  final  int  nCols  =  this.getColumnDimension(v);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  int  nCols  =  this.getColumnDimension(v);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  int  nCols  =  this.getColumnDimension(v);	  final    int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
372	[BUG]  [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  *  nRows);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.min(v[0],  v[1]  *  nRows);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.min(v[0],  v[1]  *  nRows);	  out[0]    =    Math.min(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
373	[BUG]  [BUGGY]  out[0]  =  this.getDataDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getDataDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getDataDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
374	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  +  1);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]  +  1);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]  +  1);	  out[0]    =    Math.max(v[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
375	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	77	None	add
376	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
377	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
378	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  data[0]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  data[0]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  data[0]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    data[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
379	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
380	[BUG]  [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getColumnDimension();  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getColumnDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getColumnDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
381	[BUG]  [BUGGY]  out[1]  =  this.getEntryDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getEntryDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getEntryDimension();	  out[0]    =    this.getEntryDimension();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
382	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
383	[BUG]  [BUGGY]  final  double[]  out  =  new  double[vRows];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  final  double[]  out  =  new  double[vRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	final  double[]  out  =  new  double[vRows];	  final    double[]    out    =    new    double[nRows];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
384	[BUG]  [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(v[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(v[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(v[0],  v[1]);  Out[0]  =  Math.max(v[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    Out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
385	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getEntryDimension();  out[0]  =  this.getEntryDimension();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getEntryDimension();  out[0]  =  this.getEntryDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getEntryDimension();  out[0]  =  this.getEntryDimension();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
386	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getUpperDimension();  out[0]  =  this.getUpperDimension();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  out[0]  =  this.getUpperDimension();  out[0]  =  this.getUpperDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    out[0]  =  this.getUpperDimension();  out[0]  =  this.getUpperDimension();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
387	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[1],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[1],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
388	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[1],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    v[0]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[1],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        v[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[1],  v[1]);  v[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	2	add
389	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(double[])	75	None	add
390	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
391	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.get  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.get  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.get	  	non-compiled	[CE]  ';'  expected	75	None	add
392	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
393	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
394	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  }  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  }	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  >  expected	21	None	replace
395	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
396	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
397	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	2	add
398	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
399	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(double[])	77	None	add
400	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDi  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDi  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDi	  	non-compiled	[CE]  ';'  expected	77	None	add
401	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowD  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowD  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowD	  	non-compiled	[CE]  ';'  expected	77	None	add
402	[BUG]  [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  Integer  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	Integer  nCols  =  this.getColumnDimension();	  int    nCols    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
403	[BUG]  [BUGGY]  out[1]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[1]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[1]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
404	[BUG]  [BUGGY]  v[0]  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	v[0]  =  this.getRowDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
405	[BUG]  [BUGGY]  v[0]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  v[0]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	v[0]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
406	[BUG]  [BUGGY]  Integer  v  =  Math.max(out[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  Integer  v  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	Integer  v  =  Math.max(out[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    v    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  *  v[i];  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  data[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	30	None	replace
408	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  nRows  +  nCols;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
409	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  nCols;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows  +  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows  +  nCols;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
410	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	for(int  row  =  0;  row  <  nCols  +  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
411	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  v.length;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols  +  v.length;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols  +  v.length;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    nCols.length;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
412	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  v[i].length;  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  v[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  data[i]  +=  v[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    v[i].length;    }    	non-compiled	[CE]  >  expected	44	None	replace
413	[BUG]  [BUGGY]  out[0]  =  Math.max(out[1],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[1],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[1],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	          out[0]    =    Math.max(out[0],    v[1]);    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
414	[BUG]  [BUGGY]  static  final  int  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  static  final  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	static  final  int  nRows  =  this.getRowDimension();	  final    int    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
415	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	96	None	add
416	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	96	None	add
417	[BUG]  [BUGGY]  int  out[0]  =  Math.max(out[1],  v[1]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  out[0]  =  Math.max(out[1],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  out[0]  =  Math.max(out[1],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    out[0]    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  ']'  expected	13	None	replace
418	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  v.length);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nCols,  v.length);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nCols,  v.length);	  out[0]    =    Math.max(out[0],    v[1]    *    nCols);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
419	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(double[])	92	None	add
420	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    for(int  i  =  0;  i  <  nRows;  i++)  {  out[0]  =  this.getRowDimension();  }  int  nRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        for(int    i    =    0;    i    <    nRows;    i++)    {    out[0]    =    this.getRowDimension();    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	92	None	add
421	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getEntryDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  out[0]  =  this.getEntryDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    out[0]  =  this.getEntryDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
422	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    v[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
423	[BUG]  [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    this.getRowDimension();    out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  v[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        this.getRowDimension();        out[0]    =    this.getRowDimension();    v[0]    =    this.getRowDimension();    v[0]  =  this.getColumnDimension();  out[0]  =  this.getRowDimension();  v[0]  =  this.getRowDimension();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	2	add
424	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
425	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( " ");  }	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
426	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
427	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  IllegalArgumentException( "	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
428	[BUG]  [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getEntryDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  >  this.getColumnDimension())  {  throw  new  Il	          out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    >    this.getColumnDimension())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
429	[BUG]  [BUGGY]  out[0]  =  this.data[0].doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.data[0].doubleValue();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.data[0].doubleValue();	  out[0]    =    dataRow[0].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  data[i].length;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  data[i]  *=  data[i].length;  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    data[i]    +=    data[i].length;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
431	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	101	None	add
432	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    =    Math.max(out[0],    v[1]);    }    int  nRows  =  this.getRowDimension();  out[0]  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	101	None	add
433	[BUG]  [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  v.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  Math.max(out[0],  v[1]  *  nRows,  v.length);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  Math.max(out[0],  v[1]  *  nRows,  v.length);	  out[0]    =    Math.max(out[0],    v[1]    *    nRows);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
434	[BUG]  [BUGGY]  int  nRows  =  Math.max(v[0],  v[1]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  nRows  =  Math.max(v[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  nRows  =  Math.max(v[0],  v[1]);	          out[0]    =    Math.max(out[0],    v[1]);    int    nRows    =    Math.max(out[0],    v[1]);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
435	[BUG]  [BUGGY]  int  row  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  row  =  0;  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  row  =  0;	  for(int    row    =    0;    row    <    nCols;    row++)    {    int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
436	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  rRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  rRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  rRows;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  >  expected	27	None	replace
437	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  data[i].length;  }	  	non-compiled	[CE]  not  a  statement	51	None	add
438	[BUG]  [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  FOR(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  FOR(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                for(int        i        =        0;        i        <        nRows;        i++)        {        v[i]        +=        data[i].length;        }        for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }  FOR(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  +=  data[i].length;  }	  	non-compiled	[CE]  '.class'  expected	51	None	add
439	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  *  v[i];  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  out[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	32	None	replace
440	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  out[  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  out[  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  out[	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
441	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  [CE]  cannot  find  symbol  row  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  row	79	None	replace
442	[BUG]  [BUGGY]  out[i]  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[i]  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[i]  =  this.getColumnDimension();	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    for(int    i    =    0;    i    <    nRows;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
443	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[1]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[1]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
444	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[1]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    out[0]  =  Math.max(out[0],  v[1]);  out[1]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        out[0]    =    Math.max(out[0],    v[1]);    out[1]  =  Math.max(out[0],  v[1]);  out[0]  =  Math.max(out[0],  v[1]);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	add
445	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  *  v[i];  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  v[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    v[i]    *    v[i];    }    	non-compiled	[CE]  not  a  statement	31	None	replace
446	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  v[i];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  v[i];  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  v[i]  *  v[i];  }	  for(int    i    =    0;    i    <    nCols;    i++)    {    v[i]    *    v[i];    }    	non-compiled	[CE]  >  expected	31	None	replace
447	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nCols;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
448	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
449	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  }  [BUGGY]      final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  row  =  0;  row  <  nRows;  row++)  {  FOR(int  row  =  0;  row  <  nRows  +  1;  row++)  {  }	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    FOR(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	non-compiled	[CE]  '.class'  expected	103	None	replace
450	[BUG]  [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]          out[0]    =    Math.max(out[0],    v[1]);    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	                out[0]        =        Math.max(out[0],        v[1]);        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    Math.max(out[0],    v[1]);    }    nRows  =  Math.max(out[0],  v[1]);  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Math.max(out[0],  v[1]);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	98	None	add
451	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
452	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length!=  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[1]  =  this.getRowDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
453	[BUG]  [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	out[0]  =  this.getColumnDimension();  if(v.length  ==  nCols)  {  out[0]  =  this.getRowDimension();  }  else  {  out[0]  =  this.getColumnDimension();  }	          out[0]    =    this.getRowDimension();    if(v.length    ==    nCols)    {    out[0]    =    this.getRowDimension();    }    else    {    out[0]    =    this.getRowDimension();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  data[i].length;  }  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double[]  operate(double[]  v)  throws  IllegalArgumentException  {  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  data[i].length;  }  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  *  data[i].length;  }	          for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    +=    data[i].length;    }    for(int    i    =    0;    i    <    nRows;    i++)    {    v[i]    *    data[i].length;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
