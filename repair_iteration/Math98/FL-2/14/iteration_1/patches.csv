bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
2	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
4	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
6	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
7	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	add
8	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	add
9	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  	non-compiled	[CE]  ';'  expected	17	None	add
10	[BUG]  [BUGGY]  if(nRows!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  if(nRows!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  if(nRows!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  if(nRows!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  nRows  =  this.getRowDimension();  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  nRows  =  this.getRowDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	nRows  =  this.getRowDimension();	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	20	None	replace
13	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
14	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
15	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  	non-compiled	[CE]  ';'  expected	8	None	add
16	[BUG]  [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][0];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][0];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  v  =  new  BigDecimal[nCols][0];	      BigDecimal[][]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	15	None	replace
17	[BUG]  [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nRows][1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nRows][1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  v  =  new  BigDecimal[nRows][1];	      BigDecimal[][]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	15	None	replace
18	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][0];  [CE]  cannot  find  symbol  out  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][0];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  data  =  new  BigDecimal[nRows][0];	      BigDecimal[][]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  cannot  find  symbol  out	15	None	replace
19	[BUG]  [BUGGY]  final  int  nSum  =  this.getSum();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nSum  =  this.getSum();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getSum();	      int    nRows    =    this.getRowDimension();    final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
20	[BUG]  [BUGGY]  nRows  =  this.getRowDimension();  final  int  nSum  =  this.getSum();  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  nRows  =  this.getRowDimension();  final  int  nSum  =  this.getSum();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	nRows  =  this.getRowDimension();  final  int  nSum  =  this.getSum();	      int    nRows    =    this.getRowDimension();    final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	19	None	replace
21	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getColumnDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getColumnDimension();	      BigDecimal[]    v    =    this.getRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	4	None	replace
22	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getDataDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  this.getDataDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getDataDimension();	      BigDecimal[]    v    =    this.getRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	4	None	replace
23	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedRowDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  this.getSelectedRowDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getSelectedRowDimension();	      BigDecimal[]    v    =    this.getRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	4	None	replace
24	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
25	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols];    BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
26	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols];    Final  BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  ';'  expected	10	None	add
27	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
28	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
29	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
30	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
32	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	4	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
34	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	3	replace
35	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  1];	      BigDecimal[]    v    =    new    BigDecimal[nRows][nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	5	None	replace
36	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nRows];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nRows];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][nRows];	      BigDecimal[]    v    =    new    BigDecimal[nRows][nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	5	None	replace
37	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  1;  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  +  1;	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
38	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nRows  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getColumnDimension();	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
39	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  -  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nRows  =  this.getRowDimension()  -  1;  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  -  1;	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
40	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  +  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  int  nRows  =  this.getRowDimension()  +  1;  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	int  nRows  =  this.getRowDimension()  +  1;	      int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	2	None	replace
41	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  int  nRows  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	int  nRows  =  this.getColumnDimension();	      int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	2	None	replace
42	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols];	      BigDecimal[]    v    =    new    BigDecimal[nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
43	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  +  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  +  1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  +  1];	      BigDecimal[]    v    =    new    BigDecimal[nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
44	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols];	      BigDecimal[]    v    =    new    BigDecimal[nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
45	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  -  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  -  1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  -  1];	      BigDecimal[]    v    =    new    BigDecimal[nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
46	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final  BigDecimal[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	6	None	add
47	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	6	None	add
48	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows];    Final  BigDecimal[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  ';'  expected	6	None	add
49	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final  BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	6	None	add
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	replace
51	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	replace
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
53	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
54	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
55	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
57	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
58	[BUG]  [BUGGY]  final  int  nSum  =  this.getColumnDimension();  [CE]  cannot  find  symbol  out  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nSum  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getColumnDimension();	      int    nRows    =    this.getRowDimension();    final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  out	21	None	replace
59	[BUG]  [BUGGY]  nRows  =  this.getRowDimension();  final  int  nSum  =  this.getColumnDimension();  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  nRows  =  this.getRowDimension();  final  int  nSum  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	nRows  =  this.getRowDimension();  final  int  nSum  =  this.getColumnDimension();	      int    nRows    =    this.getRowDimension();    final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	21	None	replace
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
61	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
63	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
64	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
65	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[NRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[NRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]  out  =  new  BigDecimal[NRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
66	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
67	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][0];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][0];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][0];	      BigDecimal[]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
68	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][1];	      BigDecimal[]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
69	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][0];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][0];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows][0];	      BigDecimal[]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	16	None	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	4	replace
71	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	4	replace
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	replace
73	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	2	replace
74	[BUG]  [BUGGY]  if(v.length  ==  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  if(v.length  ==  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length  ==  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
75	[BUG]  [BUGGY]  if(v.length!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  if(v.length!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
76	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows]);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
77	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][2];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][2];	      BigDecimal[]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
78	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols];    final  BigDecimal[]  out  =  new  BigDecimal[NCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	10	None	add
79	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension(v.length);	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
80	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[NRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  final  BigDecimal[]  out  =  new  BigDecimal[NRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final  BigDecimal[]  out  =  new  BigDecimal[NRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	6	None	add
81	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  Number[]  out  =  new  BigDecimal[nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  Number[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    Number[]  out  =  new  BigDecimal[nRows];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
82	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getEntryDimension();	      BigDecimal[]    v    =    this.getRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	4	None	replace
83	[BUG]  [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nRows][2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nRows][2];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  v  =  new  BigDecimal[nRows][2];	      BigDecimal[][]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	15	None	replace
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
85	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	4	replace
86	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][0];	      BigDecimal[][]    v    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	15	None	replace
87	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  2;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  2;  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  *  2;	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	replace
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
89	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
90	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	replace
91	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	2	replace
92	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v);	      BigDecimal[]    v    =    new    BigDecimal[nRows][nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	5	None	replace
93	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  1];  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  1];	      BigDecimal[]    v    =    new    BigDecimal[nRows][nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	5	None	replace
94	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	add
95	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
96	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];	  	non-compiled	[CE]  ')'  expected	12	None	add
97	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension();  final  int  nSum  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  int  nRows  =  this.getColumnDimension();  final  int  nSum  =  this.getColumnDimension();  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	int  nRows  =  this.getColumnDimension();  final  int  nSum  =  this.getColumnDimension();	      int    nRows    =    this.getRowDimension();    final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	21	None	replace
98	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  v  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows]);  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows]);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol  v	3	None	replace
99	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	8	None	add
100	[BUG]  [BUGGY]  if(nRows  <  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();    [BUGGY]  if(nRows  <  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  <  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(v.length!=    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
