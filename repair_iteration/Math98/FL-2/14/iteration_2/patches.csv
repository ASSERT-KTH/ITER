bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	replace
2	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	3	replace
3	[BUG]  [BUGGY]  final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	9	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	2	replace
5	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	2	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
7	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
8	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v.length);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v.length);	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols].multiply(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	92	None	replace
9	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data);	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols].multiply(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	92	None	replace
10	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data,  v);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data,  v);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(data,  v);	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols].multiply(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	92	None	replace
11	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
12	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
13	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
14	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    Final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  	non-compiled	[CE]  ';'  expected	62	None	add
15	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
16	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	add
17	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	add
18	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  ';'  expected	60	None	add
19	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	add
20	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
21	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
22	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
23	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    Final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  	non-compiled	[CE]  ';'  expected	88	None	add
24	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
25	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	33	None	add
26	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	33	None	add
27	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    Final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  	non-compiled	[CE]  ';'  expected	33	None	add
28	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[NCols  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[NCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[NCols  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	33	None	add
29	[BUG]  [BUGGY]  if(nRows  ==  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  ==  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  ==  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  if(nRows  ==  v.length)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  ==  v.length)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  ==  v.length)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	replace
32	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	replace
33	[BUG]  [BUGGY]  final  int  nCols  =  this.getColumnDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nCols  =  this.getColumnDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nCols  =  this.getColumnDimension();	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    Final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	15	None	replace
34	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nCols][0];  [CE]  cannot  find  symbol  out  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nCols][0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  data  =  new  BigDecimal[nCols][0];	  BigDecimal[][]    v    =    new    BigDecimal[nCols][0];    	non-compiled	[CE]  cannot  find  symbol  out	16	None	replace
35	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	90	None	add
36	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	90	None	add
37	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];	  	non-compiled	[CE]  ';'  expected	90	None	add
38	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	90	None	add
39	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nRows  -  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nRows  -  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][nRows  -  1];	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	35	None	replace
40	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  -  2];	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	35	None	replace
41	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	56	None	add
42	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	56	None	add
43	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[NRows  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	56	None	add
44	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	56	None	add
45	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	add
46	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	add
47	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    Final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  	non-compiled	[CE]  ';'  expected	31	None	add
48	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[NCols  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[NCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[NCols  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	add
49	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  +  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  +  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols  +  1];	  BigDecimal[]    v    =    new    BigDecimal[nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	42	None	replace
50	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  -  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  -  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols  -  1];	  BigDecimal[]    v    =    new    BigDecimal[nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	42	None	replace
51	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  +  2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  +  2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  +  2];	  BigDecimal[]    v    =    new    BigDecimal[nRows    +    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	43	None	replace
52	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  *  1];	  BigDecimal[]    v    =    new    BigDecimal[nRows    +    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	43	None	replace
53	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  /  2;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension()  /  2;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  /  2;	  final    int    nRows    =    this.getRowDimension()    *    2;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	87	None	replace
54	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  2;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  2;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  +  2;	  final    int    nRows    =    this.getRowDimension()    *    2;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	87	None	replace
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	4	replace
56	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	4	replace
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	4	replace
58	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	4	replace
59	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
60	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	replace
61	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
62	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
63	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
64	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
66	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
68	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
69	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows],  v.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows],  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows],  v.length);	  BigDecimal[]    data    =    this.data.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
70	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nCols]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nCols]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    this.data.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
71	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedColumnDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getSelectedColumnDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getSelectedColumnDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	23	None	replace
72	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][1];	  BigDecimal[]    v    =    new    BigDecimal[nRows][1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	68	None	replace
73	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][1];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows][1];	  BigDecimal[]    v    =    new    BigDecimal[nRows][1];    	non-compiled	[CE]  incompatible  types	68	None	replace
74	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  *  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  *  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  *  1];	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols    +    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	93	None	replace
75	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols  +  2];	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols    +    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	93	None	replace
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	replace
77	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	replace
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	replace
79	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	replace
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	replace
81	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	4	replace
82	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[Nows];  [CE]  cannot  find  symbol  Nows  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[Nows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[Nows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]    out    =    new    BigDecimal[NRows];    	non-compiled	[CE]  cannot  find  symbol  Nows	65	None	replace
83	[BUG]  [BUGGY]  final  int  nCols  =  this.getRowDimension();  [CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nCols  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nCols  =  this.getRowDimension();	  final    BigDecimal[]    out    =    new    BigDecimal[nCols];    final    BigDecimal[]    out    =    new    BigDecimal[NCols];    	non-compiled	[CE]  variable  nCols  is  already  defined  in  method  operate(BigDecimal[])	78	None	replace
84	[BUG]  [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>[nRows];    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
85	[BUG]  [BUGGY]  List  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  List  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	List  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>[nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>[nRows];    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
86	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
87	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
88	[BUG]  [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  v  =  new  BigDecimal[nCols][1];	  BigDecimal[][]    v    =    new    BigDecimal[nRows][1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	17	None	replace
89	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][1];  [CE]  cannot  find  symbol  out  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  data  =  new  BigDecimal[nRows][1];	  BigDecimal[][]    v    =    new    BigDecimal[nRows][1];    	non-compiled	[CE]  cannot  find  symbol  out	17	None	replace
90	[BUG]  [BUGGY]  if(nRows  ==  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  ==  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  ==  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length    ==    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
91	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension()  +  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getColumnDimension()  +  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getColumnDimension()  +  1;	  final    int    nRows    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	37	None	replace
92	[BUG]  [BUGGY]  final  int  nSum  =  this.getRowDimension();  [CE]  cannot  find  symbol  out  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getRowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getRowDimension();	  final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  out	58	None	replace
93	[BUG]  [BUGGY]  final  int  nSum  =  this.getColumnDimension()  +  1;  [CE]  cannot  find  symbol  out  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getColumnDimension()  +  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getColumnDimension()  +  1;	  final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  out	58	None	replace
94	[BUG]  [BUGGY]  final  int  nSum  =  this.getColumnDimension(v.length);  [CE]  method  getColumnDimension  in  class  BigMatrixImpl  cannot  be  applied  to  given  types;  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getColumnDimension(v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getColumnDimension(v.length);	  final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  method  getColumnDimension  in  class  BigMatrixImpl  cannot  be  applied  to  given  types;	58	None	replace
95	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
96	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
97	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
98	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nCols  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
99	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][0];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nCols][0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nCols][0];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	86	None	replace
100	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][1];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][1];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	86	None	replace
101	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][0];	  BigDecimal[][]    out    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	86	None	replace
102	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  -  2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  -  2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  -  2];	  BigDecimal[]    v    =    new    BigDecimal[nRows    -    1];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	45	None	replace
103	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension();  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension();  final  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension();  final  BigDecimal[]  out  =  new  BigDecimal[nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	49	None	replace
104	[BUG]  [BUGGY]  final  int[]  nRows  =  new  int[nRows];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  nRows  =  new  int[nRows];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  nRows  =  new  int[nRows];  BigDecimal[]  out  =  new  BigDecimal[nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final    BigDecimal[]    out    =    new    BigDecimal[nCols];    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	49	None	replace
105	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][2];	  BigDecimal[]    v    =    new    BigDecimal[nRows][2];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	77	None	replace
106	[BUG]  [BUGGY]  if(nRows  ==  0)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  ==  0)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  ==  0)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    0)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  ||(nRows!=  0  &&  v.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  ||(nRows!=  0  &&  v.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	||(nRows!=  0  &&  v.length  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    0)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  if(nRows!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows!=  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length!=    nCols)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
109	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols];  [CE]  array  required,  but  BigDecimal  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nCols];	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nCols]);    	non-compiled	[CE]  array  required,  but  BigDecimal  found	29	None	replace
110	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	72	None	add
111	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	72	None	add
112	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];	  	non-compiled	[CE]  ';'  expected	72	None	add
113	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    *    1];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  *  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	72	None	add
114	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	5	None	add
115	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	5	None	add
116	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  	non-compiled	[CE]  ';'  expected	5	None	add
117	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  4];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	5	None	add
118	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	3	replace
119	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	3	replace
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
121	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  *  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	4	replace
123	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	4	replace
124	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
125	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    BigDecimal[]  out  =  new  BigDecimal[NRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
126	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
127	[BUG]  [BUGGY]  final  int[]  out  =  new  int[nRows];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    final    BigDecimal[]    out    =    new    BigDecimal[NRows];    	non-compiled	[CE]  incompatible  types	80	None	replace
128	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	70	None	add
129	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	70	None	add
130	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  	non-compiled	[CE]  ';'  expected	70	None	add
131	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  3];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	70	None	add
132	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
133	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
134	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
135	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols  +  1];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols  +  1];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  *  nCols  +  1];	  BigDecimal[]    v    =    new    BigDecimal[nRows    *    nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	44	None	replace
136	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows  *  2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows  *  2];	  BigDecimal[]    v    =    new    BigDecimal[nRows    *    nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	44	None	replace
137	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  *  nRows];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols  *  nRows];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols  *  nRows];	  BigDecimal[]    v    =    new    BigDecimal[nRows    *    nCols];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	44	None	replace
138	[BUG]  [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	99	None	replace
139	[BUG]  [BUGGY]  if(nRows  <  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  <  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  <  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows    <    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
140	[BUG]  [BUGGY]  if(nRows  <  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  <  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  <  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows    <    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
141	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length,  nCols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length,  nCols);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  v.length,  nCols);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows],    v.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
142	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows],  v.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows],  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows],  v.length);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows],    v.length);    	non-compiled	[CE]  ';'  expected	30	None	replace
143	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  nCols,  v.length);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  nCols,  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[nRows],  nCols,  v.length);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows],    v.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
144	[BUG]  [BUGGY]  final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[v.length  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    2];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	94	None	replace
145	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
146	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
147	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];	  BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	4	replace
148	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols  *  nRows];	  BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	4	replace
149	[BUG]  [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][2];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  v  =  new  BigDecimal[nCols][2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  v  =  new  BigDecimal[nCols][2];	  BigDecimal[][]    v    =    new    BigDecimal[nRows][2];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	83	None	replace
150	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][2];  [CE]  cannot  find  symbol  out  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[nRows][2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  data  =  new  BigDecimal[nRows][2];	  BigDecimal[][]    v    =    new    BigDecimal[nRows][2];    	non-compiled	[CE]  cannot  find  symbol  out	83	None	replace
151	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
152	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
153	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  Final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    Final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  	non-compiled	[CE]  ';'  expected	3	None	add
154	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[NRows  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
156	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  2];	  final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	4	replace
157	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length  +  1);  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length  +  1);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension(v.length  +  1);	  final    int    nRows    =    this.getRowDimension(v.length);    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	79	None	replace
158	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length  -  1);  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length  -  1);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension(v.length  -  1);	  final    int    nRows    =    this.getRowDimension(v.length);    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	79	None	replace
159	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length,  nCols);  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length,  nCols);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension(v.length,  nCols);	  final    int    nRows    =    this.getRowDimension(v.length);    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	79	None	replace
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
161	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols  +  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
163	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  *  2];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
164	[BUG]  [BUGGY]  final  int  nSum  =  this.getSumDimension();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getSumDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getSumDimension();	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
165	[BUG]  [BUGGY]  final  int  nSum  =  this.getSumMatrix();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getSumMatrix();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getSumMatrix();	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
166	[BUG]  [BUGGY]  final  int  nSum  =  this.getSum(v.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getSum(v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getSum(v.length);	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	4	replace
168	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols  +  nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	4	replace
169	[BUG]  [BUGGY]  BigDecimal  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal  nRows  =  this.getRowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal  nRows  =  this.getRowDimension();	  nRows    =    this.getRowDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	12	None	replace
170	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nSum];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nSum];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][nSum];	  BigDecimal[]    v    =    new    BigDecimal[nCols][nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	36	None	replace
171	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows][nCols];  [CE]  incompatible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows][nCols];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows][nCols];	  BigDecimal[]    v    =    new    BigDecimal[nCols][nRows];    	non-compiled	[CE]  incompatible  types	36	None	replace
172	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	1	None	add
173	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	1	None	add
174	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    Final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];	  	non-compiled	[CE]  ';'  expected	1	None	add
175	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  2];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  3];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	1	None	add
176	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows],  v.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows],  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[nRows],  v.length);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
177	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    this.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
178	[BUG]  [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[v.length  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	13	None	replace
179	[BUG]  [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int[]  out  =  new  int[v.length  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int[]  out  =  new  int[v.length  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
180	[BUG]  [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[v.length][0];  [CE]  cannot  find  symbol  out  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[][]  data  =  new  BigDecimal[v.length][0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[][]  data  =  new  BigDecimal[v.length][0];	  BigDecimal[][]    data    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  cannot  find  symbol  out	18	None	replace
181	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols][0];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nCols][0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nCols][0];	  BigDecimal[]    data    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	69	None	replace
182	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows],  v[0];  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows],  v[0];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows],  v[0];	  BigDecimal[]    data    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  ']'  expected	69	None	replace
183	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedDataDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getSelectedDataDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getSelectedDataDimension();	  BigDecimal[]    v    =    this.getDataDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	22	None	replace
184	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getDataDimension(nRows);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getDataDimension(nRows);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getDataDimension(nRows);	  BigDecimal[]    v    =    this.getDataDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	22	None	replace
185	[BUG]  [BUGGY]  Number[]  out  =  new  BigDecimal[nRows];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  Number[]  out  =  new  BigDecimal[nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	Number[]  out  =  new  BigDecimal[nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    Number[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  incompatible  types	81	None	replace
186	[BUG]  [BUGGY]  Number[]  out  =  new  BigDecimal[nCols];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  Number[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	Number[]  out  =  new  BigDecimal[nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    Number[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  incompatible  types	81	None	replace
187	[BUG]  [BUGGY]  final  int  nRows  =(v.length  <  1)?  this.getRowDimension()  :  0;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =(v.length  <  1)?  this.getRowDimension()  :  0;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =(v.length  <  1)?  this.getRowDimension()  :  0;	  final    int    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	38	None	replace
188	[BUG]  [BUGGY]  final  int  nRows  =  getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  getRowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  getRowDimension();	  final    int    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	38	None	replace
189	[BUG]  [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>(nRows];    	non-compiled	[CE]  ')'  expected	96	None	replace
190	[BUG]  [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols];  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>(nRows];    	non-compiled	[CE]  ')'  expected	96	None	replace
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
192	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    /    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
193	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nCols];    BigDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
194	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCOLs];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[nCOLs];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nCols];    BigDecimal[]  out  =  new  BigDecimal[nCOLs];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
195	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[NCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  BigDecimal[]  out  =  new  BigDecimal[NCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nCols];    BigDecimal[]  out  =  new  BigDecimal[NCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	50	None	add
196	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.selectedRows.toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  selectedRows  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.selectedRows.toArray(new  BigDecimal[nRows]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.selectedRows.toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol  selectedRows	98	None	replace
197	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.getDataRef().toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
198	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension()  +  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  int  nRows  =  this.getColumnDimension()  +  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	int  nRows  =  this.getColumnDimension()  +  1;	  int    nRows    =    this.getRowDimension()    +    1;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	40	None	replace
199	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getVowDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getVowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getVowDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	23	None	replace
200	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedRowDimension(nCols);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getSelectedRowDimension(nCols);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getSelectedRowDimension(nCols);	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	23	None	replace
201	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][2];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][2];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows][2];	  BigDecimal[]    data    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  incompatible  types	69	None	replace
202	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  bigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  bigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    bigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
203	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
204	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  ncols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  ncols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  *  ncols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	62	None	add
205	[BUG]  [BUGGY]  Integer  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  Integer  nRows  =  this.getRowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	Integer  nRows  =  this.getRowDimension();	  int    nRows    =    this.getColumnDimension();    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	41	None	replace
206	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getDataDimension(nCols);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getDataDimension(nCols);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getDataDimension(nCols);	  BigDecimal[]    v    =    this.getDataDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	22	None	replace
207	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension(nCols);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension(nCols);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getEntryDimension(nCols);	  BigDecimal[]    v    =    this.getEntryDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	82	None	replace
208	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension(nRows);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getEntryDimension(nRows);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getEntryDimension(nRows);	  BigDecimal[]    v    =    this.getEntryDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	82	None	replace
209	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
210	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	4	replace
211	[BUG]  [BUGGY]  final  int  nSum  =  data.getSum();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  data.getSum();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  data.getSum();	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
212	[BUG]  [BUGGY]  final  int  vRows  =  this.getRowDimension();  [CE]  cannot  find  symbol  out  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  vRows  =  this.getRowDimension();  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  vRows  =  this.getRowDimension();	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    2];    	non-compiled	[CE]  cannot  find  symbol  out	99	None	replace
213	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  *  1;	  final    int    nRows    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	39	None	replace
214	[BUG]  [BUGGY]  nRows  =  this.getColumnDimension();  [CE]  cannot  assign  a  value  to  final  variable  nRows  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  nRows  =  this.getColumnDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	nRows  =  this.getColumnDimension();	  nRows    =    this.getRowDimension();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nRows	12	None	replace
215	[BUG]  [BUGGY]  final  nRows  =  this.getRowDimension();  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  nRows  =  this.getRowDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  nRows  =  this.getRowDimension();	  nRows    =    this.getRowDimension();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
216	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols];  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nRows];	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>(nRows];    	non-compiled	[CE]  ')'  expected	96	None	replace
217	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nCols];  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nCols][nCols];  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nCols][nCols];	  BigDecimal[]    v    =    new    BigDecimal[nCols][nRows];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	36	None	replace
218	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
219	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  ncols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	84	None	add
220	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  ArrayDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  ArrayDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nCols];    ArrayDecimal[]  out  =  new  BigDecimal[nCols];	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
221	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCols];  BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    BigDecimal[]  out  =  new  BigDecimal[nRows  *  nCOLS];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	56	None	add
222	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	14	None	replace
223	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  vRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[vRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  int  vRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[vRows  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
224	[BUG]  [BUGGY]  final  int  vRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[vRows  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  vRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[vRows  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  vRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[vRows  -  1];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	4	replace
225	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  2  +  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  2  +  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  *  2  +  1;	  final    int    nRows    =    this.getRowDimension()    *    2;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	87	None	replace
226	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  4;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension()  *  4;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension()  *  4;	  final    int    nRows    =    this.getRowDimension()    *    2;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	87	None	replace
227	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
228	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  /  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    *    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	4	replace
229	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	33	None	add
230	[BUG]  [BUGGY]  final  int  nSum  =  this.getEntryDimension();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =  this.getEntryDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =  this.getEntryDimension();	  final    int    nSum    =    this.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
231	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  bigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  bigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    bigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
232	[BUG]  [BUGGY]  if(nCols!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nCols!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nCols!=  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    0)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
233	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCOLS];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
234	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][0].multiply(v);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][0].multiply(v);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][0].multiply(v);	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols].multiply(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	92	None	replace
235	[BUG]  [BUGGY]  if(v.length  ==  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(v.length  ==  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length  ==  nCols)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length!=    nCols)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
236	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension();  BigDecimal[]  out  =  new  BigDecimal[nRows];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows];    BigDecimal[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	47	None	replace
237	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	replace
238	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  +  2];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    BigDecimal[]    out    =    new    BigDecimal[v.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	replace
239	[BUG]  [BUGGY]  if(nRows  <  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  <  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  <  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length    ==    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
240	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getVarDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getVarDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getVarDimension();	  BigDecimal[]    v    =    this.getColumnDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	21	None	replace
241	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.getDataReferences().toArray(new  BigDecimal[nRows]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.getDataReferences().toArray(new  BigDecimal[nRows]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.getDataReferences().toArray(new  BigDecimal[nRows]);	  BigDecimal[]    data    =    this.v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
242	[BUG]  [BUGGY]  if(nCols!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nCols!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nCols!=  v.length)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
243	[BUG]  [BUGGY]  BigDecimal[]  v  =  this.getSelectedValueDimension();  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  this.getSelectedValueDimension();  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  this.getSelectedValueDimension();	  BigDecimal[]    v    =    this.getSelectedRowDimension();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	23	None	replace
244	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  -  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nCols  -  1];  final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  -  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nCols    -    1];    final  BigDecimal[]  out  =  new  BigDecimal[nCOLs  -  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	31	None	add
245	[BUG]  [BUGGY]  if(nRows  >  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nRows  >  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nRows  >  0)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows!=    0)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
246	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension()  -  1;  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getColumnDimension()  -  1;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getColumnDimension()  -  1;	  final    int    nRows    =    this.getRowDimension()    -    1;    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	39	None	replace
247	[BUG]  [BUGGY]  if(v.length  ==  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(v.length  ==  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length  ==  nCols)  {  if(v.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length    ==    nRows)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
248	[BUG]  [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v,  nSum);  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v,  nSum);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  v  =  new  BigDecimal[nRows][nCols].multiply(v,  nSum);	  BigDecimal[]    v    =    new    BigDecimal[nRows][nCols].multiply(v);    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	92	None	replace
249	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols];  final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    final  BigDecimal[]  out  =  new  BigDecimal[NRows  +  nCols];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	88	None	add
250	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	4	replace
251	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	4	replace
252	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    -    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	52	None	add
253	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
254	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];	  final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	4	replace
255	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	replace
256	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  3];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length  /  3];	  final    BigDecimal[]    out    =    new    BigDecimal[v.length    -    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	replace
257	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nCols]);  [CE]  cannot  find  symbol  v  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nCols]);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nCols]);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nCols]);    	non-compiled	[CE]  cannot  find  symbol  v	29	None	replace
258	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length,  v.length);  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length,  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nRows  =  this.getRowDimension(v.length,  v.length);	  final    int    nRows    =    this.getRowDimension(v.length);    	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	79	None	replace
259	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
260	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  /  1];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
261	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows],  v.length);  [CE]  cannot  find  symbol  v  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows],  v.length);  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  this.v.toArray(new  BigDecimal[nRows],  v.length);	  BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows],    v.length);    	non-compiled	[CE]  cannot  find  symbol  v	30	None	replace
262	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final    BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    final  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	60	None	add
263	[BUG]  [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols);  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	ArrayList  <  BigDecimal>  out  =  new  ArrayList  <  BigDecimal>(nCols);	  BigDecimal[]    out    =    new    BigDecimal[nRows];    ArrayList    <    BigDecimal>    out    =    new    ArrayList    <    BigDecimal>(nRows];    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
264	[BUG]  [BUGGY]  if(v.length  ==  nCols)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  out  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(v.length  ==  nCols)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length  ==  nCols)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.length!=    nCols)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  out	75	None	replace
265	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	4	replace
266	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  +  nCols  *  nCols];	  BigDecimal[]    out    =    new    BigDecimal[nRows    +    nCols];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	85	4	replace
267	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];  [BUGGY]      for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]    out    =    new    BigDecimal[nRows    +    1];    BigDecimal[]  out  =  new  BigDecimal[nRows  +  2];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	54	None	add
268	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][0],  v.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows][0],  v.length;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows][0],  v.length;	  BigDecimal[]    data    =    new    BigDecimal[nRows][0];    	non-compiled	[CE]  ';'  expected	69	None	replace
269	[BUG]  [BUGGY]  final  int  nSum  =(this.getSum()  <  nSum)?  this.getSum()  :  0;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =(this.getSum()  <  nSum)?  this.getSum()  :  0;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =(this.getSum()  <  nSum)?  this.getSum()  :  0;	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
270	[BUG]  [BUGGY]  final  int  nSum  =(this.getSum()  >=  0)?  this.getSum()  :  0;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  final  int  nSum  =(this.getSum()  >=  0)?  this.getSum()  :  0;  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	final  int  nSum  =(this.getSum()  >=  0)?  this.getSum()  :  0;	  final    int    nSum    =    this.getSum();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
271	[BUG]  [BUGGY]  if(v.length  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(v.length  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(v.length  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows    <    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
272	[BUG]  [BUGGY]  if(nCols  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();      [BUGGY]  if(nCols  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	if(nCols  <  nRows)  {  if(v.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(nRows    <    v.length)    {    if(v.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
