bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][sum.length];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	replace
2	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	replace
3	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][columnDimension];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    ZERO;    out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
5	[BUG]  [BUGGY]  out[row]  =  ZERO;  out[row]  =  ZERO;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  out[row]  =  ZERO;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    out[row]  =  ZERO;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
7	[BUG]  [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
9	[BUG]  [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
11	[BUG]  [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
13	[BUG]  [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    for(int  i  =  0;  i  <  nRows;  i++)  {  out[row]  =  ZERO;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
14	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i]));  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	10	None	replace
15	[BUG]  [BUGGY]  out[row]  =  v.copyOf(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v.copyOf(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.copyOf(data[row][i].multiply(v[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
16	[BUG]  [BUGGY]  out[row]  =  sum.copyOf(data[row][i].multiply(nRows[i]));  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.copyOf(data[row][i].multiply(nRows[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.copyOf(data[row][i].multiply(nRows[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
17	[BUG]  [BUGGY]  out[row]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  Sum;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum;	  out[row]    =    ZERO;    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
18	[BUG]  [BUGGY]  out[i]  =  sum;  [CE]  cannot  find  symbol  i  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[i]  =  sum;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum;	  out[row]    =    ZERO;    	non-compiled	[CE]  cannot  find  symbol  i	13	None	replace
19	[BUG]  [BUGGY]  out[row]  =  v;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v;	  out[row]    =    ZERO;    	non-compiled	[CE]  incompatible  types	13	None	replace
20	[BUG]  [BUGGY]  out[row]  =  v.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v.multiply(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.multiply(data[row][i].multiply(v[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
21	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][i].multiply(nRows[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.multiply(data[row][i].multiply(nRows[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][i].multiply(nRows[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
23	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
24	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	add
25	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  Sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	1	None	add
26	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	1	None	add
27	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][row];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][row];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
28	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][row];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
29	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[sum.length][0];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[sum.length][0];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	16	None	replace
30	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][0];	      BigDecimal[][]    out    =    new    BigDecimal[data.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	18	None	replace
31	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  1];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row  +  1];	      BigDecimal[][]    out    =    new    BigDecimal[data.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	18	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[row][i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  '.class'  expected	23	None	replace
35	[BUG]  [BUGGY]  out[row]  =  sum.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.multiply(data[row][i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.multiply(data[row][i]);	  out[row]    =    sum.multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
36	[BUG]  [BUGGY]  out[row]  =  data[row][i].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  data[row][i].multiply(v[i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].multiply(v[i]);	  out[row]    =    sum.multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
39	[BUG]  [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	while(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
42	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
43	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
44	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	add
45	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	3	None	add
46	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  in  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  in[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  in	3	None	add
47	[BUG]  [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[0]));  [CE]  array  required,  but  BigDecimal  found  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row][0]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][0]  =  sum.add(data[row][0].multiply(v[0]));	      out[row][i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  array  required,  but  BigDecimal  found	6	None	replace
48	[BUG]  [BUGGY]  out[row][i]  =  ZERO.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row][i]  =  ZERO.add(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  ZERO.add(data[row][i].multiply(v[i]));	      out[row][i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
49	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i]));  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i]));	      out[row][i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
51	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
53	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
54	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
55	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.subtract(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
56	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  Sum.subtract(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	add
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
58	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	add
59	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
60	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][row.length];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
61	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
62	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i];  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[row][i]	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(data[	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  out[row]  =  sum.toBigDecimal();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.toBigDecimal();  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.toBigDecimal();	  out[row]    =    v.toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
71	[BUG]  [BUGGY]  out[row]  =  data[row].toBigDecimal();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  data[row].toBigDecimal();  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row].toBigDecimal();	  out[row]    =    v.toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
72	[BUG]  [BUGGY]  out[i]  =  v.toBigDecimal();  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[i]  =  v.toBigDecimal();  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  v.toBigDecimal();	  out[row]    =    v.toBigDecimal();    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
73	[BUG]  [BUGGY]  out[row]  =  v.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v.add(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.add(data[row][i].multiply(v[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
74	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][0].multiply(v[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(v[i]))  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
80	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	For(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  '.class'  expected	2	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nSum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  nSum	2	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	5	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	5	None	replace
85	[BUG]  [BUGGY]  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.subtract(data[row][i].multiply(v[i]));	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  i	8	None	replace
86	[BUG]  [BUGGY]  out[row]  =  v.multiply(sum);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v.multiply(sum);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.multiply(sum);	  out[row]    =    sum.multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
87	[BUG]  [BUGGY]  out[i]  =  sum.multiply(data[row][i]);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[i]  =  sum.multiply(data[row][i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  sum.multiply(data[row][i]);	  out[row]    =    sum.multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
88	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  >  expected	23	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i].multiply(v[i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  ')'  expected	23	None	replace
90	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	3	None	add
91	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
92	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
93	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	3	None	add
94	[BUG]  [BUGGY]  out[row]  =  Sum.ONE;  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  Sum.ONE;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.ONE;	  out[row]    =    ZERO;    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
95	[BUG]  [BUGGY]  out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  ArrayIndexOutOfBoundsException  out[row]  =  ZERO;  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    ArrayIndexOutOfBoundsException  out[row]  =  ZERO;	  	non-compiled	[CE]  ']'  expected	12	None	add
96	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal[][]  out  =  sum.add(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
97	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal  v  =  sum.add(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
98	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  new  BigDecimal[sum.length][row];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  new  BigDecimal[sum.length][row];  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal[][]  out  =  new  BigDecimal[sum.length][row];	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
99	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0];  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data[row][0];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data[row][0];	      BigDecimal[][]    out    =    new    BigDecimal[data.length][row];    	non-compiled	[CE]  ']'  expected	18	None	replace
100	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum;  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum;  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][row],  sum;	      BigDecimal[][]    out    =    new    BigDecimal[data.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	18	None	replace
101	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	7	None	add
102	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  out  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	7	None	add
103	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	7	None	add
104	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	7	None	add
105	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]));  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(v[i]));	  out[row]    =    sum.copyOf(data[row][i].multiply(v[i]));    	non-compiled	[CE]  ';'  expected	10	None	replace
106	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	4	None	replace
107	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  >  expected	21	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].add(data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
109	[BUG]  [BUGGY]  bigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  bigDecimal[][]  out  =  data[row][i].multiply(v[i]);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	bigDecimal[][]  out  =  data[row][i].multiply(v[i]);	      if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
110	[BUG]  [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	if(sum!=  null)  {  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].subtract(v[i]));  }	      if(sum!=    null)    {    for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
111	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].multiply(v[i]));	  	non-compiled	[CE]  cannot  find  symbol  i	1	None	add
112	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	1	None	add
113	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
114	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	2	add
115	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(data[row][i].length);	  	non-compiled	[CE]  cannot  find  symbol  i	1	None	add
116	[BUG]  [BUGGY]  out[row]  =  ZERO.multiply(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO.multiply(data[row][i].multiply(v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ZERO.multiply(data[row][i].multiply(v[i]));	  out[row]    =    sum.multiply(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	25	None	replace
117	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][sum.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][sum.length];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
118	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
119	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][sum];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][sum];	      BigDecimal[][]    out    =    new    BigDecimal[sum.length][data.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	17	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data[row][i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  ']'  expected	24	None	replace
121	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	4	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	out[row]  =  sum.add(data[row][0].multiply(v[0]));	      out[i]    =    sum.add(data[row][i].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	replace
124	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.add(data[row][0].multiply(v[0]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][0].multiply(v[0]));	      out[i]    =    sum.add(data[row][i].multiply(v[i]));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	4	replace
125	[BUG]  [BUGGY]  out[row]  =  ZERO.add(data[row][i].multiply(v[i]));  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO.add(data[row][i].multiply(v[i]));  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  ZERO.add(data[row][i].multiply(v[i]));	      out[i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
126	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	2	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  nLows  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nLows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  cannot  find  symbol  nLows	2	None	replace
128	[BUG]  [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  >  expected	5	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  sum[i]  =  data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  ';'  expected	5	None	replace
130	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum.length];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[row][sum.length];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[row][sum.length];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
131	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[nRows][0];	      BigDecimal[][]    out    =    new    BigDecimal[nRows][sum.length];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	19	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
133	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	3	None	add
134	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  Data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.add(Data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  Data	3	None	add
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  data[row][i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =  new  BigDecimal[data.length];  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i]  instanceof  BigDecimal[])  {  out[i]  =(BigDecimal[])v[i].multiply(v[i]  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i]    instanceof    BigDecimal[])    {    out[i]    =(BigDecimal[])v[i].multiply(v[i]    	non-compiled	[CE]  ')'  expected	22	None	replace
139	[BUG]  [BUGGY]  out[row]  =  Sum.valueOf(sum);  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  Sum.valueOf(sum);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  Sum.valueOf(sum);	  out[row]    =    ZERO;    	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	replace
140	[BUG]  [BUGGY]  out[i]  =  data[row][i].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[i]  =  data[row][i].multiply(v[i]);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[i]  =  data[row][i].multiply(v[i]);	      out[i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
141	[BUG]  [BUGGY]  out[row]  =  v.multiply(sum[i]);  [CE]  cannot  find  symbol  i  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  v.multiply(sum[i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  v.multiply(sum[i]);	  out[row]    =    sum.multiply(v[i]);    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
142	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  v[i]));  [CE]  cannot  find  symbol  i  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i],  v[i]));  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i],  v[i]));	  out[row]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
143	[BUG]  [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  sum.add(data[row][i].multiply(v[i]),  v[i]);	  out[row]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
144	[BUG]  [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]);  [CE]  cannot  find  symbol  i  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  data[row][i].copyOf(v[i]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]  =  data[row][i].copyOf(v[i]);	  out[row]    =    sum.copyOf(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  nSum;  i++)  {  if(sum.equals(data[row][i]))  {  return  out;  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(sum.equals(data[row][i]))    {    return    out;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][1];  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][1];  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][1];	      BigDecimal[][]    out    =    new    BigDecimal[data.length][row];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	18	None	replace
147	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(BigDecimal[])	7	None	add
148	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i])  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i])  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i])	  	non-compiled	[CE]  ')'  expected	7	None	add
149	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]));  }  int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    sum.subtract(data[row][i].multiply(v[i]));    }    int  nRows  =  this.getRowDimension();  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum.subtract(data[row][i].multiply(v[i]	  	non-compiled	[CE]  ')'  expected	7	None	add
150	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].Multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
151	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [CE]  cannot  find  symbol  V  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]      for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(v[i]));  }  for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	        for(int    i    =    0;    i    <    nRows;    i++)    {    sum.add(data[row][i].multiply(v[i]));    }    for(int  i  =  0;  i  <  nRows;  i++)  {  sum.add(data[row][i].multiply(V[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  V	1	None	add
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  array  required,  but  BigDecimal  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  for(int  i  =  0;  i  <  v.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	for(int  i  =  0;  i  <  v.length;  i++)  {  sum[i]  =  sum.add(data[row][i].multiply(v[i]));  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    sum[i]    =    sum.add(data[row][i].multiply(v[i]));    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	5	None	replace
153	[BUG]  [BUGGY]  out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [CE]  cannot  find  symbol  i  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  if(sum!=  null)  {  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    if(sum!=  null)  {  out[row]  =  ZERO;  }  else  {  out[row]  =  sum.add(data[row][i].multiply(v[i]));  }	  	non-compiled	[CE]  cannot  find  symbol  i	12	None	add
154	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
155	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]	  	non-compiled	[CE]  ')'  expected	12	None	add
156	[BUG]  [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row]  =  ZERO;  BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }  [BUGGY]    }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row]    =    ZERO;    BigDecimal[][]  out  =  sum.toArray(new  BigDecimal[sum.size()  ]);  for(int  i  =  0;  i  <  nRows;  i++)  {  data[row][i]  =  data[i].multiply(v[i]);  }	  	non-compiled	[CE]  variable  out  is  already  defined  in  method  operate(BigDecimal[])	12	None	add
157	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i]);  [CE]  cannot  find  symbol  i  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i]);  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i]);	      out[row][i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
158	[BUG]  [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  1;  [CE]  cannot  find  symbol  i  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }    [BUGGY]  out[row][i]  =  data[row][i].multiply(v[i])+  1;  [BUGGY]    out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	out[row][i]  =  data[row][i].multiply(v[i])+  1;	      out[row][i]    =    sum.add(data[row][i].multiply(v[i]));    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
