bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ((  double[])dataRow[i]).doubleValue();  [CE]  inconvertible  types  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    ((  double[])dataRow[i]).doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    ((  double[])dataRow[i]).doubleValue();		non-compiled	[CE]  inconvertible  types	18	None	add
2	[BUG]  [BUGGY]    ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];  [CE]  inconvertible  types  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];		non-compiled	[CE]  inconvertible  types	18	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	    out[i]  =  Math.max(sum,  dataRow[i]);		compilable	  [FE]  AssertionFailedError  	18	4	add
4	[BUG]  [BUGGY]    out[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    out[i]  =  Math.max(sum,  dataRow[i]);		compilable	  [FE]  AssertionFailedError  	18	4	add
5	[BUG]  [BUGGY]    ((  double[])dataRow[i]).doubleValue()  *  v[i];  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    ((  double[])dataRow[i]).doubleValue()  *  v[i];  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    ((  double[])dataRow[i]).doubleValue()  *  v[i];		non-compiled	[CE]  not  a  statement	18	None	add
6	[BUG]  [BUGGY]    out[i]  =  Math.max(sum,  dataRow[i].length);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  Math.max(sum,  dataRow[i].length);  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    out[i]  =  Math.max(sum,  dataRow[i].length);		non-compiled	[CE]  double  cannot  be  dereferenced	18	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  [BUGGY]  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  /  v[i];	sum  +=  dataRow[i]  *  v[i];  	compilable	  [FE]  AssertionFailedError  	17	4	replace
8	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  [BUGGY]  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i];	sum  +=  dataRow[i]  *  v[i];  	compilable	  [FE]  AssertionFailedError  	17	4	replace
9	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]  sum  +=  dataRow[i]  *  v[i].length;  [BUGGY]  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i].length;	sum  +=  dataRow[i]  *  v[i];  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
10	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]  sum  +=  data[i]  *  v[i];  [BUGGY]  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i];	sum  +=  dataRow[i]  *  v[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	17	None	replace
11	[BUG]  [BUGGY]    out[i]  =  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  dataRow[i].doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    out[i]  =  dataRow[i].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	18	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  dataRow[i]  *  v[i];  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	    out[i]  =  dataRow[i]  *  v[i];		compilable	  [FE]  AssertionFailedError  	18	4	add
13	[BUG]  [BUGGY]    out[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    out[i]  =  dataRow[i]  *  v[i];  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    out[i]  =  dataRow[i]  *  v[i];		compilable	  [FE]  AssertionFailedError  	18	4	add
14	[BUG]  [BUGGY]    double  v  =  dataRow[i].doubleValue();  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    double  v  =  dataRow[i].doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    double  v  =  dataRow[i].doubleValue();		non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	18	None	add
15	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]  sum  +=  dataRow[i]  *  v[i].doubleValue();  [BUGGY]  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i].doubleValue();	sum  +=  dataRow[i]  *  v[i];  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
16	[BUG]  [BUGGY]    v[i]  =  data[row].doubleValue();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    v[i]  =  data[row].doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    v[i]  =  data[row].doubleValue();		non-compiled	[CE]  cannot  find  symbol	18	None	add
17	[BUG]  [BUGGY]    v[i]  =  data[row][i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    v[i]  =  data[row][i].doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    v[i]  =  data[row][i].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	18	None	add
18	[BUG]  [BUGGY]    v[i]  =  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    v[i]  =  dataRow[i].doubleValue();  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    v[i]  =  dataRow[i].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	18	None	add
19	[BUG]  [BUGGY]    v[i]  =  Math.max(v[i]  *  dataRow[i]);  [CE]  no  suitable  method  found  for  max(double)  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException( "vector  has  wrong  length ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {  [BUGGY]    v[i]  =  Math.max(v[i]  *  dataRow[i]);  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	    v[i]  =  Math.max(v[i]  *  dataRow[i]);		non-compiled	[CE]  no  suitable  method  found  for  max(double)	18	None	add
