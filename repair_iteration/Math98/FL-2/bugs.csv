bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (v.length != this.getColumnDimension()) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] if (v.length != this.getColumnDimension()) { [BUGGY] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	986	986	1	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] [BUGGY] if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	986	986	1	add	
3	[BUG] [BUGGY] final int nRows = this.getRowDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	989	989	1	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] [BUGGY] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	989	989	1	add	
5	[BUG] [BUGGY] final int nCols = this.getColumnDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	990	990	1	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	990	990	1	add	
7	[BUG] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	991	991	1	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	991	991	1	add	
9	[BUG] [BUGGY] for (int row = 0; row < nRows; row++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	992	992	1	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	992	992	1	add	
11	[BUG] [BUGGY] BigDecimal sum = ZERO; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	993	993	1	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	993	993	1	add	
13	[BUG] [BUGGY] for (int i = 0; i < nCols; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	994	994	1	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	994	994	1	add	
15	[BUG] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [BUGGY] } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	995	995	1	replace	
16	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	995	995	1	add	
17	[BUG] [BUGGY] out[row] = sum; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] out[row] = sum; [BUGGY] } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	997	997	1	replace	
18	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] [BUGGY] out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.5773502691896258	997	997	1	add	
19	[BUG] [BUGGY] if (d[r].length != nCols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { [BUGGY] throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.25	154	154	1	replace	
20	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.25	154	154	1	add	
21	[BUG] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	138	138	1	replace	
22	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	138	138	1	add	
23	[BUG] [BUGGY] protected BigDecimal data[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected BigDecimal data[][] = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	56	56	1	replace	
24	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected BigDecimal data[][] = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	56	56	1	add	
25	[BUG] [BUGGY] protected BigDecimal lu[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected BigDecimal lu[][] = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	61	61	1	replace	
26	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected BigDecimal lu[][] = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	61	61	1	add	
27	[BUG] [BUGGY] protected int[] permutation = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int[] permutation = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	64	64	1	replace	
28	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int[] permutation = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	64	64	1	add	
29	[BUG] [BUGGY] protected int parity = 1; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int parity = 1; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	67	67	1	replace	
30	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int parity = 1; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	67	67	1	add	
31	[BUG] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	70	70	1	replace	
32	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	70	70	1	add	
33	[BUG] [BUGGY] private int scale = 64; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] private int scale = 64; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	73	73	1	replace	
34	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] private int scale = 64; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	73	73	1	add	
35	[BUG] [BUGGY] if (copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] if (copyArray) { [BUGGY] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	139	139	1	replace	
36	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	139	139	1	add	
37	[BUG] [BUGGY] if (d == null) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] if (d == null) { [BUGGY] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	142	142	1	replace	
38	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] [BUGGY] if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	142	142	1	add	
39	[BUG] [BUGGY] final int nRows = d.length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] final int nRows = d.length; [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	145	145	1	replace	
40	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] [BUGGY] final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	145	145	1	add	
41	[BUG] [BUGGY] if (nRows == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] if (nRows == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	146	146	1	replace	
42	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	146	146	1	add	
43	[BUG] [BUGGY] final int nCols = d[0].length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] final int nCols = d[0].length; [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	149	149	1	replace	
44	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] [BUGGY] final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	149	149	1	add	
45	[BUG] [BUGGY] if (nCols == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] if (nCols == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	150	150	1	replace	
46	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	150	150	1	add	
47	[BUG] [BUGGY] for (int r = 1; r < nRows; r++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	153	153	1	replace	
48	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] [BUGGY] for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	153	153	1	add	
49	[BUG] [BUGGY] data = d; [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } [BUGGY] data = d; [BUGGY] } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	158	158	1	replace	
50	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } [BUGGY] [BUGGY] data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	158	158	1	add	
51	[BUG] [BUGGY] lu = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [BUGGY] lu = null; [BUGGY] } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	160	160	1	replace	
52	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [BUGGY] [BUGGY] lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	160	160	1	add	
53	[BUG] [BUGGY] } [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [BUGGY] } [BUGGY]  [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	161	161	1	replace	
54	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [BUGGY] [BUGGY] } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.24253562503633297	161	161	1	add	
55	[BUG] [BUGGY] return data.length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public int getRowDimension() { [BUGGY] return data.length; [BUGGY] } [CLASS] BigMatrixImpl [METHOD] getRowDimension [RETURN_TYPE] int  [VARIABLES] int[] permutation selectedColumns selectedRows boolean long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.19245008972987526	947	947	1	replace	
56	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public int getRowDimension() { [BUGGY] [BUGGY] return data.length; } [CLASS] BigMatrixImpl [METHOD] getRowDimension [RETURN_TYPE] int  [VARIABLES] int[] permutation selectedColumns selectedRows boolean long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.19245008972987526	947	947	1	add	
57	[BUG] [BUGGY] return data[0].length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public int getColumnDimension() { [BUGGY] return data[0].length; [BUGGY] } [CLASS] BigMatrixImpl [METHOD] getColumnDimension [RETURN_TYPE] int  [VARIABLES] int[] permutation selectedColumns selectedRows boolean long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.19245008972987526	956	956	1	replace	
58	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public int getColumnDimension() { [BUGGY] [BUGGY] return data[0].length; } [CLASS] BigMatrixImpl [METHOD] getColumnDimension [RETURN_TYPE] int  [VARIABLES] int[] permutation selectedColumns selectedRows boolean long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.19245008972987526	956	956	1	add	
59	[BUG] [BUGGY] private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12); [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12); [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	76	76	1	replace	
60	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12); [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	76	76	1	add	
61	[BUG] [BUGGY] static final BigDecimal ZERO = new BigDecimal(0); [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] static final BigDecimal ZERO = new BigDecimal(0); [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	79	79	1	replace	
62	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] static final BigDecimal ZERO = new BigDecimal(0); [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	79	79	1	add	
63	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] static final BigDecimal ZERO = new BigDecimal(0); [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	81	81	1	replace	
64	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] static final BigDecimal ZERO = new BigDecimal(0); [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.1889822365046136	81	81	1	add	
