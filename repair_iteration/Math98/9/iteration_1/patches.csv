bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  data[i]  *  v[i].length;  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i].length;	  sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
2	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  v[i].length;  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  Sum  +=  dataRow[i]  *  v[i].length;  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  v[i].length;	  sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	9	None	replace
3	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i].length;  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i].length;	  sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
4	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  1;	      double    v    =    dataRow[i].doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	14	None	replace
5	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue();  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue().doubleValue();	      double    v    =    dataRow[i].doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	14	None	replace
6	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  sum;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  sum;	      double    v    =    dataRow[i].doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	14	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	3	4	add
8	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	3	4	add
9	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    int  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  ']'  expected	3	None	add
10	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  ';'  expected	3	None	add
11	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    int  i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  ';'  expected	3	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	        out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
13	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
14	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  int  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  int  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    int  dataRow[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ']'  expected	12	None	add
15	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    for(int  i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ';'  expected	12	None	add
16	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMaxColSum();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMaxColSum();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i].getMaxColSum();	  sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
17	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i]);  [CE]  no  suitable  method  found  for  max(double)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  v[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	19	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
19	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
21	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
22	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i]);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  dataRow[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	19	None	replace
23	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i]);	      out[i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	4	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
25	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  sum);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
27	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
28	[BUG]  [BUGGY]  v[i]  =  data[i].doubleValue();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  data[i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i].doubleValue();	      v[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
29	[BUG]  [BUGGY]  data[i]  =  data[row].doubleValue();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  data[i]  =  data[row].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  data[row].doubleValue();	      v[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow.length  *  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow.length  *  v[i];	  sum    +=    data[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	10	4	replace
31	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow.length  *  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow.length  *  v[i];	  sum    +=    data[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	10	4	replace
32	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  *  v[i];	  sum    +=    data[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	10	None	replace
33	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[i].doubleValue().doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue().doubleValue();	      v[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
34	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  +  1;	      v[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
35	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue();  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[i.doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue();	      v[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  ']'  expected	18	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	7	4	add
37	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	7	4	add
38	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    Sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	add
39	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    total  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  total	7	None	add
40	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  inconvertible  types	7	None	add
41	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]            AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	7	None	add
42	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i].length);	      out[i]    =    Math.max(sum,    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
43	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  sum);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  sum);	      out[i]    =    Math.max(sum,    dataRow[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	6	None	replace
44	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  1);  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  1);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length  -  1);	      out[i]    =    Math.max(sum,    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
45	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +  v[i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +  v[i].doubleValue();	      out[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
46	[BUG]  [BUGGY]  out[i]  =  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  v[i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i].doubleValue();	      out[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
47	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +  1;	      out[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
48	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  1;	      v[i]    =    data[row][i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
49	[BUG]  [BUGGY]  v[i]  =  dataRow[row][i].doubleValue();  [CE]  array  required,  but  double  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[row][i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[row][i].doubleValue();	      v[i]    =    data[row][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
50	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  sum;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  sum;	      v[i]    =    data[row][i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  sum;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
52	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  sum;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  /  v[i];	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
54	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  /  v[i];	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  sum;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
56	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  sum;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
57	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue();  [CE]  inconvertible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])v[i]).doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue();	      ((    double[])dataRow[i]).doubleValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
58	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  1;	      ((    double[])dataRow[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	1	None	replace
59	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];  [CE]  inconvertible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  *  v[i];	      ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	2	None	replace
60	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];	      ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	2	None	replace
61	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];	      ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
62	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  *  v[i.length].doubleValue();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i.length].doubleValue();	  sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
63	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum.doubleValue();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum.doubleValue();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  maxColSum.doubleValue();	  sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
64	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i].doubleValue();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i].doubleValue();	  sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
65	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum;  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  sum;	      ((    double[])dataRow[i]).doubleValue()    *    v[i];    	non-compiled	[CE]  not  a  statement	5	None	replace
66	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i];  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  v[i];	      ((    double[])dataRow[i]).doubleValue()    *    v[i];    	non-compiled	[CE]  not  a  statement	5	None	replace
67	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  *  dataRow[i];	      ((    double[])dataRow[i]).doubleValue()    *    v[i];    	non-compiled	[CE]  not  a  statement	5	None	replace
68	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v[i]  +  dataRow[i];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v[i]  +  dataRow[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  v[i]  +  dataRow[i];	      ((    double[])dataRow[i]).doubleValue()    *    v[i];    	non-compiled	[CE]  not  a  statement	5	None	replace
69	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue());  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[i.doubleValue());  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue());	      v[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  ']'  expected	18	None	replace
70	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    int  i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ';'  expected	12	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	        out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
72	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
73	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  i]  =  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  i]  =  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  not  a  statement	12	None	add
74	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  dataRow[i]  *  v[i];  [CE]  inconvertible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  dataRow[i]  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +=  dataRow[i]  *  v[i];	      ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	2	None	replace
75	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  dataRow[i];  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  dataRow[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  dataRow[i];	      ((    double[])dataRow[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	1	None	replace
76	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  v[i];  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  v[i];	      ((    double[])dataRow[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	1	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	        out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	3	4	add
78	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	3	4	add
79	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i]);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  not  a  statement	3	None	add
80	[BUG]  [BUGGY]  v[i]  =  dataRow.doubleValue();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow.doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow.doubleValue();	      v[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
81	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double  v  =  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    double  v  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	7	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	7	4	add
83	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	7	4	add
84	[BUG]  [BUGGY]  sum  +=  dataRow  *  v[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow  *  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  v[i];	  sum    +=    data[i]    *    v[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	replace
85	[BUG]  [BUGGY]  sum  +=  dataRow  *  data[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow  *  data[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  data[i];	  sum    +=    data[i]    *    v[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	replace
86	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v.length);	      out[i]    =    Math.max(sum,    dataRow[i].length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	6	None	replace
87	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  v[i].doubleValue();  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  Sum  +=  dataRow[i]  *  v[i].doubleValue();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  v[i].doubleValue();	  sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Sum	15	None	replace
88	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i].doubleValue();	      out[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
89	[BUG]  [BUGGY]  v[i]  =  dataRow[i][i].doubleValue();  [CE]  array  required,  but  double  found  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  dataRow[i][i].doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][i].doubleValue();	      v[i]    =    data[row][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
90	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum;  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  maxColSum;	  sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
92	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
93	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  v.length;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  v.length;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  v.length;	      double    v    =    dataRow[i].doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	14	None	replace
94	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(v[i]  *  v[i]);	      out[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  1;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
96	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  1;	      out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
97	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i].length);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i].length);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i]  *  dataRow[i].length);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
98	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i],  sum,  dataRow[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  Math.max(v[i],  sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i],  sum,  dataRow[i]);	      v[i]    =    Math.max(v[i]    *    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	19	None	replace
99	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  data[i]  *  v[i].doubleValue();  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i].doubleValue();	  sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
100	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  -  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  -  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(v[i]  -  v[i]);	      out[i]    =    dataRow[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	11	None	replace
101	[BUG]  [BUGGY]  sum  +=  dataRows[i]  *  v[i];  [CE]  cannot  find  symbol  dataRows  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRows[i]  *  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRows[i]  *  v[i];	  sum    +=    data[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  dataRows	10	None	replace
102	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	12	None	add
103	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	12	None	add
104	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	12	None	add
105	[BUG]  [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	12	None	add
106	[BUG]  [BUGGY]  v[i]  =  data[i.doubleValue();  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  data[i.doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i.doubleValue();	      v[i]    =    data[row].doubleValue();    	non-compiled	[CE]  ']'  expected	16	None	replace
107	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	3	None	add
108	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	3	None	add
109	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
110	[BUG]  [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]      out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	3	None	add
111	[BUG]  [BUGGY]  ((  double[])dataRow[i],  v[i]).doubleValue();  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i],  v[i]).doubleValue();  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i],  v[i]).doubleValue();	      ((    double[])dataRow[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	1	None	replace
112	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  dataRow[i];	      ((    double[])dataRow[i]).doubleValue()    *    v[i];    	non-compiled	[CE]  not  a  statement	5	None	replace
113	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(v[i]  *  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +(v[i]  *  v[i]);	      v[i]    =    data[row][i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
114	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];	      ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	2	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  v[i]);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
116	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i]);	      out[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	4	4	replace
117	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  row;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  row;  [BUGGY]    sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  row;	      double    v    =    dataRow[i].doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	14	None	replace
118	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length;  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  v[i].length;	  sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  ';'  expected	9	None	replace
119	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]    final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {    [BUGGY]  sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]    }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow[i]    /    v[i];    double[]  v  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	7	None	add
