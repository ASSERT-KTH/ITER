bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  /  sum;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
2	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  /  sum;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  -  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  -  sum;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
4	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  -  sum;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  -  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  -  sum;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v.length;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
6	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v.length;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v.length;	  out[i]    =    dataRow[i]    *    sum;    	compilable	  [FE]  AssertionFailedError  	52	4	replace
7	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  /  dataRow[i];  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  /  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  /  dataRow[i];	  ((    double[])v[i]).doubleValue()    *    dataRow[i];    	non-compiled	[CE]  not  a  statement	67	None	replace
8	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  *  v[i];  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  *  v[i];	  ((    double[])v[i]).doubleValue()    *    dataRow[i];    	non-compiled	[CE]  not  a  statement	67	None	replace
9	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i]);  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    dataRow[i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
10	[BUG]  [BUGGY]  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  int  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	int  dataRow[i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    dataRow[i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ']'  expected	9	None	replace
11	[BUG]  [BUGGY]  out[i]  =  v[i].doubleValue()  +  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i].doubleValue()  +  dataRow[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i].doubleValue()  +  dataRow[i].doubleValue();	  out[i]    =    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
12	[BUG]  [BUGGY]  out[i]  =  dataData[i].doubleValue();  [CE]  cannot  find  symbol  dataData  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataData[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataData[i].doubleValue();	  out[i]    =    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  dataData	46	None	replace
13	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i],  v[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	11	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.min(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	11	4	replace
15	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	11	4	replace
16	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  dataRow[i];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    *    dataRow[i];    	non-compiled	[CE]  not  a  statement	112	None	replace
17	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i].doubleValue();  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  dataRow[i].doubleValue();	  ((    double[])dataRow[i]).doubleValue()    *    dataRow[i];    	non-compiled	[CE]  not  a  statement	112	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  out[i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    *    sum;    out[i]  =  dataRow[i]  *  sum;	  	compilable	  [FE]  AssertionFailedError  	51	4	add
19	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  out[i]  =  dataRow[i]  *  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  out[i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    out[i]  =  dataRow[i]  *  sum;	  	compilable	  [FE]  AssertionFailedError  	51	4	add
20	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  int  dataRow[i]  =  dataRow[i]  *  sum;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  int  dataRow[i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    int  dataRow[i]  =  dataRow[i]  *  sum;	  	non-compiled	[CE]  ']'  expected	51	None	add
21	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  for(int  i]  =  dataRow[i]  *  sum;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  for(int  i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    for(int  i]  =  dataRow[i]  *  sum;	  	non-compiled	[CE]  ';'  expected	51	None	add
22	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  out[i]  =  dataRow[i]  *  Sum;  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  out[i]  =  dataRow[i]  *  Sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    out[i]  =  dataRow[i]  *  Sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	51	None	add
23	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum,  v.length);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum,  v.length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum,  v.length);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	86	None	replace
24	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	86	None	replace
25	[BUG]  [BUGGY]  double[]  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double[]  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	119	None	replace
26	[BUG]  [BUGGY]  total  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  total  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  total  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	total  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  total	119	None	replace
27	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  row[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  row[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  row[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	119	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
29	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.min(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
31	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.min(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
33	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	77	4	add
34	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    int  i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  ';'  expected	77	None	add
35	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i];  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i];	  	non-compiled	[CE]  ')'  expected	77	None	add
36	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *  v[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  *  v[i].doubleValue();	  out[i]    =    dataRow[i].doubleValue()    +    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
37	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /  v[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  /  v[i].doubleValue();	  out[i]    =    dataRow[i].doubleValue()    +    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	45	None	replace
38	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	110	None	replace
39	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	110	None	replace
40	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	110	None	replace
41	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue()  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue().doubleValue()  +  1;	  double    v    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	5	None	replace
42	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *.doubleValue();	  double    v    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  v[i]  =  dataRow[i][dataRow.length].doubleValue();  [CE]  array  required,  but  double  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][dataRow.length].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][dataRow.length].doubleValue();	  v[i]    =    dataRow[row][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
44	[BUG]  [BUGGY]  sum  +=  dataRow[i].length  *  v[i];  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i].length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i].length  *  v[i];	  sum    +=    dataRow.length    *    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	31	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  v.length  *  dataRow[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  v.length  *  dataRow[i];	  sum    +=    dataRow.length    *    v[i];    	compilable	  [FE]  AssertionFailedError  	31	4	replace
46	[BUG]  [BUGGY]  sum  +=  v.length  *  dataRow[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  v.length  *  dataRow[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  v.length  *  dataRow[i];	  sum    +=    dataRow.length    *    v[i];    	compilable	  [FE]  AssertionFailedError  	31	4	replace
47	[BUG]  [BUGGY]  double  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	81	None	replace
48	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  row[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  row[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  row[i];	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	81	None	replace
49	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  /  row;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  /  row;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  /  row;	  double    v    =    dataRow[i].doubleValue()    *    row;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	117	None	replace
50	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  row  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  row  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  row  +  1;	  double    v    =    dataRow[i].doubleValue()    *    row;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	117	None	replace
51	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  sum;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  sum;	  double    v    =    dataRow[i].doubleValue()    *    row;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	117	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum    +=    dataRow.length    *    v[i];    sum  +=  dataRow.length  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	30	4	add
53	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  sum  +=  dataRow.length  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    sum  +=  dataRow.length  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	30	4	add
54	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  Sum  +=  dataRow.length  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  Sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    Sum  +=  dataRow.length  *  v[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	30	None	add
55	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  total  +=  dataRow.length  *  v[i];  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  total  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    total  +=  dataRow.length  *  v[i];	  	non-compiled	[CE]  cannot  find  symbol  total	30	None	add
56	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  double  sum  +=  dataRow.length  *  v[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  double  sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    double  sum  +=  dataRow.length  *  v[i];	  	non-compiled	[CE]  ';'  expected	30	None	add
57	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  sum  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	102	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  v[i]  *  dataRow[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	compilable	  [FE]  AssertionFailedError  	102	4	replace
59	[BUG]  [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  *  dataRow[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	compilable	  [FE]  AssertionFailedError  	102	4	replace
60	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /=  dataRow[i]  *  v[i];  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue()    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	74	None	replace
61	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  +=  dataRow[i]  *  v[i];  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue()    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	74	None	replace
62	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  v[i]  *  dataRow[i];  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  v[i]  *  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +=  v[i]  *  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	74	None	replace
63	[BUG]  [BUGGY]  for(int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
64	[BUG]  [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  *  dataRow[i];  for(int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
65	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  lu[i];  for(int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
66	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  sum[i].length;  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  *  sum[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  sum[i].length;	  Sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	replace
67	[BUG]  [BUGGY]  Sum  +=  data[i]  *  v[i].length;  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  data[i]  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  data[i]  *  v[i].length;	  Sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	replace
68	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  /  v[i].length;  [CE]  cannot  find  symbol  Sum  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  /  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  /  v[i].length;	  Sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	replace
69	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    Sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	38	None	replace
70	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    Sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	38	None	replace
71	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMaxSum();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMaxSum();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i].getMaxSum();	  sum    +=    dataRow[i]    /    v[i].getMaxColSum();    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
72	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i].getMaxColSum();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i].getMaxColSum();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i].getMaxColSum();	  sum    +=    dataRow[i]    /    v[i].getMaxColSum();    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
73	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMinColSum();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i].getMinColSum();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i].getMinColSum();	  sum    +=    dataRow[i]    /    v[i].getMaxColSum();    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
74	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  *  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  *  1;	  v[i]    =    data[row][i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
75	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue().doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue().doubleValue();	  v[i]    =    data[row][i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
76	[BUG]  [BUGGY]  double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	41	None	replace
77	[BUG]  [BUGGY]  SummaryData[]  dataRow  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  SummaryData[]  dataRow  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	SummaryData[]  dataRow  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
78	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  *  sum;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  *  sum;	  v[i]    =    data[row][i].doubleValue()    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
79	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  maxColSum;  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  maxColSum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  maxColSum;	  v[i]    =    data[row][i].doubleValue()    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
80	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  sum.length;  [CE]  double  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  sum.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  sum.length;	  v[i]    =    data[row][i].doubleValue()    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
81	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length  +  1;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  v[i].length  +  1;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
82	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i],  v[i].length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  *  v[i],  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i],  v[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
83	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].length  -  1;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  v[i].length  -  1;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i];  v[i]  =  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  *  v[i];  v[i]  =  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
85	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  v[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i];  v[i]  =  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i];  v[i]  =  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
87	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
89	[BUG]  [BUGGY]  v[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    v[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	83	4	replace
90	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  +  1;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  +  1;	  ((    double[])v[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	57	None	replace
91	[BUG]  [BUGGY]  ((  double[])data[i]).doubleValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])data[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])data[i]).doubleValue();	  ((    double[])v[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
92	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue();  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    ((    double[])v[i]).doubleValue();    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  inconvertible  types	40	None	replace
93	[BUG]  [BUGGY]  sum  +=  data[i]  /  v[i];  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    ((    double[])v[i]).doubleValue();    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	40	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i]  *  sum,  dataRow[i]);	  v[i]    =    Math.max(dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	22	4	replace
95	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  sum,  dataRow[i]);	  v[i]    =    Math.max(dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	22	4	replace
96	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i]  +  1;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  v[i]  +  1;	  ((    double[])dataRow[i]).doubleValue()    /    v[i];    	non-compiled	[CE]  not  a  statement	66	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  -=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  -=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	37	4	replace
98	[BUG]  [BUGGY]  sum  -=  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  -=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  -=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	37	4	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	21	4	replace
100	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	21	4	replace
101	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	21	None	replace
102	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	36	4	add
104	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	36	4	add
105	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	36	None	add
106	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  }  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	36	None	add
107	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  total  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    total  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  total	36	None	add
108	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	36	None	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  2;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  2;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
110	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  2;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  2;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
111	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  v[i].doubleValue();	  sum    +=    dataRow[i]    *    v[i],    maxColSum.doubleValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
112	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row,  maxColSum.doubleValue();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row,  maxColSum.doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  row,  maxColSum.doubleValue();	  sum    +=    dataRow[i]    *    v[i],    maxColSum.doubleValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[0]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[0]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
114	[BUG]  [BUGGY]  out[0]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[0]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[0]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    out[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	13	4	replace
115	[BUG]  [BUGGY]  sum  +=  v  *  dataRow[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  v  *  dataRow[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  v  *  dataRow[i];	  sum    +=    dataRow    *    v[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	84	None	replace
116	[BUG]  [BUGGY]  sum  +=  dataRow  *  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  v[i].length;	  sum    +=    dataRow    *    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
117	[BUG]  [BUGGY]  sum  +=  data[i]  /  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  /  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  /  v[i].length;	  sum    +=    dataRow[i]    /    v[i].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    *    v[i]    +    sum;    out[i]  =  dataRow[i]  *  v[i]  +  sum;	  	compilable	  [FE]  AssertionFailedError  	55	4	add
119	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  out[i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    out[i]  =  dataRow[i]  *  v[i]  +  sum;	  	compilable	  [FE]  AssertionFailedError  	55	4	add
120	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  int  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  int  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    int  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;	  	non-compiled	[CE]  ']'  expected	55	None	add
121	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i]  =  dataRow[i]  *  v[i]  +  sum;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    for(int  i]  =  dataRow[i]  *  v[i]  +  sum;	  	non-compiled	[CE]  ';'  expected	55	None	add
122	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  i]  =  dataRow[i]  *  v[i]  +  sum;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    i]  =  dataRow[i]  *  v[i]  +  sum;	  	non-compiled	[CE]  not  a  statement	55	None	add
123	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  nCols;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  nCols;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  nCols;	  sum    +=    dataRow[i]    *    v[i],    maxColSum;    	non-compiled	[CE]  ';'  expected	90	None	replace
124	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  maxColSum  +  1;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  maxColSum  +  1;	  sum    +=    dataRow[i]    *    v[i],    maxColSum;    	non-compiled	[CE]  ';'  expected	90	None	replace
125	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  row;	  sum    +=    dataRow[i]    *    v[i],    maxColSum;    	non-compiled	[CE]  ';'  expected	90	None	replace
126	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row,  maxColSum;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  row,  maxColSum;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  row,  maxColSum;	  sum    +=    dataRow[i]    *    v[i],    maxColSum;    	non-compiled	[CE]  ';'  expected	90	None	replace
127	[BUG]  [BUGGY]  ((  double[])dataRow[i],  dataRow[i]).doubleValue();  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i],  dataRow[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i],  dataRow[i]).doubleValue();	  ((    double[])dataRow[i],    v[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	111	None	replace
128	[BUG]  [BUGGY]  ((  double[])dataRow[i],  data[i]).doubleValue();  [CE]  ')'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i],  data[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i],  data[i]).doubleValue();	  ((    double[])dataRow[i],    v[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	111	None	replace
129	[BUG]  [BUGGY]  ((  double[])v[i],  dataRow[i]).doubleValue();  [CE]  ')'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i],  dataRow[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i],  dataRow[i]).doubleValue();	  ((    double[])dataRow[i],    v[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	111	None	replace
130	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i.length].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i.length].doubleValue();	  sum    +=    dataRow[i]    /    v[i].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	64	None	replace
131	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  /  v[i].doubleValue();  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  /  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  /  v[i].doubleValue();	  sum    +=    dataRow[i]    /    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Sum	64	None	replace
132	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  sum,  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  sum,  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  sum,  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i],    sum);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	43	None	replace
133	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i);  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i);	  out[i]    =    Math.max(sum,    dataRow[i],    sum);    	non-compiled	[CE]  ']'  expected	43	None	replace
134	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    total    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	39	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	dataRow[i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	78	4	replace
136	[BUG]  [BUGGY]  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	dataRow[i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]    =    Math.max(sum,    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	78	4	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	72	4	replace
138	[BUG]  [BUGGY]  dataRow[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	72	4	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	72	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	72	None	replace
141	[BUG]  [BUGGY]  data[i]  =  data[i].doubleValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  data[i]  =  data[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  data[i].doubleValue();	  data[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
142	[BUG]  [BUGGY]  data[i]  =  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  data[i]  =  dataRow[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  dataRow[i].doubleValue();	  data[i]    =    data[row].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
143	[BUG]  [BUGGY]  data[i]  =  v[row].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  data[i]  =  v[row].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  v[row].doubleValue();	  data[i]    =    data[row].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
144	[BUG]  [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nRows;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	105	None	replace
145	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(sum,  dataRow[i]  *  sum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	replace
146	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  sum);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  sum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	2	replace
147	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  maxColSum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	92	None	replace
148	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  totalColSum);  [CE]  cannot  find  symbol  totalColSum  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  totalColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  totalColSum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	non-compiled	[CE]  cannot  find  symbol  totalColSum	92	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  sum  +  1;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
150	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  sum  +  1;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
151	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  maxColSum;  [CE]  cannot  find  symbol  maxColSum  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  maxColSum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  maxColSum;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	non-compiled	[CE]  cannot  find  symbol  maxColSum	56	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  row;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  row;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
153	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  row;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  row;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  row;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
154	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  +  1);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
155	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  -  1);  [CE]  double  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i].length  -  1);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
156	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length,  sum);  [CE]  double  cannot  be  dereferenced  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i].length,  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i].length,  sum);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
157	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  /  1;	  out[i]    =    dataRow[i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
158	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  *  1;	  out[i]    =    dataRow[i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
160	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	12	4	add
161	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	12	None	add
162	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    int  i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ';'  expected	12	None	add
163	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  int  dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  int  dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    int  dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ']'  expected	12	None	add
164	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  v.length;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  v.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  v.length;	  double    v    =    dataRow[i].doubleValue()    +    v.length;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	93	None	replace
165	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  row;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  row;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  row;	  double    v    =    dataRow[i].doubleValue()    +    v.length;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	93	None	replace
166	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
167	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  *=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  *=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  sum  *=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
168	[BUG]  [BUGGY]  ((  double[])nRows[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])nRows[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])nRows[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
169	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
170	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
171	[BUG]  [BUGGY]  for(int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
172	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  +  1;  sum  +=  dataRow[i]  *  v[i];	  ((    double[])v[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	59	None	replace
173	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  /  2;  sum  +=  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  /  2;  sum  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  /  2;  sum  +=  dataRow[i]  *  v[i];	  ((    double[])v[i]).doubleValue();    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	59	None	replace
174	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[0];  i]  =  dataRow[i]  *  v[0];  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[0];  i]  =  dataRow[i]  *  v[0];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[0];  i]  =  dataRow[i]  *  v[0];	          out[i]    =    dataRow[i]    *    v[i];    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	73	None	replace
175	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1;  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  +  1;	  v[i]    =    dataRow[i.doubleValue();    	non-compiled	[CE]  ']'  expected	35	None	replace
176	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1];  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  +  1];	  v[i]    =    dataRow[i.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	35	None	replace
177	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1);  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  +  1);	  v[i]    =    dataRow[i.doubleValue();    	non-compiled	[CE]  ']'  expected	35	None	replace
178	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  nCols;  [CE]  ']'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  nCols;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  *  nCols;	  v[i]    =    dataRow[i.doubleValue();    	non-compiled	[CE]  ']'  expected	35	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	25	4	replace
180	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]  +  1);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	25	4	replace
181	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  sum);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	25	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	25	4	replace
183	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	25	4	replace
184	[BUG]  [BUGGY]  int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	70	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dataRows.length;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  dataRows.length;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  dataRows.length;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	70	None	replace
186	[BUG]  [BUGGY]  out[i]  -=  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  -=  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  -=  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	70	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
188	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
189	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  Sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    Sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	82	None	add
190	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  total  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  total  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    total  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol  total	82	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
192	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
194	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	82	3	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
196	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
197	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    int  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ']'  expected	20	None	add
198	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ';'  expected	20	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
200	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	20	4	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
202	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
203	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  int  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  int  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    int  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	non-compiled	[CE]  ']'  expected	91	None	add
204	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    for(int  i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	non-compiled	[CE]  ';'  expected	91	None	add
205	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  v[i]  =  Math.max(sum,  datasetRow[i]  *  dataRow[i]);  [CE]  cannot  find  symbol  datasetRow  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  v[i]  =  Math.max(sum,  datasetRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    v[i]  =  Math.max(sum,  datasetRow[i]  *  dataRow[i]);	  	non-compiled	[CE]  cannot  find  symbol  datasetRow	91	None	add
206	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  maxColSum;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  maxColSum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  maxColSum;	  double    v    =    dataRow[i].doubleValue()    +    sum;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	6	None	replace
207	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  sum  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  sum  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  sum  +  1;	  double    v    =    dataRow[i].doubleValue()    +    sum;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	6	None	replace
208	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i]  *  v[i],  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
209	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i],  sum);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  v[i],  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	2	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
211	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  sum);  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
212	[BUG]  [BUGGY]  v[i]  =  Math.min(sum,  dataRow[i]  *  v[i],  sum);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.min(sum,  dataRow[i]  *  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.min(sum,  dataRow[i]  *  v[i],  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	19	None	replace
213	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i].length;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow.length  *  v[i].length;	  sum    +=    data[i]    *    v[i].length;    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
214	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  sum;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  sum;	  ((    double[])dataRow[i]).doubleValue()    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	75	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  out[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    *    v[i]    +    1;    out[i]  =  dataRow[i]  *  v[i]  +  1;	  	compilable	  [FE]  AssertionFailedError  	95	4	add
216	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  out[i]  =  dataRow[i]  *  v[i]  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  out[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    out[i]  =  dataRow[i]  *  v[i]  +  1;	  	compilable	  [FE]  AssertionFailedError  	95	4	add
217	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  dataRow[i]  =  dataRow[i]  *  v[i]  +  1;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  dataRow[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    int  dataRow[i]  =  dataRow[i]  *  v[i]  +  1;	  	non-compiled	[CE]  ']'  expected	95	None	add
218	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  for(int  i]  =  dataRow[i]  *  v[i]  +  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  for(int  i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    for(int  i]  =  dataRow[i]  *  v[i]  +  1;	  	non-compiled	[CE]  ';'  expected	95	None	add
219	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  i]  =  dataRow[i]  *  v[i]  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    i]  =  dataRow[i]  *  v[i]  +  1;	  	non-compiled	[CE]  not  a  statement	95	None	add
220	[BUG]  [BUGGY]  sum  +=  dataRow  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow  *  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  v[i].doubleValue();	  sum    +=    data[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	99	None	replace
221	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow.length  *  v[i].doubleValue();	  sum    +=    data[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	99	None	replace
222	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  -  1);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  -  1);	  v[i]    =    dataRow[i.doubleValue());    	non-compiled	[CE]  ']'  expected	69	None	replace
223	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  nCols);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  nCols);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  *  nCols);	  v[i]    =    dataRow[i.doubleValue());    	non-compiled	[CE]  ']'  expected	69	None	replace
224	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  2);  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  +  2);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  +  2);	  v[i]    =    dataRow[i.doubleValue());    	non-compiled	[CE]  ']'  expected	69	None	replace
225	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  *(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  *(v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  *(v[i]  *  v[i]);	  v[i]    =    data[row][i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
226	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  /(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  /(v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  /(v[i]  *  v[i]);	  v[i]    =    data[row][i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
227	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(dataRow[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +(dataRow[i]  *  v[i]);	  v[i]    =    data[row][i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
228	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i.length  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i.length  -  1].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i.length  -  1].doubleValue();	  sum    +=    dataRow[i]    *    v[i.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
229	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  *  v[i.length].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i.length].doubleValue();	  sum    +=    dataRow[i]    *    v[i.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
230	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue().length  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue().length  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue().length  +  1;	  double    v    =    dataRow[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	4	None	replace
231	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  1;	  double    v    =    dataRow[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	4	None	replace
232	[BUG]  [BUGGY]  out[i]  =  v[i]  *  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  *  dataRow[i].doubleValue();	  out[i]    =    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
233	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i].doubleValue()  +  1;	  out[i]    =    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
234	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  sum;  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  sum;	  ((    double[])dataRow[i]).doubleValue()    *    sum;    	non-compiled	[CE]  not  a  statement	65	None	replace
235	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  1;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  sum  +  1;	  ((    double[])dataRow[i]).doubleValue()    *    sum;    	non-compiled	[CE]  not  a  statement	65	None	replace
236	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  maxColSum;  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  maxColSum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  maxColSum;	  ((    double[])dataRow[i]).doubleValue()    *    sum;    	non-compiled	[CE]  not  a  statement	65	None	replace
237	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	108	None	replace
238	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
239	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	108	None	replace
240	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  v[i].length);	  v[i]    =    Math.max(v[i]    *    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
241	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i].length,  sum);  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i].length,  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i]  *  dataRow[i].length,  sum);	  v[i]    =    Math.max(v[i]    *    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
242	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  dataRow[i].length);	  v[i]    =    Math.max(v[i]    *    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  /  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  v[i]  /  dataRow[i];	  out[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	54	4	replace
244	[BUG]  [BUGGY]  out[i]  =  v[i]  /  dataRow[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  /  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  /  dataRow[i];	  out[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	54	4	replace
245	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  /  v[i].doubleValue();	  out[i]    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	54	None	replace
246	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i].length);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	116	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  v[i]  +  1);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
248	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i]  +  1);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
249	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum,  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum,  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum,  v[i]);	  out[i]    =    Math.max(dataRow[i],    sum);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	27	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  sum  +  1);	  out[i]    =    Math.max(dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	27	4	replace
251	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum  +  1);	  out[i]    =    Math.max(dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	27	4	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	7	4	add
253	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	7	4	add
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.min(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	7	4	add
255	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.min(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.min(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	7	4	add
256	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  int  i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    int  i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  ';'  expected	7	None	add
257	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(um,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [CE]  cannot  find  symbol  um  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(um,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(um,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  cannot  find  symbol  um	7	None	add
258	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  *  sum;  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  dataRow[i]  *  sum;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  *  sum;	  Sum.sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	32	None	replace
259	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  /  v[i];	  Sum.sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	32	None	replace
260	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i],  sum;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i],  sum;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  *  v[i],  sum;	  Sum.sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	32	None	replace
261	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i],  v[i]);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	98	None	replace
262	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i],  sum);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	98	None	replace
263	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum,  data[i]);  [CE]  no  suitable  method  found  for  max(double,double,double[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum,  data[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i],  sum,  data[i]);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[])	98	None	replace
264	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum,  dataRow[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i],  sum,  dataRow[i]);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	98	None	replace
265	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  sum  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	103	None	replace
266	[BUG]  [BUGGY]  v[i]  =  data[i.doubleValue()  +  1];  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[i.doubleValue()  +  1];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i.doubleValue()  +  1];	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
267	[BUG]  [BUGGY]  v[i]  =  data[i.doubleValue()  +  1;  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[i.doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i.doubleValue()  +  1;	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  ']'  expected	106	None	replace
268	[BUG]  [BUGGY]  v[i]  =  data[row.doubleValue();  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row.doubleValue();	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  ']'  expected	106	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  out[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    Math.max(dataRow[i],    sum);    out[i]  =  Math.max(dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	26	4	add
270	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  out[i]  =  Math.max(dataRow[i],  sum);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  out[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    out[i]  =  Math.max(dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	26	4	add
271	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  dataRow[i]  =  Math.max(dataRow[i],  sum);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  dataRow[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    int  dataRow[i]  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  ']'  expected	26	None	add
272	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i]  =  Math.max(dataRow[i],  sum);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    for(int  i]  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  ';'  expected	26	None	add
273	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  i]  =  Math.max(dataRow[i],  sum);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    int  i]  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  ';'  expected	26	None	add
274	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  out[i]  =  Math.max(dataRow[i],  Sum);  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  out[i]  =  Math.max(dataRow[i],  Sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    out[i]  =  Math.max(dataRow[i],  Sum);	  	non-compiled	[CE]  cannot  find  symbol  Sum	26	None	add
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  out[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    Math.max(dataRow[i],    v[i]);    out[i]  =  Math.max(dataRow[i],  v[i]);	  	compilable	  [FE]  AssertionFailedError  	115	3	add
276	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  out[i]  =  Math.max(dataRow[i],  v[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  out[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    out[i]  =  Math.max(dataRow[i],  v[i]);	  	compilable	  [FE]  AssertionFailedError  	115	3	add
277	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  dataRow[i]  =  Math.max(dataRow[i],  v[i]);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  dataRow[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    int  dataRow[i]  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  ']'  expected	115	None	add
278	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  i]  =  Math.max(dataRow[i],  v[i]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    int  i]  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  ';'  expected	115	None	add
279	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i]  =  Math.max(dataRow[i],  v[i]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    for(int  i]  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  ';'  expected	115	None	add
280	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  ((  double[])dataRow[i],  v[i]).doubleValue();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  ((  double[])dataRow[i],  v[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    ((  double[])dataRow[i],  v[i]).doubleValue();	  	non-compiled	[CE]  ')'  expected	115	None	add
281	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  +  dataRow[i];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  +  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  +  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    +    v[i];    	non-compiled	[CE]  not  a  statement	76	None	replace
282	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  1;  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  1;	  ((    double[])dataRow[i]).doubleValue()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
283	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  1;  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  1;	  ((    double[])dataRow[i]).doubleValue()    +    1;    	non-compiled	[CE]  not  a  statement	58	None	replace
284	[BUG]  [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.min(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.min(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  not  a  statement	79	None	replace
285	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /(v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  /(v[i]  *  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
286	[BUG]  [BUGGY]  out[i]  =  v[i].doubleValue()  +(dataRow[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i].doubleValue()  +(dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i].doubleValue()  +(dataRow[i]  *  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
287	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *(v[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *(v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  *(v[i]  *  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
288	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  *  1;	  v[i]    =    dataRow[i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None	replace
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  out[i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    /    v[i];    out[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	53	4	add
290	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  out[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  out[i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    out[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	53	4	add
291	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  dataRow[i]  =  dataRow[i]  /  v[i];  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  dataRow[i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    int  dataRow[i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  ']'  expected	53	None	add
292	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  for(int  i]  =  dataRow[i]  /  v[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  for(int  i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    for(int  i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  ';'  expected	53	None	add
293	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  i]  =  dataRow[i]  /  v[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    int  i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  ';'  expected	53	None	add
294	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])dataRow[i]).doubleValue();  [CE]  inconvertible  types  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])dataRow[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    ((  double[])dataRow[i]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	53	None	add
295	[BUG]  [BUGGY]  int  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  int  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	int  dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ']'  expected	14	None	replace
296	[BUG]  [BUGGY]  double[]  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double[]  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double[]  dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ']'  expected	14	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i]  *  sum,  v[i]);	  v[i]    =    Math.max(dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
298	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  v[i]);  [FE]  AssertionFailedError  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  sum,  v[i]);	  v[i]    =    Math.max(dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
299	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  data[i]);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  sum,  data[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  sum,  data[i]);	  v[i]    =    Math.max(dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	17	None	replace
300	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  sum[i].doubleValue();  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  *  sum[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  sum[i].doubleValue();	  Sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Sum	87	None	replace
301	[BUG]  [BUGGY]  Sum  +=  data[i]  *  v[i].doubleValue();  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  data[i]  *  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  data[i]  *  v[i].doubleValue();	  Sum    +=    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Sum	87	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	24	4	add
303	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	compilable	  [FE]  AssertionFailedError  	24	4	add
304	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ';'  expected	24	None	add
305	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ';'  expected	24	None	add
306	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i]  +  dataRow[i];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i]  +  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  *  dataRow[i]  +  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
307	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i]  +  v[i];  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i]  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i]  +  v[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
308	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i]  +  dataRow[i];  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  /  v[i]  +  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  /  v[i]  +  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
309	[BUG]  [BUGGY]  Sum  +=  dataRow  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow  *  v[i];	  sum    +=    dataRow    *    data[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	85	None	replace
310	[BUG]  [BUGGY]  sum  +=  data[i]  *  row;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  *  row;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  row;	  sum    +=    dataRow    *    data[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
311	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  dataRow;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  dataRow;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  dataRow;	  sum    +=    dataRow    *    data[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
312	[BUG]  [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  v[i]  *  dataRow[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	104	None	replace
313	[BUG]  [BUGGY]  out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	104	None	replace
314	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue();  sum  +=  dataRow[i],  *  v[i];	  ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i],    *    v[i];    	non-compiled	[CE]  ';'  expected	114	None	replace
315	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  maxColSum;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  maxColSum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  *  maxColSum;	  ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i],    *    v[i];    	non-compiled	[CE]  ';'  expected	114	None	replace
316	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /(v[i]  -  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  /(v[i]  -  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  /(v[i]  -  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    -    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
317	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *(v[i]  -  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  *(v[i]  -  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  *(v[i]  -  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    -    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
318	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  sum);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	23	None	replace
319	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  maxColSum);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i]);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	23	None	replace
320	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  total);  [CE]  cannot  find  symbol  total  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  total);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  total);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i]);    	non-compiled	[CE]  cannot  find  symbol  total	23	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	71	4	add
322	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	71	4	add
323	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	71	None	add
324	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ';'  expected	71	None	add
325	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    for(int  i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  ';'  expected	71	None	add
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	71	4	add
327	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	  	compilable	  [FE]  AssertionFailedError  	71	4	add
328	[BUG]  [BUGGY]  v[i]  =  data[i][i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[i][i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i][i].doubleValue();	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	89	None	replace
329	[BUG]  [BUGGY]  DataRow[]  v[i]  =  dataRow[i][i].doubleValue();  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  DataRow[]  v[i]  =  dataRow[i][i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	DataRow[]  v[i]  =  dataRow[i][i].doubleValue();	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  ']'  expected	89	None	replace
330	[BUG]  [BUGGY]  v[i]  =  dataRow[i][i].doubleValue()  +  1;  [CE]  array  required,  but  double  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][i].doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][i].doubleValue()  +  1;	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	89	None	replace
331	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  v.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  v.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  *  v.doubleValue();	  v[i]    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
332	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  sum.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  sum.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  +  sum.doubleValue();	  v[i]    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
334	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
335	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  int  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  int  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    int  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);	  	non-compiled	[CE]  ']'  expected	18	None	add
336	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(v[i]  *  dataRow[i],  Sum);  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(v[i]  *  dataRow[i],  Sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    v[i]  =  Math.max(v[i]  *  dataRow[i],  Sum);	  	non-compiled	[CE]  cannot  find  symbol  Sum	18	None	add
337	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length  -  1);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v.length  -  1);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	44	None	replace
338	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  2);  [CE]  double  cannot  be  dereferenced  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  2);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length  -  2);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
339	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  1,  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length  -  1,  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length  -  1,  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
340	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i]  +  v[i];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  dataRow[i]  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  dataRow[i]  +  v[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
341	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v[0]  +  dataRow[i];  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v[0]  +  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  v[0]  +  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
342	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
343	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow.doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow.doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  dataRow.doubleValue();	  sum    +=    dataRow[i]    *    v[i],    maxColSum.doubleValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
344	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow[i].doubleValue();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  dataRow[i].doubleValue();	  sum    +=    dataRow[i]    *    v[i],    maxColSum.doubleValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
345	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  columnDimension.doubleValue();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  columnDimension.doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  columnDimension.doubleValue();	  sum    +=    dataRow[i]    *    v[i],    maxColSum.doubleValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
346	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v.length,  sum);  [CE]  no  suitable  method  found  for  max(double,int,double)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v.length,  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v.length,  sum);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double)	86	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v.length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  v.length);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	compilable	  [FE]  AssertionFailedError  	86	4	replace
348	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v.length);  [FE]  AssertionFailedError  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v.length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v.length);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	compilable	  [FE]  AssertionFailedError  	86	4	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  /  v[i]  +  1;	  out[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	54	4	replace
350	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i]  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  /  v[i]  +  1;	  out[i]    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	54	4	replace
351	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nRows;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	105	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  out[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  /  out[i];	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	81	4	replace
353	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  out[i];  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  out[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  out[i];	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	81	4	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  /  row;	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	81	4	replace
355	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  row;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  row;	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	compilable	  [FE]  AssertionFailedError  	81	4	replace
356	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  2;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  2;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  2;	  v[i]    =    data[row][i].doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	48	None	replace
357	[BUG]  [BUGGY]  Sum[]  v  =  dataRow[i];  sum  +=  v[i]  /  v[i];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum[]  v  =  dataRow[i];  sum  +=  v[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum[]  v  =  dataRow[i];  sum  +=  v[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    ((    double[])v[i]).doubleValue();    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
358	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  maxColSum);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	109	None	replace
359	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	25	None	replace
360	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  0);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  0);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  0);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	25	None	replace
361	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  v.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  v.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  +  v.doubleValue();	  v[i]    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
362	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  dataRow.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  *  dataRow.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  *  dataRow.doubleValue();	  v[i]    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
363	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  OutputStream  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  OutputStream  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    OutputStream  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ']'  expected	24	None	add
364	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  not  a  statement	24	None	add
365	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    sum  +=  dataRow[i]  /  v[i];  Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        sum    +=    dataRow[i]    /    v[i];    Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
366	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(sum  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(sum  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(sum  *  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
367	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  *  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
368	[BUG]  [BUGGY]  data[i]  =  dataRow.doubleValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  data[i]  =  dataRow.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  dataRow.doubleValue();	  data[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
369	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i],  v[i]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  Math.min(sum,  dataRow[i],  v[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
370	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i],  v[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	92	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	3	replace
372	[BUG]  [BUGGY]  v[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.min(sum,  dataRow[i]  *  v[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	3	replace
373	[BUG]  [BUGGY]  ((  double[])dataRow[i],  v[i]).doubleValue()  +  1;  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i],  v[i]).doubleValue()  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i],  v[i]).doubleValue()  +  1;	  ((    double[])dataRow[i],    v[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	111	None	replace
374	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  sum.doubleValue();  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  *  sum.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  *  sum.doubleValue();	  double    v    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	5	None	replace
375	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    total    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	39	None	replace
376	[BUG]  [BUGGY]  SumMetrics  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  SumMetrics  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	SumMetrics  sum  +=  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    total    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  ';'  expected	39	None	replace
377	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  dataRow[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  dataRow[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  dataRow[i].length);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
378	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v[i].length);	  out[i]    =    Math.max(sum,    dataRow[i],    v[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
379	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(data[i]  *  dataRow[i],  sum);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i]  *  dataRow[i],  sum);  v[i]  =  Math.max(data[i]  *  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    v[i]  =  Math.max(data[i]  *  dataRow[i],  sum);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	add
380	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  int  i]  =  dataRow[i]  *  v[i]  +  sum;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  int  i]  =  dataRow[i]  *  v[i]  +  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    int  i]  =  dataRow[i]  *  v[i]  +  sum;	  	non-compiled	[CE]  ';'  expected	55	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v.length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	sum  +=  dataRow[i]  *  v.length;	  sum    +=    dataRow.length    *    v[i];    	compilable	  [FE]  AssertionFailedError  	31	4	replace
382	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v.length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v.length;	  sum    +=    dataRow.length    *    v[i];    	compilable	  [FE]  AssertionFailedError  	31	4	replace
383	[BUG]  [BUGGY]  v[i]  =  dataRow[i][i],  sum.doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][i],  sum.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][i],  sum.doubleValue();	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
384	[BUG]  [BUGGY]  v[i]  =  dataRow[i][j].doubleValue();  [CE]  cannot  find  symbol  j  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][j].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][j].doubleValue();	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  j	89	None	replace
385	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  *  v[i];	  sum    +=    dataRow[i]    /    v[i];    Sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	38	None	replace
386	[BUG]  [BUGGY]  sum  +=  dataRow  *  dataRow[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow  *  dataRow[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  dataRow[i];	  sum    +=    dataRow    *    v[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	84	None	replace
387	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  dataRow  =  Math.max(dataRow[i],  sum);  [CE]  variable  dataRow  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  dataRow  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    int  dataRow  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  variable  dataRow  is  already  defined  in  method  operate(double[])	26	None	add
388	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  OutputStream  out[i]  =  Math.max(dataRow[i],  sum);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  OutputStream  out[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    OutputStream  out[i]  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  ']'  expected	26	None	add
389	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  i]  =  Math.max(dataRow[i],  sum);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    i]  =  Math.max(dataRow[i],  sum);	  	non-compiled	[CE]  not  a  statement	26	None	add
390	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i],  v[i]);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]);  i]  =  Math.max(sum,  dataRow[i],  v[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  not  a  statement	79	None	replace
391	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  lu[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nRows;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	103	None	replace
392	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  int  i]  =  dataRow[i]  *  sum;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  int  i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    int  i]  =  dataRow[i]  *  sum;	  	non-compiled	[CE]  ';'  expected	51	None	add
393	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  i]  =  dataRow[i]  *  sum;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    i]  =  dataRow[i]  *  sum;	  	non-compiled	[CE]  not  a  statement	51	None	add
394	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  v[i.length].doubleValue();  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  *  v[i.length].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  v[i.length].doubleValue();	  sum    +=    dataRow[i]    *    v[i.length].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  Sum	62	None	replace
395	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  v[i]  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  v[i]  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    v[i]  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];	  	non-compiled	[CE]  double  cannot  be  dereferenced	30	None	add
396	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  v[i]  =  dataRow[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  v[i]  =  dataRow[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    v[i]  =  dataRow[i].doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	30	None	add
397	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  1;  sum  +=  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  1;  sum  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  1;  sum  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue()    +    1;    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	60	None	replace
398	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  i]  =  Math.max(dataRow[i],  v[i]);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    i]  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  not  a  statement	115	None	add
399	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  dataRow  =  Math.max(dataRow[i],  v[i]);  [CE]  variable  dataRow  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  int  dataRow  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    int  dataRow  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  variable  dataRow  is  already  defined  in  method  operate(double[])	115	None	add
400	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  ((  double[][])dataRow[i],  v[i]).doubleValue();  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  ((  double[][])dataRow[i],  v[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    ((  double[][])dataRow[i],  v[i]).doubleValue();	  	non-compiled	[CE]  ')'  expected	115	None	add
401	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	108	None	replace
402	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	108	None	replace
403	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	108	None	replace
404	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  i]  =  dataRow[i]  *  v[i]  +  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    int  i]  =  dataRow[i]  *  v[i]  +  1;	  	non-compiled	[CE]  ';'  expected	95	None	add
405	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  ((  double[])dataRow[i]  *  v[i]  +  1);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  ((  double[])dataRow[i]  *  v[i]  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    ((  double[])dataRow[i]  *  v[i]  +  1);	  	non-compiled	[CE]  not  a  statement	95	None	add
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i],  sum  *  dataRow[i]);	  v[i]    =    Math.max(dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	22	4	replace
407	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i],  sum  *  dataRow[i]);	  v[i]    =    Math.max(dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	22	4	replace
408	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow[i].length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  dataRow[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  dataRow[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
409	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  v[i],  v[i].length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  v[i],  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  v[i],  v[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
410	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[0],  v[i].length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[0],  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[0],  v[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
411	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  dataRow  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  dataRow  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  dataRow  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
412	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  out  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  out  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  out  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
413	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  *  v[i.length  -  1].length;  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  *  v[i.length  -  1].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  *  v[i.length  -  1].length;	  Sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	14	4	replace
415	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	14	4	replace
416	[BUG]  [BUGGY]  v[i]  =  dataRow[i][nCols].doubleValue();  [CE]  array  required,  but  double  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][nCols].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][nCols].doubleValue();	  v[i]    =    dataRow[row][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
417	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    for(int  i]  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  ';'  expected	77	None	add
418	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  v.length);  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i],  v.length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i],  v.length);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	98	None	replace
419	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i.length].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i.length].doubleValue();	  out[i]    =    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
420	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  lu[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	104	None	replace
421	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i].length);  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i].length);	  v[i]    =    Math.max(v[i]    *    dataRow[i].length);    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
422	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	110	None	replace
423	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  no  suitable  method  found  for  max(double,double,int)  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v.length);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,int)	110	None	replace
424	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]                  AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	110	None	replace
425	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v.length;  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  v.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  v.length;	  ((    double[])dataRow[i]).doubleValue()    *    sum;    	non-compiled	[CE]  not  a  statement	65	None	replace
426	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i];  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  *  sum  +  dataRow[i];	  ((    double[])dataRow[i]).doubleValue()    *    sum;    	non-compiled	[CE]  not  a  statement	65	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1L;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  1L;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
428	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1L;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  1L;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
429	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  -  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  -  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(dataRow[i]  -  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    -    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	53	3	add
431	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];	  	compilable	  [FE]  AssertionFailedError  	53	3	add
432	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])dataRow[i]  /  v[i]);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])dataRow[i]  /  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    ((  double[])dataRow[i]  /  v[i]);	  	non-compiled	[CE]  not  a  statement	53	None	add
433	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  v  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    v  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	82	None	add
434	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  double  v  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  double  v  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    double  v  =  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	82	None	add
435	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue();  for(int  i]  =  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue();  for(int  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i].doubleValue();  for(int  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    for(int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	15	None	replace
436	[BUG]  [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i].length;  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  dataRow[i]  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  dataRow[i]  *  v[i].length;	  Sum.sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	32	None	replace
437	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
438	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    i]  =  dataRow[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  not  a  statement	12	None	add
439	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  out[i];  double[]  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  out[i];  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  out[i];  double[]  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	119	None	replace
440	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  row;  double[]  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	119	None	replace
441	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(sum  *  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(sum  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +(sum  *  v[i]);	  v[i]    =    data[row][i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
442	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  +  dataRow[i].doubleValue();  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  +  dataRow[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  +  dataRow[i].doubleValue();	  ((    double[])v[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	57	None	replace
443	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  maxColSum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	19	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  v[i]);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
445	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  v[i]);  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  dataRow[i],  v[i]);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	compilable	  [FE]  AssertionFailedError  	19	4	replace
446	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  v.length;  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  v.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  v.length;	  v[i]    =    data[row][i].doubleValue()    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
447	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  v[i];  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +  v[i];	  v[i]    =    data[row][i].doubleValue()    +    sum;    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
448	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  columnDimension;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  columnDimension;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  columnDimension;	  sum    +=    dataRow[i]    *    v[i],    maxColSum;    	non-compiled	[CE]  ';'  expected	90	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(dataRow[i],  sum  *  v[i]);	  v[i]    =    Math.max(dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
450	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  v[i]);  [FE]  AssertionFailedError  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i],  sum  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i],  sum  *  v[i]);	  v[i]    =    Math.max(dataRow[i]    *    v[i]);    	compilable	  [FE]  AssertionFailedError  	17	4	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
452	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	compilable	  [FE]  AssertionFailedError  	91	4	add
453	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  i]  =  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  lu[i];  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  lu[i];  i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	73	None	replace
454	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  -  1;  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  -  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  -  1;	  v[i]    =    dataRow[i.doubleValue();    	non-compiled	[CE]  ']'  expected	35	None	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  sum  -  1);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	compilable	  [FE]  AssertionFailedError  	44	4	replace
456	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  -  1);  [FE]  AssertionFailedError  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum  -  1);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	compilable	  [FE]  AssertionFailedError  	44	4	replace
457	[BUG]  [BUGGY]  v[i]  =  this.getDataRow().doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  this.getDataRow().doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  this.getDataRow().doubleValue();	  v[i]    =    dataRow.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
458	[BUG]  [BUGGY]  dataRow[i]  =  dataRow.doubleValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  dataRow[i]  =  dataRow.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	dataRow[i]  =  dataRow.doubleValue();	  v[i]    =    dataRow.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
459	[BUG]  [BUGGY]  v[i]  =  dataRow.doubleValue()  +  i;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow.doubleValue()  +  i;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow.doubleValue()  +  i;	  v[i]    =    dataRow.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
460	[BUG]  [BUGGY]  Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum[]  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
461	[BUG]  [BUGGY]  SumMetrics  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  SumMetrics  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	SumMetrics  v  =  dataRow[i]  /  v[i];  sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
462	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  total;  [CE]  cannot  find  symbol  total  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  total;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  total;	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	non-compiled	[CE]  cannot  find  symbol  total	56	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  dataRow[i]);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
464	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  dataRow[i]);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
465	[BUG]  [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  row);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i.doubleValue()  *  row);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i.doubleValue()  *  row);	  v[i]    =    dataRow[i.doubleValue());    	non-compiled	[CE]  ']'  expected	69	None	replace
466	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i],  *  v[i];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i],  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +  1;  sum  +=  dataRow[i],  *  v[i];	  ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i],    *    v[i];    	non-compiled	[CE]  not  a  statement	114	None	replace
467	[BUG]  [BUGGY]  sum  +=  dataRow  *  this.data[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow  *  this.data[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow  *  this.data[i];	  sum    +=    dataRow    *    data[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
468	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  maxColSum);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	21	None	replace
469	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	21	None	replace
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  v[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    *    v[i]    +    1;    v[i]  =  dataRow[i]  *  v[i]  +  1;	  	compilable	  [FE]  AssertionFailedError  	95	3	add
471	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  v[i]  =  dataRow[i]  *  v[i]  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  v[i]  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    v[i]  =  dataRow[i]  *  v[i]  +  1;	  	compilable	  [FE]  AssertionFailedError  	95	3	add
472	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  v  =  dataRow[i]  *  v[i]  +  1;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  1;  int  v  =  dataRow[i]  *  v[i]  +  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    1;    int  v  =  dataRow[i]  *  v[i]  +  1;	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	95	None	add
473	[BUG]  [BUGGY]  sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  /  row;  double  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	81	None	replace
474	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue()  *  row;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue().doubleValue()  *  row;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue().doubleValue()  *  row;	  double    v    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	5	None	replace
475	[BUG]  [BUGGY]  out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[row]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nRows;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	105	None	replace
476	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  v[i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    dataRow[i]    *    sum;    v[i]  =  dataRow[i]  *  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
477	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  sum;  v[i]  =  dataRow[i]  *  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  sum;  v[i]  =  dataRow[i]  *  sum;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    sum;    v[i]  =  dataRow[i]  *  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	2	add
478	[BUG]  [BUGGY]  out[row]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[row]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[row]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    data[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	110	None	replace
479	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  dataRow[i].doubleValue()  *  v[i];  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue()  +=  dataRow[i].doubleValue()  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue()  +=  dataRow[i].doubleValue()  *  v[i];	  ((    double[])dataRow[i]).doubleValue()    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  inconvertible  types	74	None	replace
480	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  v[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]    =    Math.max(dataRow[i],    sum);    v[i]  =  Math.max(dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	26	3	add
481	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  v[i]  =  Math.max(dataRow[i],  sum);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  v[i]  =  Math.max(dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    v[i]  =  Math.max(dataRow[i],  sum);	  	compilable	  [FE]  AssertionFailedError  	26	3	add
482	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  nRows  =  this.getColumnDimension();  [CE]  variable  nRows  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum);  int  nRows  =  this.getColumnDimension();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    sum);    int  nRows  =  this.getColumnDimension();	  	non-compiled	[CE]  variable  nRows  is  already  defined  in  method  operate(double[])	26	None	add
483	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	71	None	add
484	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    dataRow[i]  =  dataRow[i]  *  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        dataRow[i]    =    dataRow[i]    *    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	71	None	add
485	[BUG]  [BUGGY]  Sum.sum  +=  data[i]  *  v[i];  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum.sum  +=  data[i]  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum.sum  +=  data[i]  *  v[i];	  Sum.sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	32	None	replace
486	[BUG]  [BUGGY]  sum  +=  dataRows[i]  *  v[i].length;  [CE]  cannot  find  symbol  dataRows  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRows[i]  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRows[i]  *  v[i].length;	  sum    +=    data[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  dataRows	1	None	replace
487	[BUG]  [BUGGY]  Sum  +=  dataRow[i].length  *  v[i].length;  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i].length  *  v[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i].length  *  v[i].length;	  Sum    +=    dataRow[i]    *    v[i].length;    	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	replace
488	[BUG]  [BUGGY]  v[i]  =  dataRow[i][0].doubleValue();  [CE]  array  required,  but  double  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i][0].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i][0].doubleValue();	  v[i]    =    dataRow[row][i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  }	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    Math.max(sum,    dataRow[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	107	None	replace
490	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i].doubleValue().doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i].doubleValue().doubleValue();	  out[i]    =    dataRow[i]    *    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	replace
491	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i].doubleValue();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  sum  +=  dataRow[i]  *  v[i].doubleValue();	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
492	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  value  +=  dataRow[i]  *  v[i];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue(),  value  +=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue(),  value  +=  dataRow[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue(),    sum    +=    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	61	None	replace
493	[BUG]  [BUGGY]  sum  +=  dataRow[i].length  /  v[i];  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i].length  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i].length  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
494	[BUG]  [BUGGY]  v[i]  =  dataRow[i],  v[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i],  v[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i],  v[i].doubleValue();	  v[i]    =    dataRow[i][i].doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
495	[BUG]  [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(v[i]  *  row);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row][i].doubleValue()  +(v[i]  *  row);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row][i].doubleValue()  +(v[i]  *  row);	  v[i]    =    data[row][i].doubleValue()    +(v[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
496	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v.length);  [CE]  no  suitable  method  found  for  max(double,double,double,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v.length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i],  v[i],  v.length);	  out[i]    =    Math.max(sum,    dataRow[i],    v.length);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,int)	86	None	replace
497	[BUG]  [BUGGY]  v[i]  =  data.doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data.doubleValue();	  v[i]    =    dataRow.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
498	[BUG]  [BUGGY]  out[i]  =  dataRow[i],  v[i]  *  v[i];  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i],  v[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i],  v[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    out[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ';'  expected	13	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    dataRow[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	104	None	replace
500	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dataRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  dataRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  dataRows;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	70	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  -=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  -=  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	70	4	replace
502	[BUG]  [BUGGY]  out[i]  -=  dataRow[i]  *  v[i];  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  -=  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  -=  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    i]    =    dataRow[i]    *    v[i];    	compilable	  [FE]  AssertionFailedError  	70	4	replace
503	[BUG]  [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i]  /  v[i];  double[]  v  =  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    double[]    v    =    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	119	None	replace
504	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	77	None	add
505	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    dataRow[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        dataRow[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  dataRow[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
506	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i],  v[i]);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	25	None	replace
507	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i]  *  v[i].length);	  out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
508	[BUG]  [BUGGY]  data[i]  =  data[row].doubleValue()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  data[i]  =  data[row].doubleValue()  -  1;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	data[i]  =  data[row].doubleValue()  -  1;	  data[i]    =    data[row].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
509	[BUG]  [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum    +=    dataRow[i]    /    v[i];    v[i]  =  dataRow[i]  /  v[i];  for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  }  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum        +=        dataRow[i]        /        v[i];        v[i]    =    dataRow[i]    /    v[i];    for(int  i  =  0;  i  <  nCols;  i++)  {  sum  +=  dataRow[i]  /  v[i];  v[i]  =  dataRow[i]  /  v[i];  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	82	None	add
510	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i],  data[i].length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i],  data[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i],  data[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
511	[BUG]  [BUGGY]  sum  +=  data[i]  *  v[i],  data[i].length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  *  v[i],  data[i].length;  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  *  v[i],  data[i].length;	  sum    +=    dataRow[i]    *    v[i],    v[i].length;    	non-compiled	[CE]  ';'  expected	118	None	replace
512	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i]  +  sum;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	55	None	add
513	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  dataRow[i]  *  v[i]  +  sum;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	55	None	add
514	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  sum;  for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  dataRow[i]  *  v[i]  +  sum;  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    *    v[i]    +    sum;    for(int  i  =  0;  i  <  nCols;  i++)  {  data[i]  =  dataRow[i]  *  v[i]  +  sum;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	55	None	add
515	[BUG]  [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  /  v[i]);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i].doubleValue()  +(v[i]  /  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i].doubleValue()  +(v[i]  /  v[i]);	  out[i]    =    dataRow[i].doubleValue()    +(v[i]    -    v[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
516	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(sum,  dataRow[i].length);  for(int  i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    for(int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	10	None	replace
517	[BUG]  [BUGGY]  i]  =  dataRow[i]  *  v[i];  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  not  a  statement	73	None	replace
518	[BUG]  [BUGGY]  sum  +=  data[i]  /  v[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  data[i]  /  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  data[i]  /  v[i].doubleValue();	  sum    +=    dataRow[i]    /    v[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	64	None	replace
519	[BUG]  [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  v[i]  *  v[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  v[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i]).doubleValue();  sum  +=  dataRow[i],  v[i]  *  v[i];	  ((    double[])dataRow[i]).doubleValue();    sum    +=    dataRow[i],    *    v[i];    	non-compiled	[CE]  ';'  expected	114	None	replace
520	[BUG]  [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i],  maxColSum);  [CE]  cannot  find  symbol  maxColSum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(dataRow[i]  *  v[i],  maxColSum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(dataRow[i]  *  v[i],  maxColSum);	  v[i]    =    Math.max(v[i]    *    dataRow[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  maxColSum	19	None	replace
521	[BUG]  [BUGGY]  sum  +=  dataRows[i]  *  v[i].doubleValue();  [CE]  cannot  find  symbol  dataRows  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRows[i]  *  v[i].doubleValue();  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRows[i]  *  v[i].doubleValue();	  sum    +=    data[i]    *    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  dataRows	99	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v.length,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(v.length,  dataRow[i]  *  dataRow[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	4	replace
523	[BUG]  [BUGGY]  v[i]  =  Math.max(v.length,  dataRow[i]  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v.length,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v.length,  dataRow[i]  *  dataRow[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	4	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i],  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	v[i]  =  Math.max(v[i],  dataRow[i]  *  dataRow[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	4	replace
525	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i],  dataRow[i]  *  dataRow[i]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i],  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i],  dataRow[i]  *  dataRow[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	compilable	  [FE]  AssertionFailedError  	92	4	replace
526	[BUG]  [BUGGY]  v[i]  =  Math.max(v,  dataRow[i]  *  dataRow[i]);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v,  dataRow[i]  *  dataRow[i]);	  v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	92	None	replace
527	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum.length  -  1);  [CE]  double  cannot  be  dereferenced  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  sum.length  -  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  sum.length  -  1);	  out[i]    =    Math.max(sum,    dataRow[i].length    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
528	[BUG]  [BUGGY]  sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  /  v[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow[i]  *  v[i];  Sum  +=  dataRow[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    Sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	38	None	replace
529	[BUG]  [BUGGY]  Sum  +=  dataRow[i],  v[i]  /  v[i];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  Sum  +=  dataRow[i],  v[i]  /  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	Sum  +=  dataRow[i],  v[i]  /  v[i];	  sum    +=    dataRow[i]    /    v[i];    Sum    +=    dataRow[i]    /    v[i];    	non-compiled	[CE]  ';'  expected	38	None	replace
530	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  v[i];	  double    v    =    dataRow[i].doubleValue()    +    sum;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	6	None	replace
531	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	115	None	add
532	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(dataRow[i],  v[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(dataRow[i],  v[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  dataRow[i]  =  Math.max(dataRow[i],  v[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	115	None	add
533	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(dataRow[i],    v[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(dataRow[i],  v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  Math.max(dataRow[i],  v[i]  *  v[i]);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
535	[BUG]  [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  *  v[i]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(dataRow[i],  v[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  Math.max(dataRow[i],  v[i]  *  v[i]);	  out[i]    =    Math.max(dataRow[i],    v[i]);    	compilable	  [FE]  AssertionFailedError  	116	4	replace
536	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  v  =  dataRow[i]  /  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  int  v  =  dataRow[i]  /  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    int  v  =  dataRow[i]  /  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	53	None	add
537	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])v[i]).doubleValue();  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  /  v[i];  ((  double[])v[i]).doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    dataRow[i]    /    v[i];    ((  double[])v[i]).doubleValue();	  	non-compiled	[CE]  inconvertible  types	53	None	add
538	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  v[i];  double  v  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  v[i];  double  v  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum    +=    dataRow.length    *    v[i];    double  v  =  dataRow[i].doubleValue();  sum  +=  dataRow.length  *  v[i];	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	30	None	add
539	[BUG]  [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  row.length;  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  double  v  =  dataRow[i].doubleValue()  +  row.length;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	double  v  =  dataRow[i].doubleValue()  +  row.length;	  double    v    =    dataRow[i].doubleValue()    +    v.length;    	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	93	None	replace
540	[BUG]  [BUGGY]  sum  +=  dataRow.length  *  data[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  sum  +=  dataRow.length  *  data[i];  [BUGGY]      }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	sum  +=  dataRow.length  *  data[i];	  sum    +=    dataRow    *    data[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
541	[BUG]  [BUGGY]  int  i]  =  Math.max(sum,  dataRow[i]);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  int  i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	int  i]  =  Math.max(sum,  dataRow[i]);	          out[i]    =    Math.max(sum,    dataRow[i]);    int    i]    =    Math.max(sum,    dataRow[i]);    	non-compiled	[CE]  ';'  expected	11	None	replace
542	[BUG]  [BUGGY]  out[i]  =  data[i].doubleValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  data[i].doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  data[i].doubleValue();	  out[i]    =    v[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
543	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	20	None	add
544	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nRows;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
545	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }	  	non-compiled	[CE]  ']'  expected	20	None	add
546	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nRows;  i++)  {  double  v[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  ']'  expected	20	None	add
547	[BUG]  [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  row.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  dataRow[i].doubleValue()  +  row.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  dataRow[i].doubleValue()  +  row.doubleValue();	  v[i]    =    dataRow[i].doubleValue().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
548	[BUG]  [BUGGY]  v[i]  =  data[row.doubleValue()  +  i.doubleValue();  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[row.doubleValue()  +  i.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[row.doubleValue()  +  i.doubleValue();	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  ']'  expected	106	None	replace
549	[BUG]  [BUGGY]  v[i]  =  data[i.doubleValue()  +  i.doubleValue();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[i.doubleValue()  +  i.doubleValue();  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i.doubleValue()  +  i.doubleValue();	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  ']'  expected	106	None	replace
550	[BUG]  [BUGGY]  v[i]  =  data[i.doubleValue()  +  1);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  data[i.doubleValue()  +  1);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  data[i.doubleValue()  +  1);	  v[i]    =    data[i.doubleValue();    	non-compiled	[CE]  ']'  expected	106	None	replace
551	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i],  dataRow[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i],  dataRow[i],  sum);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i],  dataRow[i],  sum);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	98	None	replace
552	[BUG]  [BUGGY]  v[i]  =  Math.max(v[i],  sum,  dataRow[i],  v[i]);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(v[i],  sum,  dataRow[i],  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]  =  Math.max(v[i],  sum,  dataRow[i],  v[i]);	  v[i]    =    Math.max(v[i],    sum,    dataRow[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	98	None	replace
553	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	24	None	add
554	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
555	[BUG]  [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  v  =  Math.max(sum,  dataRow[i]  *  v[i]);  [CE]  variable  v  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  Math.max(sum,  dataRow[i]  *  v[i]);  int  v  =  Math.max(sum,  dataRow[i]  *  v[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]    =    Math.max(sum,    dataRow[i]    *    v[i]);    int  v  =  Math.max(sum,  dataRow[i]  *  v[i]);	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  operate(double[])	24	None	add
556	[BUG]  [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i]  +  v[i];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])v[i]).doubleValue()  *  dataRow[i]  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])v[i]).doubleValue()  *  dataRow[i]  +  v[i];	  ((    double[])dataRow[i]).doubleValue()    *    v[i]    +    dataRow[i];    	non-compiled	[CE]  not  a  statement	68	None	replace
557	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	7	None	add
558	[BUG]  [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    Math.max(sum,    dataRow[i]);    out[i]  =  Math.max(sum,  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        Math.max(sum,        dataRow[i]);        out[i]    =    Math.max(sum,    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  Math.max(sum,  dataRow[i]);  out[i]  =  Math.max(sum,  dataRow[i]);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
559	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	91	None	add
560	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
561	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  sum  +=  dataRow[i]  *  dataRow[i]  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  sum  +=  dataRow[i]  *  dataRow[i]  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  sum  +=  dataRow[i]  *  dataRow[i]	  	non-compiled	[CE]  'else'  without  'if'	91	None	add
562	[BUG]  [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  v[i]  =  Math.max(sum,  dataRow[i]  *  data  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  v[i]  =  Math.max(sum,  dataRow[i]  *  data  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	v[i]    =    Math.max(sum,    dataRow[i]    *    dataRow[i]);    for(int  i  =  0;  i  <  nCols;  i++)  {  v[i]  =  Math.max(sum,  dataRow[i]  *  dataRow[i]);  }  else  {  v[i]  =  Math.max(sum,  dataRow[i]  *  data	  	non-compiled	[CE]  'else'  without  'if'	91	None	add
563	[BUG]  [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataData[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [CE]  cannot  find  symbol  dataData  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]          out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataRow[i]  *  v[i];  out[i]  =  dataData[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	                out[i]        =        dataRow[i]        *        v[i];        out[i]    =    dataRow[i]    *    v[i];    out[i]  =  dataData[i]  *  v[i];  out[i]  =  dataRow[i]  *  v[i];	  	non-compiled	[CE]  cannot  find  symbol  dataData	12	None	add
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [CE]  variable  i  is  already  defined  in  method  operate(double[])  [FE]        AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  out[i]  =  dataRow[i]  *  v[i];  }	          out[i]    =    dataRow[i]    *    v[i];    for(int    i    =    0;    i    <    nCols;    i++)    {    out[i]    =    dataRow[i]    *    v[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  operate(double[])	102	None	replace
565	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  v[i];	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
566	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  v[i];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  v[i];	  out[i]    =    dataRow[i]    *    v[i]    +    sum;    	compilable	  [FE]  AssertionFailedError  	56	4	replace
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  4;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	out[i]  =  dataRow[i]  *  v[i]  +  4;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
568	[BUG]  [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  out[i]  =  dataRow[i]  *  v[i]  +  4;  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	out[i]  =  dataRow[i]  *  v[i]  +  4;	  out[i]    =    dataRow[i]    *    v[i]    +    1;    	compilable	  [FE]  AssertionFailedError  	96	4	replace
569	[BUG]  [BUGGY]  for(int  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  dataRow[i]  =  dataRow[i]  *  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ']'  expected	14	None	replace
570	[BUG]  [BUGGY]  for(int  dataRow[i]  =  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  for(int  dataRow[i]  =  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	for(int  dataRow[i]  =  v[i];  dataRow[i]  =  dataRow[i]  *  v[i];	          out[i]    =    dataRow[i]    *    v[i];    int    dataRow[i]    =    dataRow[i]    *    v[i];    	non-compiled	[CE]  ']'  expected	14	None	replace
571	[BUG]  [BUGGY]  ((  double[])dataRow[i],  dataRow[i].doubleValue());  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  if  (v.length  !=  nCols)  {  throw  new  IllegalArgumentException(     "vector  has  wrong  length     ");  }  final  double[]  out  =  new  double[v.length];  for  (int  row  =  0;  row  <  nRows;  row++)  {  final  double[]  dataRow  =  data[row];  double  sum  =  0;  for  (int  i  =  0;  i  <  nCols;  i++)  {      [BUGGY]  ((  double[])dataRow[i],  dataRow[i].doubleValue());  [BUGGY]      sum  +=  dataRow[i]  *  v[i];  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  RealMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  double[]  double[]  v  [VARIABLES]  boolean  double[]  dataRow  out  v  double  TOO_SMALL  d  det  maxColSum  sum  trace  double[][]  d  data  lu  out  outData  subMatrix  subMatrixData  int[]  permutation  selectedColumns  selectedRows  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  parity  r  row  rowCount  rowDimension  startColumn  startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	((  double[])dataRow[i],  dataRow[i].doubleValue());	  ((    double[])dataRow[i],    v[i]).doubleValue();    	non-compiled	[CE]  ')'  expected	111	None	replace
