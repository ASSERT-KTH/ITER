bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int nRows = this.getRowDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { [BUGGY] final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	774	774	2	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { [BUGGY] [BUGGY] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	774	774	2	add	
3	[BUG] [BUGGY] final int nCols = this.getColumnDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); [BUGGY] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	775	775	2	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); [BUGGY] [BUGGY] final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	775	775	2	add	
5	[BUG] [BUGGY] if (v.length != nCols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] if (v.length != nCols) { [BUGGY] throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	776	776	2	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] [BUGGY] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	776	776	2	add	
7	[BUG] [BUGGY] final double[] out = new double[v.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] final double[] out = new double[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	779	779	2	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] [BUGGY] final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	779	779	2	add	
9	[BUG] [BUGGY] for (int row = 0; row < nRows; row++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { [BUGGY] final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; [BUGGY] [BUGGY] for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	
11	[BUG] [BUGGY] final double[] dataRow = data[row]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] final double[] dataRow = data[row]; [BUGGY] double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	781	781	2	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] [BUGGY] final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	781	781	2	add	
13	[BUG] [BUGGY] double sum = 0; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; [BUGGY] double sum = 0; [BUGGY] for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	782	782	2	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	782	782	2	add	
15	[BUG] [BUGGY] for (int i = 0; i < nCols; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; [BUGGY] for (int i = 0; i < nCols; i++) { [BUGGY] sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	783	783	2	replace	
16	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	783	783	2	add	
17	[BUG] [BUGGY] sum += dataRow[i] * v[i]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { [BUGGY] sum += dataRow[i] * v[i]; [BUGGY] } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	
18	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { [BUGGY] [BUGGY] sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	
19	[BUG] [BUGGY] out[row] = sum; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [BUGGY] out[row] = sum; [BUGGY] } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	786	786	2	replace	
20	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [BUGGY] [BUGGY] out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	786	786	2	add	
21	[BUG] [BUGGY] if (v.length != this.getColumnDimension()) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] if (v.length != this.getColumnDimension()) { [BUGGY] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	
22	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] [BUGGY] if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	
23	[BUG] [BUGGY] final int nRows = this.getRowDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	989	989	2	replace	
24	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] [BUGGY] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	989	989	2	add	
25	[BUG] [BUGGY] final int nCols = this.getColumnDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	990	990	2	replace	
26	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	990	990	2	add	
27	[BUG] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	
28	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	
29	[BUG] [BUGGY] for (int row = 0; row < nRows; row++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	
30	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	
31	[BUG] [BUGGY] BigDecimal sum = ZERO; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	993	993	2	replace	
32	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	993	993	2	add	
33	[BUG] [BUGGY] for (int i = 0; i < nCols; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	
34	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	
35	[BUG] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [BUGGY] } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	995	995	2	replace	
36	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	995	995	2	add	
37	[BUG] [BUGGY] out[row] = sum; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] out[row] = sum; [BUGGY] } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	
38	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] [BUGGY] out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	
39	[BUG] [BUGGY] if (d[r].length != nCols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { [BUGGY] throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17677669529663687	146	146	2	replace	
40	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17677669529663687	146	146	2	add	
41	[BUG] [BUGGY] if (d[r].length != nCols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { [BUGGY] throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17677669529663687	154	154	2	replace	
42	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { [BUGGY] [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17677669529663687	154	154	2	add	
43	[BUG] [BUGGY] public RealMatrixImpl(double[][] d, boolean copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] public RealMatrixImpl(double[][] d, boolean copyArray) { [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	130	130	2	replace	
44	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	130	130	2	add	
45	[BUG] [BUGGY] protected double data[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected double data[][] = null; [BUGGY]  [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	58	58	2	replace	
46	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected double data[][] = null; [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	58	58	2	add	
47	[BUG] [BUGGY] protected double lu[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected double lu[][] = null; [BUGGY]  [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	63	63	2	replace	
48	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected double lu[][] = null; [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	63	63	2	add	
49	[BUG] [BUGGY] protected int[] permutation = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int[] permutation = null; [BUGGY]  [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	66	66	2	replace	
50	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int[] permutation = null; [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	66	66	2	add	
51	[BUG] [BUGGY] protected int parity = 1; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int parity = 1; [BUGGY]  [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	69	69	2	replace	
52	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int parity = 1; [CLASS] RealMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	69	69	2	add	
53	[BUG] [BUGGY] if (copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { [BUGGY] if (copyArray) { [BUGGY] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	131	131	2	replace	
54	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { [BUGGY] [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	131	131	2	add	
55	[BUG] [BUGGY] if (d == null) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] if (d == null) { [BUGGY] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	134	134	2	replace	
56	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] [BUGGY] if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	134	134	2	add	
57	[BUG] [BUGGY] final int nRows = d.length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] final int nRows = d.length; [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	137	137	2	replace	
58	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] [BUGGY] final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	137	137	2	add	
59	[BUG] [BUGGY] if (nRows == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] if (nRows == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	138	138	2	replace	
60	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public RealMatrixImpl(double[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	138	138	2	add	
61	[BUG] [BUGGY] final int nCols = d[0].length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] final int nCols = d[0].length; [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	141	141	2	replace	
62	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] [BUGGY] final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	141	141	2	add	
63	[BUG] [BUGGY] if (nCols == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] if (nCols == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	142	142	2	replace	
64	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	142	142	2	add	
65	[BUG] [BUGGY] for (int r = 1; r < nRows; r++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	145	145	2	replace	
66	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] [BUGGY] for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	145	145	2	add	
67	[BUG] [BUGGY] data = d; [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } [BUGGY] data = d; [BUGGY] } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	150	150	2	replace	
68	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } [BUGGY] [BUGGY] data = d; } lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	150	150	2	add	
69	[BUG] [BUGGY] lu = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [BUGGY] lu = null; [BUGGY] } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	152	152	2	replace	
70	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [BUGGY] [BUGGY] lu = null; } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	152	152	2	add	
71	[BUG] [BUGGY] } [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [BUGGY] } [BUGGY]  [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	153	153	2	replace	
72	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [BUGGY] [BUGGY] } [CLASS] RealMatrixImpl [METHOD] <init> [RETURN_TYPE] RealMatrixImpl(double[][],boolean)  double[][] d boolean copyArray [VARIABLES] double[][] d data lu int[] permutation boolean copyArray double TOO_SMALL long serialVersionUID int columnDimension nCols nRows parity r rowDimension  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.17149858514250882	153	153	2	add	
73	[BUG] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	138	138	2	replace	
74	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	138	138	2	add	
75	[BUG] [BUGGY] protected BigDecimal data[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected BigDecimal data[][] = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	56	56	2	replace	
76	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected BigDecimal data[][] = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	56	56	2	add	
77	[BUG] [BUGGY] protected BigDecimal lu[][] = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected BigDecimal lu[][] = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	61	61	2	replace	
78	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected BigDecimal lu[][] = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	61	61	2	add	
79	[BUG] [BUGGY] protected int[] permutation = null; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int[] permutation = null; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	64	64	2	replace	
80	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int[] permutation = null; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	64	64	2	add	
81	[BUG] [BUGGY] protected int parity = 1; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] protected int parity = 1; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	67	67	2	replace	
82	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] protected int parity = 1; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	67	67	2	add	
83	[BUG] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	70	70	2	replace	
84	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] private int roundingMode = BigDecimal.ROUND_HALF_UP; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	70	70	2	add	
85	[BUG] [BUGGY] private int scale = 64; [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] private int scale = 64; [BUGGY]  [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	73	73	2	replace	
86	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] [BUGGY] [BUGGY] private int scale = 64; [CLASS] BigMatrixImpl  [VARIABLES] 	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	73	73	2	add	
87	[BUG] [BUGGY] if (copyArray) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] if (copyArray) { [BUGGY] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	139	139	2	replace	
88	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { [BUGGY] [BUGGY] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	139	139	2	add	
89	[BUG] [BUGGY] if (d == null) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] if (d == null) { [BUGGY] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	142	142	2	replace	
90	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { [BUGGY] [BUGGY] if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	142	142	2	add	
91	[BUG] [BUGGY] final int nRows = d.length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] final int nRows = d.length; [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	145	145	2	replace	
92	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } [BUGGY] [BUGGY] final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	145	145	2	add	
93	[BUG] [BUGGY] if (nRows == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] if (nRows == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	146	146	2	replace	
94	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) { if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; [BUGGY] [BUGGY] if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	146	146	2	add	
95	[BUG] [BUGGY] final int nCols = d[0].length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] final int nCols = d[0].length; [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	149	149	2	replace	
96	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (copyArray) { copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } [BUGGY] [BUGGY] final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	149	149	2	add	
97	[BUG] [BUGGY] if (nCols == 0) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] if (nCols == 0) { [BUGGY] throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	150	150	2	replace	
98	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] copyIn(d); } else { if (d == null) { throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; [BUGGY] [BUGGY] if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	150	150	2	add	
99	[BUG] [BUGGY] for (int r = 1; r < nRows; r++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] for (int r = 1; r < nRows; r++) { [BUGGY] if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	153	153	2	replace	
100	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new NullPointerException(); } final int nRows = d.length; if (nRows == 0) { throw new IllegalArgumentException("Matrix must have at least one row."); } final int nCols = d[0].length; if (nCols == 0) { throw new IllegalArgumentException("Matrix must have at least one column."); } [BUGGY] [BUGGY] for (int r = 1; r < nRows; r++) { if (d[r].length != nCols) { throw new IllegalArgumentException("All input rows must have the same length."); } } data = d; } lu = null; } [CLASS] BigMatrixImpl [METHOD] <init> [RETURN_TYPE] BigDecimal[][],boolean)  BigDecimal[][] d boolean copyArray [VARIABLES] int[] permutation boolean copyArray long serialVersionUID int columnDimension nCols nRows parity r roundingMode rowDimension scale BigDecimal ONE TOO_SMALL ZERO BigDecimal[][] d data lu  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.17149858514250882	153	153	2	add	
