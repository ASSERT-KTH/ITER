bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  nCols;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    for(int  row  =  0;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
2	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  For(int  row  =  0;  row  <  nCols;  row++)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  For(int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    For(int  row  =  0;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
3	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  row  =  0;  row  <  nCols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    int  row  =  0;  row  <  nCols;  row++)  {	  	non-compiled	[CE]  >  expected	8	None	add
4	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  nCOLs;  row++)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  nCOLs;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    for(int  row  =  0;  row  <  nCOLs;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
5	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  int  nCols  =  this.getColumnDimension();  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    int  nCols  =  this.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
6	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][nCols];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][nRows];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][0];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][0];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length][nCols];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length][nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length][nCols];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[nRows]);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[nRows]);	      BigDecimal[]    data    =    out.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[out.length]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[out.length]);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  data[nRows].toArray(new  BigDecimal[out.length]);	      BigDecimal[]    data    =    out.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows],  v.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows],  v.length);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[nRows],  v.length);	      BigDecimal[]    data    =    out.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    for(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
14	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  nRows  =  this.getRowDimension();  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  nRows  =  this.getRowDimension();  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int  nRows  =  this.getRowDimension();  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
15	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  For(int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    For(int  row  =  0;  row  <  nRows  +  1;  row++)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
16	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    BigDecimal[]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
17	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  row  =  0;  row  <  nRows  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int  row  =  0;  row  <  nRows  +  1;  row++)  {	  	non-compiled	[CE]  >  expected	6	None	add
18	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][v.length];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][nCols];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][nRows];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[data.length][0];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[data.length][0];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	for(int  row  =  1;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
23	[BUG]  [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  1;  row  <  nCols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  1;  row  <  nCols;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
24	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows.length;  row++)  {  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows.length;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  <  nRows.length;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
25	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  int  nRows  =  this.getRowDimension()  +  1;  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  int  nRows  =  this.getRowDimension()  +  1;	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  final  int  nRows  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  int  nRows  =  this.getColumnDimension();  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  int  nRows  =  this.getColumnDimension();	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension()  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  int  nRows  =  this.getRowDimension()  -  1;  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  int  nRows  =  this.getRowDimension()  -  1;	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i][i]!=    null)    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(v[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i][i]!=    null)    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	16	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i]!=  null)  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i][i]!=    null)    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
31	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nCols];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  new  BigDecimal[nCols];	      BigDecimal[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[nRows];	      BigDecimal[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  new  BigDecimal[nRows  -  1];	      BigDecimal[]    out    =    new    BigDecimal[nRows];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  int  nRows  =  this.getRowDimension()  +  1;  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	int  nRows  =  this.getRowDimension()  +  1;	      int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  int  nRows  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  int  nRows  =  this.getColumnDimension();  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	int  nRows  =  this.getColumnDimension();	      int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i][i].multiply(v[i])    ==    out[i])    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  ']'  expected	15	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])  ==  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i][i].multiply(v[i])    ==    out[i])    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
38	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  -  1];	      BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  BigDecimal[]  out  =  new  BigDecimal[v.length];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  BigDecimal[]  out  =  new  BigDecimal[v.length];	      BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  out  =  new  BigDecimal[v.length  +  1];	      BigDecimal[]    out    =    new    BigDecimal[v.length];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  data  =  new  BigDecimal[nRows];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  data  =  new  BigDecimal[nRows];	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  data  =  v.toArray(new  BigDecimal[nCols]);	      BigDecimal[]    data    =    v.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  int  nCols  =  this.getRowDimension();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  int  nCols  =  this.getRowDimension();  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	int  nCols  =  this.getRowDimension();	      int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  int  nCols  =  this.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  int  nCols  =  this.getColumnDimension()  +  1;  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	int  nCols  =  this.getColumnDimension()  +  1;	      int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  final  int  nCols  =  this.getColumnDimension();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  int  nCols  =  this.getColumnDimension();  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  int  nCols  =  this.getColumnDimension();	      int    nCols    =    this.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	for(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
47	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  2;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  <  nRows  +  2;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	for(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
49	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	for(int  row  =  0;  row  <  nRows  +  3;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
51	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  3;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  <  nRows  +  3;  row++)  {	  for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i][i].multiply(v[i])!=    out[i])    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  ']'  expected	14	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nCols;  i++)  {  if(data[i][i].multiply(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i][i].multiply(v[i])!=    out[i])    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
54	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  int  nRows  =  this.getRowDimension();  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    int  nRows  =  this.getRowDimension();	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
55	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    BigDecimal[][]  out  =  new  BigDecimal[nRows  +  1];	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
56	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    BigDecimal[][]  out  =  new  BigDecimal[nRows][v.length];	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
57	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  BigDecimal[][]  out  =  new  BigDecimal[nRows][0];  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    BigDecimal[][]  out  =  new  BigDecimal[nRows][0];	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
58	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][1];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nCols]);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  data  =  out.toArray(new  BigDecimal[nCols]);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  data  =  out.toArray(new  BigDecimal[nCols]);	      BigDecimal[]    data    =    out.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[]  data  =  this.data.toArray(new  BigDecimal[nRows]);	      BigDecimal[]    data    =    out.toArray(new    BigDecimal[nRows]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  rRows;  row++)  {  [CE]  cannot  find  symbol  rRows  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  rRows;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  <  rRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  cannot  find  symbol  rRows	9	None	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  >=  nRows;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	for(int  row  =  0;  row  >=  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
63	[BUG]  [BUGGY]  for(int  row  =  0;  row  >=  nRows;  row++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  >=  nRows;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  row  =  0;  row  >=  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
64	[BUG]  [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  final  int  nRows  =  this.getRowDimension(v.length);  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	final  int  nRows  =  this.getRowDimension(v.length);	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  For(int  row  =  0;  row  <  nRows;  row++)  {  [CE]  '.class'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  For(int  row  =  0;  row  <  nRows;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	For(int  row  =  0;  row  <  nRows;  row++)  {	  for(int    row    =    0;    row    <    nCols;    row++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
66	[BUG]  [BUGGY]  static  final  int  nRows  =  this.getRowDimension();  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  static  final  int  nRows  =  this.getRowDimension();  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	static  final  int  nRows  =  this.getRowDimension();	      final    int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][this.getRowDimension()  ];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][this.getRowDimension()  ];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][this.getRowDimension()  ];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][out.length];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].add(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].add(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(data[i][i].add(v[i])!=  out[i])  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(data[i][i].multiply(v[i])!=    out[i])    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i][i]  ==  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [CE]  array  required,  but  BigDecimal  found  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i][i]  ==  null)  {  out[i]  =  data[i].multiply(v[i]);  }  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int  i  =  0;  i  <  nRows;  i++)  {  if(v[i][i]  ==  null)  {  out[i]  =  data[i].multiply(v[i]);  }	      for(int    i    =    0;    i    <    nRows;    i++)    {    if(v[i][i]!=    null)    {    out[i]    =    data[i].multiply(v[i]);    }    	non-compiled	[CE]  array  required,  but  BigDecimal  found	16	None	replace
70	[BUG]  [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	BigDecimal[][]  out  =  new  BigDecimal[v.length][data.length  -  1];	      BigDecimal[][]    out    =    new    BigDecimal[v.length][data.length];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
71	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nRows  +  1;  row++)  {  for(int  row  =  0;  row  <  nCols  +  1;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nRows    +    1;    row++)    {    for(int  row  =  0;  row  <  nCols  +  1;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
72	[BUG]  [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  int  nRows  =  this.getRowDimension()  *  v.length;  [BUGGY]    for  (int  row  =  0;  row  <  nRows;  row++)  {  BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	int  nRows  =  this.getRowDimension()  *  v.length;	      int    nRows    =    this.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  ncols;  row++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  BigDecimal[]  operate(BigDecimal[]  v)  throws  IllegalArgumentException  {  if  (v.length  !=  this.getColumnDimension())  {  throw  new  IllegalArgumentException(   "vector  has  wrong  length   ");  }  final  int  nRows  =  this.getRowDimension();  final  int  nCols  =  this.getColumnDimension();  final  BigDecimal[]  out  =  new  BigDecimal[v.length];    [BUGGY]  for(int  row  =  0;  row  <  nCols;  row++)  {  for(int  row  =  0;  row  <  ncols;  row++)  {  [BUGGY]    BigDecimal  sum  =  ZERO;  for  (int  i  =  0;  i  <  nCols;  i++)  {  sum  =  sum.add(data[row][i].multiply(v[i]));  }  out[row]  =  sum;  }  return  out;  }  [CLASS]  BigMatrixImpl  [METHOD]  operate  [RETURN_TYPE]  BigDecimal[]  BigDecimal[]  v  [VARIABLES]  boolean  int[]  permutation  selectedColumns  selectedRows  BigDecimal[]  out  v  long  serialVersionUID  int  col  column  columnCount  columnDimension  endColumn  endRow  i  j  nCols  nRows  nSum  ncols  nrows  parity  r  roundingMode  row  rowCount  rowDimension  scale  startColumn  startRow  BigDecimal  ONE  TOO_SMALL  ZERO  d  det  maxColSum  sum  trace  BigDecimal[][]  d  data  lu  out  outData  subMatrix  subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	for(int    row    =    0;    row    <    nCols;    row++)    {    for(int  row  =  0;  row  <  ncols;  row++)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
