bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int nRows = this.getRowDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { [BUGGY] final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	774	774	2	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { [BUGGY] [BUGGY] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	774	774	2	add	
3	[BUG] [BUGGY] final int nCols = this.getColumnDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); [BUGGY] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	775	775	2	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); [BUGGY] [BUGGY] final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	775	775	2	add	
5	[BUG] [BUGGY] if (v.length != nCols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] if (v.length != nCols) { [BUGGY] throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	776	776	2	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] [BUGGY] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	776	776	2	add	
7	[BUG] [BUGGY] final double[] out = new double[v.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] final double[] out = new double[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	779	779	2	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] [BUGGY] final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	779	779	2	add	
9	[BUG] [BUGGY] for (int row = 0; row < nRows; row++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { [BUGGY] final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; [BUGGY] [BUGGY] for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	780	780	2	add	
11	[BUG] [BUGGY] final double[] dataRow = data[row]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] final double[] dataRow = data[row]; [BUGGY] double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	781	781	2	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] [BUGGY] final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	781	781	2	add	
13	[BUG] [BUGGY] double sum = 0; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; [BUGGY] double sum = 0; [BUGGY] for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	782	782	2	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	782	782	2	add	
15	[BUG] [BUGGY] for (int i = 0; i < nCols; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; [BUGGY] for (int i = 0; i < nCols; i++) { [BUGGY] sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	783	783	2	replace	
16	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double[] operate(double[] v) throws IllegalArgumentException { final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	783	783	2	add	
17	[BUG] [BUGGY] sum += dataRow[i] * v[i]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { [BUGGY] sum += dataRow[i] * v[i]; [BUGGY] } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	replace	
18	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { [BUGGY] [BUGGY] sum += dataRow[i] * v[i]; } out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	784	784	2	add	
19	[BUG] [BUGGY] out[row] = sum; [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [BUGGY] out[row] = sum; [BUGGY] } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	786	786	2	replace	
20	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] if (v.length != nCols) { throw new IllegalArgumentException("vector has wrong length"); } final double[] out = new double[v.length]; for (int row = 0; row < nRows; row++) { final double[] dataRow = data[row]; double sum = 0; for (int i = 0; i < nCols; i++) { sum += dataRow[i] * v[i]; } [BUGGY] [BUGGY] out[row] = sum; } return out; } [CLASS] RealMatrixImpl [METHOD] operate [RETURN_TYPE] double[]  double[] v [VARIABLES] boolean double[] dataRow out v double TOO_SMALL d det maxColSum sum trace double[][] d data lu out outData subMatrix subMatrixData int[] permutation selectedColumns selectedRows long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols parity r row rowCount rowDimension startColumn startRow  	projects/Math98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java	0.4082482904638631	786	786	2	add	
21	[BUG] [BUGGY] if (v.length != this.getColumnDimension()) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] if (v.length != this.getColumnDimension()) { [BUGGY] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	replace	
22	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { [BUGGY] [BUGGY] if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	986	986	2	add	
23	[BUG] [BUGGY] final int nRows = this.getRowDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	989	989	2	replace	
24	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } [BUGGY] [BUGGY] final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	989	989	2	add	
25	[BUG] [BUGGY] final int nCols = this.getColumnDimension(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	990	990	2	replace	
26	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); [BUGGY] [BUGGY] final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	990	990	2	add	
27	[BUG] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	replace	
28	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); [BUGGY] [BUGGY] final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	991	991	2	add	
29	[BUG] [BUGGY] for (int row = 0; row < nRows; row++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	replace	
30	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; [BUGGY] [BUGGY] for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	992	992	2	add	
31	[BUG] [BUGGY] BigDecimal sum = ZERO; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	993	993	2	replace	
32	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { [BUGGY] [BUGGY] BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	993	993	2	add	
33	[BUG] [BUGGY] for (int i = 0; i < nCols; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	replace	
34	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; [BUGGY] [BUGGY] for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	994	994	2	add	
35	[BUG] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); [BUGGY] } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	995	995	2	replace	
36	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { [BUGGY] [BUGGY] sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	995	995	2	add	
37	[BUG] [BUGGY] out[row] = sum; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] out[row] = sum; [BUGGY] } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	replace	
38	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throw new IllegalArgumentException("vector has wrong length"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); final BigDecimal[] out = new BigDecimal[v.length]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } [BUGGY] [BUGGY] out[row] = sum; } return out; } [CLASS] BigMatrixImpl [METHOD] operate [RETURN_TYPE] BigDecimal[]  BigDecimal[] v [VARIABLES] boolean int[] permutation selectedColumns selectedRows BigDecimal[] out v long serialVersionUID int col column columnCount columnDimension endColumn endRow i j nCols nRows nSum ncols nrows parity r roundingMode row rowCount rowDimension scale startColumn startRow BigDecimal ONE TOO_SMALL ZERO d det maxColSum sum trace BigDecimal[][] d data lu out outData subMatrix subMatrixData  	projects/Math98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java	0.4082482904638631	997	997	2	add	
