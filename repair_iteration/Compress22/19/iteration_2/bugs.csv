bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  b);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  b);	  c    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  destOffs);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  destOffs);	  c    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  0,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  0,  len);	  c    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  c  =  this.in.read(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs  +  1);	  c    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  b  =  read0()  +  destOffs;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read0()  +  destOffs;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read0()  +  destOffs;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  b  =  read0()  +  1;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read0()  +  1;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read0()  +  1;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  b  =  read1();  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read1();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read1();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  b  =  this.in.read0();  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  this.in.read0();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  this.in.read0();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  b  =  read0()  +  offs;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read0()  +  offs;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read0()  +  offs;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  b  =  read0()  +  hi;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read0()  +  hi;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read0()  +  hi;	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  count(destOffs,  b);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  b);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  count(destOffs,  len);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  len);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  count(destOffs,  destOffs);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  destOffs);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  count(destOffs,  offs);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  offs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  offs);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  count(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs  +  1);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  count(destOffs  -  offs);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs  -  offs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs  -  offs);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  count(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  hi);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  hi);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  b  =  read(destOffs,  len);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read(destOffs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read(destOffs,  len);	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  b  =  read(destOffs);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  read(destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  read(destOffs);	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  len);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  b);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  hi,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  1;	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.getAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.getAndMoveToFrontDecode_yy[destOffs++];	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  c  =(char)getAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =(char)getAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =(char)getAndMoveToFrontDecode_yy[destOffs++];	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  2;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  2;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  2;	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  b);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  len,  b);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  hi;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  hi;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  hi;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  1;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  destOffs;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  destOffs;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  offs;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  offs;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  2;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  2;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  2;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  len;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy  +  len;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy  +  len;	  c    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  System.arraycopy(dest,  0,  destOffs,  0,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	System.arraycopy(dest,  0,  destOffs,  0,  len);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray2,  offs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  char[]  temp_charArray2d  =  new  char[len];  System.arraycopy(temp_charArray,  0,  destOffs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray2,  offs,  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray2,  offs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray2,  offs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray,  0,  destOffs,  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray,  0,  destOffs,  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  char[]  temp_charArray2d  =  new  char[len  +  1];  System.arraycopy(temp_charArray,  0,  destOffs,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  offs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  offs,  len);	  c    =    this.in.read(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  hi);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  hi);	  c    =    this.in.read(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  len  +  1);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  len  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  len  +  1);	  c    =    this.in.read(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  c  =  in.read();  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  in.read();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  in.read();	  c    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  c  =  this.in.read(b);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(b);	  c    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  c  =  this.in.read(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(hi,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(hi,  destOffs);	  c    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1);	  c    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  destOffs,  len);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  destOffs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  destOffs,  len);	  c    =    this.in.read(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  offs  +  1);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  offs  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  offs  +  1);	  c    =    this.in.read(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  destOffs  +  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  destOffs  +  1);	  c    =    this.in.read(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy();	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  c  =  this.in.read(destOffs,  offs  +  len);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(destOffs,  offs  +  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(destOffs,  offs  +  len);	  c    =    this.in.read(destOffs,    offs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  c  =  this.in.read(len);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(len);	  c    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.readAndMoveToFrontDecode_yy[destOffs++];	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++],  b;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++],  b;	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  count(destOffs,  0);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  0);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  0);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  count(destOffs  -  1);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs  -  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs  -  1);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
64	[BUG]  [BUGGY]  c  =  this.in.read(len,  destOffs);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(len,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(len,  destOffs);	  c    =    this.in.read(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  hi);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(b);	  c    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  getAndMoveToFrontDecode_yy();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  getAndMoveToFrontDecode_yy();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  getAndMoveToFrontDecode_yy(b);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  getAndMoveToFrontDecode_yy(b);	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  b  =  getAndMoveToUnseq();  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  getAndMoveToUnseq();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  getAndMoveToUnseq();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  destOffs);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(len,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(len,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(hi,  destOffs);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  if(this.in  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in  ==  null)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  len);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  System.arraycopy(dest,  0,  destOffs,  b,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	System.arraycopy(dest,  0,  destOffs,  b,  len);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  len);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  System.arraycopy(data,  0,  destOffs,  offs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	System.arraycopy(data,  0,  destOffs,  offs,  len);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  dest[i][i]  =  read0();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  i++)  {  dest[i][i]  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(inUse)  {  System.arraycopy(dest,  0,  destOffs,  offs,  len);  }  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  System.arraycopy(dest,  0,  destOffs,  offs,  len);  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  System.arraycopy(dest,  0,  destOffs,  offs,  len);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][b]  =  data[i][0];  }  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][b]  =  data[i][0];  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in  ==  null)  {  for(int  i  =  0,  len  =  this.in.length;  i  <  len;  ++i)  {  dest[i][b]  =  data[i][0];  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  count(destOffs,  1);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  count(destOffs,  1);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	count(destOffs,  1);	  count(destOffs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  len);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs++,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs++,  len);	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy[destOffs++]  +  destOffs;	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  c  =  findAndMoveToFrontDecode_yy[destOffs++];  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  findAndMoveToFrontDecode_yy[destOffs++];  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  findAndMoveToFrontDecode_yy[destOffs++];	  c    =    getAndMoveToFrontDecode_yy[destOffs++];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  unzftab);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    hi);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs  +  1,  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  c  =  this.in.read(buffer,  offs,  len);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  this.in.read(buffer,  offs,  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  this.in.read(buffer,  offs,  len);	  c    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	c  =  getAndMoveToFrontDecode_yy(destOffs,  offs  +  len);	  c    =    getAndMoveToFrontDecode_yy(destOffs,    len);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  bsBuff  =  read0();  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  bsBuff  =  read0();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	bsBuff  =  read0();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  b  =  readUnseq();  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  readUnseq();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  readUnseq();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  b  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  b  =  this.in.read();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	b  =  this.in.read();	  b    =    read0();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy;  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	int  count  =  getAndMoveToFrontDecode_yy;	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  in.read(destOffs);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  in.read(destOffs);  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	in.read(destOffs);	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
92	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy();  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	int  count  =  getAndMoveToFrontDecode_yy();	  count(2);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.write(data[i][i]);  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.write(data[i][i]);  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.write(data[i][i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.close();  }  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.close();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(this.in!=  null)  {  for(int  i  =  offs;  i  <  len;  ++i)  {  this.in.close();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  inUse  =  false;  for(int  i  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i,  len);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  outUse  +=  read0();  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  outUse  +=  read0();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  outUse  +=  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  dest[i][i]  =  read0();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;  while  (destOffs  <  hi  &&  ((b  =  read0())  >=  0))  {  dest[destOffs++]  =  (byte)  b;    [BUGGY]  if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }  [BUGGY]    }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	176	176	1	replace	if(inUse)  {  inUse  =  false;  for(int  i  =  0,  len  =  offs;  i  <  len;  ++i)  {  System.arraycopy(dest,  0,  destOffs,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
