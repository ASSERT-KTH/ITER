bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  len))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  len))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  len))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  len))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
3	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  ==  len))  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  ==  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  ==  len))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  while  (destOffs  >=  hi  &&  ((  b  =  read0())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  >=  hi  &&  ((  b  =  read0())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  >=  hi  &&  ((  b  =  read0())  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    -    1)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
5	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())  >>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
6	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  -  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  -  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2()  -  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
7	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >>  0))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
8	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(destOffs,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  su_z);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  su_z);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi,  su_z);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi,  destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(offs,  hi);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(offs,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(offs,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi  +  1);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi  +  1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi  +  1);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  [Delete]  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  [Delete]  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())  [Delete]  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock()    +    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
16	[BUG]  [BUGGY]  int  count  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(hi);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
17	[BUG]  [BUGGY]  int  count  =  this.in.read(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(hi,  destOffs);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
18	[BUG]  [BUGGY]  int  count  =  hi.read();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  hi.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  hi.read();	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
19	[BUG]  [BUGGY]  int  count  =  this.in.read(su_ch2);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(su_ch2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(su_ch2);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
20	[BUG]  [BUGGY]  int  count  =  this.in.read(hi,  b);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(hi,  b);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(hi,  b);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
21	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  ==  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
22	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  >  0)))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  >  0)))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  >  0)))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
23	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  *  1)>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  *  1)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  *  1)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
24	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
25	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(destOffs);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
26	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_rNToGo);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
27	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_z,  hi);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_z,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_z,  hi);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
28	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_ch2);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
29	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_i2);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_i2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_i2);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
30	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(li);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(li);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(li);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
31	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getCount();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getCount();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.getCount();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
32	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.length();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.length();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.length();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
33	[BUG]  [BUGGY]  int  count  =  hi.getLength();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  hi.getLength();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  hi.getLength();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
34	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.size();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.size();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.size();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
35	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  hi;  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  hi;	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
36	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  -  hi;  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  -  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.getLength()  -  hi;	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
37	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  1;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.getLength()  +  1;	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
38	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
39	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
40	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  *  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  *  offs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  *  offs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
41	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >>  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  destOffs)  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
43	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  len)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  len)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  len)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
44	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())  >>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readShort())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readShort())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
47	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    <    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
48	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_rNToGo);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  byte  b  =  getAndMoveToFrontDecode_yy(su_z);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  byte  b  =  getAndMoveToFrontDecode_yy(su_z);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	byte  b  =  getAndMoveToFrontDecode_yy(su_z);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
50	[BUG]  [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(su_z);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(su_z);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	char  b  =  getAndMoveToFrontDecode_yy(su_z);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
51	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(i);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(i);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(i);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
52	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())!=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read3())!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readShort())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readState())>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readState())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readState())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  +  1)>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  +  1)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2()  +  1)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())>  0))  {	  while(destOffs    <    hi    ||    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
58	[BUG]  [BUGGY]  while(destOffs  >=  hi  ||  ((  b  =  readBlock())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  ||  ((  b  =  readBlock())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  ||  ((  b  =  readBlock())  >=  0))  {	  while(destOffs    <    hi    ||    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())!=  0))  {	  while(destOffs    <    hi    ||    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readStandardBlock())!=  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readStandardBlock())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readStandardBlock())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
64	[BUG]  [BUGGY]  int  count(2);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(2);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  int  count(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(hi,  destOffs);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  int  count(hi);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(hi);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  int  count(hi  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(hi  +  1,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(hi  +  1,  destOffs);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  int  count(hi  +  1,  len);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(hi  +  1,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(hi  +  1,  len);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  byte  count(1);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  byte  count(1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	byte  count(1);	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLocal())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLocal())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
71	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  >>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLocal())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLocal())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
72	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLocal())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLocal())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
73	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLocal())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLocal())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
74	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read3())  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
75	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  readLong())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  readLong())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  readLong())  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
76	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.readBlock())>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.readBlock())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.readBlock())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  16))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  16))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())>  16))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(b  <  len))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(b  <  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(b  <  len))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(hi  <  len))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(hi  <  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0)||(hi  <  len))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
82	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
83	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
84	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  -  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  -  offs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2()  -  offs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
85	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
86	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi,  destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
87	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs  +  1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(destOffs  +  1);	  int    b    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(i,  destOffs);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(i,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(i,  destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  byte  b  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  byte  b  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	byte  b  =  getAndMoveToFrontDecode_yy(destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    +    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
91	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  &  1)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    +    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    +    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
93	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    +    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs,  hi);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
95	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs,  b);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs,  b);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs,  b);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
96	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs,  offs);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs,  offs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs,  offs);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
97	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs,  len);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs,  len);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
98	[BUG]  [BUGGY]  int  count  =  this.in.read(i,  destOffs);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(i,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(i,  destOffs);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
99	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readChar())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readChar())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readChar())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
100	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readInt())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readInt())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.in.readInt())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
101	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readByte())>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readByte())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readByte())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
102	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readFully())>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readFully())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readFully())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
103	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  >>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read3())  >>  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read3())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()).length!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()).length!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read0()).length!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    +    1)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
106	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
107	[BUG]  [BUGGY]  int  count  =  hi;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
108	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  hi;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
109	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  1;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  1;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  1;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
110	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  hi;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  -  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  -  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
111	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  &  hi;  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  &  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  &  hi;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
112	[BUG]  [BUGGY]  int  count  =  hi  +  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  hi  +  getAndMoveToFrontDecode_yy;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  hi  +  getAndMoveToFrontDecode_yy;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
113	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read4())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
114	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  ==  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read4())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
115	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read4())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
116	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)!=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  4)!=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
117	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
118	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  3)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  3)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  3)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
119	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  3)!=  0)  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  3)!=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  3)!=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
120	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)!=  0)  {  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)!=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)!=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
121	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  ==  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  ==  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
122	[BUG]  [BUGGY]  b  =  this.in.read(hi);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(hi);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
123	[BUG]  [BUGGY]  b  =  this.in.read(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(hi,  destOffs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
124	[BUG]  [BUGGY]  b  =  this.in.read(destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(destOffs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
125	[BUG]  [BUGGY]  b  =  this.in.read(hi,  offs);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(hi,  offs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(hi,  offs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
126	[BUG]  [BUGGY]  b  =  this.in.readShort();  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.readShort();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.readShort();	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
127	[BUG]  [BUGGY]  b  =  this.in.read(hi,  0,  destOffs);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(hi,  0,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(hi,  0,  destOffs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
128	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())!=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(hi);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.read(hi);	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
130	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.read(hi,  destOffs);	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
131	[BUG]  [BUGGY]  int  count  =  readAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  readAndMoveToFrontDecode_yy.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  readAndMoveToFrontDecode_yy.read();	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
132	[BUG]  [BUGGY]  int  count  =  this.in.readAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.readAndMoveToFrontDecode_yy.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.readAndMoveToFrontDecode_yy.read();	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
133	[BUG]  [BUGGY]  int  count  =  this.su_ch2.read();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.su_ch2.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.su_ch2.read();	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
134	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
135	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >>  0))  {	  while(destOffs    >=    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
136	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())>  0))  {	  while(destOffs    >=    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
137	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  =  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  =  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())  <  =  0))  {	  while(destOffs    >=    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
138	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  *  0xfff)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  *  0xfff)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  *  0xfff)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  +  0xfff)  >>  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  4!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  4!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  4!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
144	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
145	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
146	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  1))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  1))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
147	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())/  2!=  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())/  2!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())/  2!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
148	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  ==  0))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
149	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(destOffs,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(destOffs,  hi);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
150	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(hi,  destOffs);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
151	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_ch2,  hi);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
152	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2  +  hi);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_ch2  +  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_ch2  +  hi);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
153	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_ch2);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_ch2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_ch2);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
154	[BUG]  [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	char  b  =  getAndMoveToFrontDecode_yy(hi);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
155	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())  >>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
156	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUnsignedShort())  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUnsignedShort())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readUnsignedShort())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
157	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readFully())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readFully())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readFully())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
158	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  -  hi;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  -  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy()  -  hi;	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  hi;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy()  +  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy()  +  hi;	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
160	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(1);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
161	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readChar())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readChar())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readChar())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
162	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readByte())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readByte())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readByte())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
163	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  1)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
164	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3())>  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read3())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
165	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1))  >  1)  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1))  >  1)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  +  1))  >  1)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
166	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  16))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  16))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  16))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
167	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  1))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1())>  1))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
168	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  hi);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(li,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
169	[BUG]  [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(li);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(li);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	char  b  =  getAndMoveToFrontDecode_yy(li);	  int    b    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
170	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())/  0))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())/  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())/  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
171	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)>  0)  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)>  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)>  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
172	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  false)  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  false)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  false)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
173	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)!=  0)  {  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)!=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)!=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
174	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)*  2)  {  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)*  2)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)*  2)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
175	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  ==  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
176	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi  +  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi  +  1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi  +  1);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
177	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(len);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(len);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
178	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi  +  1,  len);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
179	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  len);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi,  len);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
180	[BUG]  [BUGGY]  int  count(1)  =  0;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  0;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  0;	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
181	[BUG]  [BUGGY]  int  count(1)  =  hi;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  hi;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  hi;	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
182	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  destOffs;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
183	[BUG]  [BUGGY]  int  count  =  this.in.readAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.readAndMoveToFrontDecode_yy;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.readAndMoveToFrontDecode_yy;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
184	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  2;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  2;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
185	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b.length;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  b.length;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  b.length;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
186	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  3!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  3!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  3!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())%    2!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
187	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  1))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())>  1))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
188	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(2);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(2);	  int    count    =    getAndMoveToFrontDecode_yy();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
189	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())  >=  1))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())  >=  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())  >=  1))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
190	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())>  1))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())>  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2())>  1))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
191	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi,  b);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi,  b);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(hi,  b);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
192	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(len);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(len);	  int    count    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
193	[BUG]  [BUGGY]  int  count  =  this.in.read(len);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(len);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
194	[BUG]  [BUGGY]  int  count  =  this.in.read(b);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(b);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(b);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
195	[BUG]  [BUGGY]  int  count  =  this.in.read(bits);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(bits);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(bits);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
196	[BUG]  [BUGGY]  b  =  this.in.read(bits);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(bits);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(bits);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
197	[BUG]  [BUGGY]  b  =  this.in.read(li);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(li);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(li);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
198	[BUG]  [BUGGY]  b  =  this.in.read(hi  +  1,  destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(hi  +  1,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(hi  +  1,  destOffs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
199	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  hi))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  hi))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >  hi))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
200	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  0))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
201	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0)||(hi  <  len))  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0)||(hi  <  len))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1())>  0)||(hi  <  len))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
202	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  16))  {  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  16))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  16))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
203	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li  +  1);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li  +  1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(li  +  1);	  int    b    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
204	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  8)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  8)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  8)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
205	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1())>  0)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
206	[BUG]  [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  char  b  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	char  b  =  getAndMoveToFrontDecode_yy(destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(destOffs);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
207	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_i2);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_i2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_i2);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
208	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.length;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.length;	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
209	[BUG]  [BUGGY]  int  count  =  this.in.getLength();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.getLength();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.getLength();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
210	[BUG]  [BUGGY]  int  count  =  this.getAndMoveToFrontDecode_yy.getLength();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.getAndMoveToFrontDecode_yy.getLength();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.getAndMoveToFrontDecode_yy.getLength();	  int    count    =    getAndMoveToFrontDecode_yy.getLength();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
211	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  >  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  >  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  >  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
212	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read(0))>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read(0))>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read(0))>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
213	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs  -  hi);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs  -  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs  -  hi);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
214	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs  +  1);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(destOffs  +  1);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs  +  1);	  int    count    =    this.in.read(destOffs);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
215	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())!=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
216	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  1))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())>  1))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
217	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  16))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  16))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())>  16))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
218	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read())  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read3())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
219	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3()  -  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3()  -  offs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read3()  -  offs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
220	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    -    1)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
221	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())+  1)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())+  1)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())+  1)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readLong())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
222	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  +  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  +  offs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2()  +  offs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
223	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
224	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    -    1)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
225	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUnsigned())  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUnsigned())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readUnsigned())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
226	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUTF())  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readUTF())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readUTF())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
227	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_j2);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_j2);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_j2);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
228	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {	  while(destOffs    >=    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
229	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
230	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  ==  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())  ==  0))  {	  while(destOffs    <    hi    ||    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
231	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  >  0)  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  >  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1)  >=  >  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
232	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(len,  hi);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(len,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(len,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
233	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(recv,  hi);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(recv,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(recv,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
234	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_j2,  hi);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_j2,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_j2,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
235	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())  >>  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
236	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xff)  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xff)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xff)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
237	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(destOffs);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.read(destOffs);	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
238	[BUG]  [BUGGY]  int  count  =  this.readAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.readAndMoveToFrontDecode_yy.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.readAndMoveToFrontDecode_yy.read();	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
239	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(this.in);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read(this.in);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.read(this.in);	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
240	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3()  -  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3()  -  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read3()  -  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
241	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readEnd())  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readEnd())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readEnd())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readShort())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
242	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    1))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
243	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  offs;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy  +  offs;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy  +  offs;	  int    count    =    getAndMoveToFrontDecode_yy;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
244	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  destOffs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  destOffs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  destOffs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
245	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  <  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  <  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  <  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
246	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  destOffs)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  destOffs)  >=  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())%  destOffs)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    readLong())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
247	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())+  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())+  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())+  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLong())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
248	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  2!=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  2!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())%  2!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLong())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
249	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  2  >=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())%  2  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())%  2  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readLong())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
250	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())%  2!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())%  2!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())%  2!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
251	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readOutt())  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readOutt())  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readOutt())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
252	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())+  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())+  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())+  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
253	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  >  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  >  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  >  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0()    +    1)>    0))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
254	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  >>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())  >>  0))  {	  while(destOffs    <    hi    ||    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
255	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock()  -  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock()  -  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock()  -  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
256	[BUG]  [BUGGY]  b  =  this.in.read(width,  len);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(width,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(width,  len);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
257	[BUG]  [BUGGY]  b  =  this.in.read(offs);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  b  =  this.in.read(offs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read(offs);	  b    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
258	[BUG]  [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  getAndMoveToFrontDecode_yy;	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
259	[BUG]  [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy.length;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy.length;  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  getAndMoveToFrontDecode_yy.length;	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
260	[BUG]  [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy.length();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy.length();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  getAndMoveToFrontDecode_yy.length();	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
261	[BUG]  [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count(1)  =  getAndMoveToFrontDecode_yy();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1)  =  getAndMoveToFrontDecode_yy();	  int    count(1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
262	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(offs);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(offs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(offs);	  int    b    =    getAndMoveToFrontDecode_yy(hi);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
263	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  offs,  hi);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  offs,  hi);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z,  offs,  hi);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
264	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  len);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  len);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z,  len);	  int    b    =    getAndMoveToFrontDecode_yy(su_z,    hi);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
265	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  destOffs);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  destOffs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(li,  destOffs);	  int    b    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
266	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  this.in);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li,  this.in);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(li,  this.in);	  int    b    =    getAndMoveToFrontDecode_yy(li);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
267	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode_yy())>  0))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode_yy())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode_yy())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
268	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.in.readBlock())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
269	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  getAndMoveToFrontDecode())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
270	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  offs))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  offs))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  >=  offs))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0)||(hi    <    len))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
271	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  1))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  1))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    <    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
272	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  <  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  <  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())  <  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    <    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
273	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.readBlock())  <  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  this.readBlock())  <  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  this.readBlock())  <  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    <    0))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
274	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3())  >=  1))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read3())  >=  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read3())  >=  1))  {	  while    (destOffs    <    hi    &&    ((    b    =    read3())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
275	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  <  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  <  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
276	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  ==  0)  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)  ==  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    4)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
277	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >>  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
278	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  <  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  <  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  <  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
279	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  &  0xfff)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2()  &  0xfff)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2()  &  0xfff)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1()    &    0xfff)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
280	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())%  2!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())%  2!=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())%  2!=  0))  {	  while(destOffs    >=    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
281	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  &  offs)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  &  offs)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    +    offs)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
282	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_li);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_li);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_li);	  int    count    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
283	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >=  1))  {  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >=  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())  >=  1))  {	  while(destOffs    <    hi    &&    ((    b    =    read4())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
284	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read4())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
285	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  1)  >=  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read1()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
286	[BUG]  [BUGGY]  int  count  =  this.getAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.getAndMoveToFrontDecode_yy.read();  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.getAndMoveToFrontDecode_yy.read();	  int    count    =    getAndMoveToFrontDecode_yy.read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
287	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readOutt())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readOutt())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readOutt())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
288	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readInt())>  0))  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readInt())>  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readInt())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readInt())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
289	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1))  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  1))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
290	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  0))  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
291	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())+  0))  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())+  0))  {  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())+  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())+    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
292	[BUG]  [BUGGY]  int  count  =  this.in.read(dest);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(dest);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(dest);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
293	[BUG]  [BUGGY]  int  count  =  this.in.read(buffer,  offs);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  count  =  this.in.read(buffer,  offs);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(buffer,  offs);	  int    count    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
294	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_h);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      throw  new  IndexOutOfBoundsException(     "offs(     "  +  offs  +       ")  +  len(     "  +  len  +       ")  >  dest.length(     "  +  dest.length  +       ").     ");  }  if  (this.in  ==  null)  {  throw  new  IOException(     "stream  closed     ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;      [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_h);  [BUGGY]      dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_h);	  int    b    =    getAndMoveToFrontDecode_yy(su_z);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
