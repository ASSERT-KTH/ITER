bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1())!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1())!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1())!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0())!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read0()  +  1)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)!=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)!=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0())    >>    0))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  >>  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  >>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  ==  0))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  ==  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())  ==  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())!=  0))  {  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  -  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  0))  {  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())+  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())+  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  +  1)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1()  &  0xfff)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read3())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read3())  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  int  count(1);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count(1);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count(1);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(hi);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy;  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z,  hi);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(su_z);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(su_z);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi);  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(hi);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(hi);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs);  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(destOffs);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(destOffs);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1())  ==  0))  {  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read1())  ==  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read1())  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)  ==  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while  (destOffs  <  hi  &&  ((  b  =  read0()  -  1)  ==  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0())    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readShort())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readShort())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())  >=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLong())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLong())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())  >>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())  >>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2())  >>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())!=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2())!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)>  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0()  +  1)>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  1))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  1))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  1))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0))  {  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1())>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  >=  0)  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  4)  >=  0)  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  <  len))  {  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  <  len))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read0())>  0)||(hi  <  len))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  b  =  getAndMoveToFrontDecode_yy(li);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  b  =  getAndMoveToFrontDecode_yy(li);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy();  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy();  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_z);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy(su_z);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy(su_z);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())>  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read2())>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read2())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock()  +  1)  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  >=  hi  &&  ((  b  =  readBlock())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  >=  0))  {  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  1)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read0()    -    1)    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read4())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read4())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  -  offs)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  read1()  +  offs)  >=  0))  {	  while    (destOffs    <    hi    &&    ((    b    =    read1())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())  <  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readBlock())%  2!=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  >=  0))  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  ||  ((  b  =  readBlock())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  ||  ((  b  =  readBlock())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    readBlock())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  0))  {  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readInt())>  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readInt())>  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read0())>    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  >=  0))  {  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  while(destOffs  <  hi  &&  ((  b  =  readLocal())  >=  0))  {  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	while(destOffs  <  hi  &&  ((  b  =  readLocal())  >=  0))  {	  while(destOffs    <    hi    &&    ((    b    =    read2())    >=    0))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  int  count  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  this.in.read();  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read();  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.read();  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength();  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  getAndMoveToFrontDecode_yy.getLength();  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  getAndMoveToFrontDecode_yy.getLength();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  int  count  =  this.in.read(destOffs);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  int  count  =  this.in.read(destOffs);  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	int  count  =  this.in.read(destOffs);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  b  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    throw  new  IndexOutOfBoundsException(   "offs(   "  +  offs  +     ")  +  len(   "  +  len  +     ")  >  dest.length(   "  +  dest.length  +     ").   ");  }  if  (this.in  ==  null)  {  throw  new  IOException(   "stream  closed   ");  }  final  int  hi  =  offs  +  len;  int  destOffs  =  offs;  int  b;    [BUGGY]  b  =  this.in.read();  [BUGGY]    dest[destOffs++]  =  (byte)  b;  count(1);  }  int  c  =  (destOffs  ==  offs)  ?  -1  :  (destOffs  -  offs);  return  c;  }  [CLASS]  BZip2CompressorInputStream  Data  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  dest  final  int  offs  final  int  len  [VARIABLES]  int[][]  base  limit  perm  InputStream  in  char[][]  temp_charArray2d  Data  data  int[]  cftab  minLens  tt  unzftab  int  EOF  NO_RAND_PART_A_STATE  NO_RAND_PART_B_STATE  NO_RAND_PART_C_STATE  RAND_PART_A_STATE  RAND_PART_B_STATE  RAND_PART_C_STATE  START_BLOCK_STATE  b  blockSize100k  bsBuff  bsLive  c  computedBlockCRC  computedCombinedCRC  currentChar  currentState  destOffs  hi  last  len  nInUse  offs  origPtr  r  storedBlockCRC  storedCombinedCRC  su_ch2  su_chPrev  su_count  su_i2  su_j2  su_rNToGo  su_rTPos  su_tPos  char[]  getAndMoveToFrontDecode_yy  byte[]  dest  ll8  recvDecodingTables_pos  selector  selectorMtf  seqToUnseq  boolean  blockRandomised  decompressConcatenated  CRC  crc  char  su_z  boolean[]  inUse  	projects/Compress22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java	0.7071067811865475	174	174	1	replace	b  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
