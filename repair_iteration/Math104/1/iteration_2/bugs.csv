bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  0.0;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  0.0;	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
2	[BUG]  [BUGGY]  ret  =  0.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  0.0;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  0.0;	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
3	[BUG]  [BUGGY]  ||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	compilable	  [FE]  AssertionFailedError  	14	2	add
5	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	compilable	  [FE]  AssertionFailedError  	14	2	add
6	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  normalizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
7	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
8	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  regularizedGammaQ(a,  x,  epsilon,  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	14	None	add
9	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  >=  1.0  &&  a  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  >=  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (x    >=    1.0    &&    a    >    a)    {    }  else  if  (x  >=  1.0  &&  a  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	7	None	add
10	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  >>  1.0  &&  a  >  a)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  >>  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (x    >=    1.0    &&    a    >    a)    {    }  else  if  (x  >>  1.0  &&  a  >  a)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	7	None	add
11	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x!=  1.0  &&  a  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x!=  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (x    >=    1.0    &&    a    >    a)    {    }  else  if  (x!=  1.0  &&  a  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	7	None	add
12	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  ==  1.0  &&  a  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  }  else  if  (x  ==  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (x    >=    1.0    &&    a    >    a)    {    }  else  if  (x  ==  1.0  &&  a  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	7	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  1.0;	      if(Double.isNaN(a)||    Double.isNaN(x)||    (a    <    =    0.0)||(x    <    0.0))    {    ret    =    1.0;    }    	compilable	  [FE]  AssertionFailedError  	17	1	replace
14	[BUG]  [BUGGY]  ret  =  1.0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0;	      if(Double.isNaN(a)||    Double.isNaN(x)||    (a    <    =    0.0)||(x    <    0.0))    {    ret    =    1.0;    }    	compilable	  [FE]  AssertionFailedError  	17	1	replace
15	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  1.0))  {  ret  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  1.0))  {  ret  =  1.0;  }  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  1.0))  {  ret  =  1.0;  }	      if(Double.isNaN(a)||    Double.isNaN(x)||    (a    <    =    0.0)||(x    <    0.0))    {    ret    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  1.0  -  regularizedGammaP(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
17	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaP(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	2	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  /  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  1.0  /  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
19	[BUG]  [BUGGY]  ret  =  1.0  /  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  /  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  /  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
20	[BUG]  [BUGGY]  ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  <  1.0  &&  a  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
22	[BUG]  [BUGGY]  }  else  if(x  <  1.0  &&  a  >  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  1.0  &&  a  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  ||  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  ||  x  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
24	[BUG]  [BUGGY]  }  else  if(a  <  1.0  ||  x  >  a)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  ||  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  ||  x  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  >  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  <  1.0  &&  a  >  epsilon)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
26	[BUG]  [BUGGY]  }  else  if(x  <  1.0  &&  a  >  epsilon)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  >  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  1.0  &&  a  >  epsilon)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  &&  x  >  epsilon)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
28	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  epsilon)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  &&  x  >  epsilon)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
29	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  >=  1.0  &&  x  <  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  >=  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (a    >=    1.0    &&    x    <    a)    {    }  else  if  (a  >=  1.0  &&  x  <  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	9	None	add
30	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a!=  1.0  &&  x  <  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a!=  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (a    >=    1.0    &&    x    <    a)    {    }  else  if  (a!=  1.0  &&  x  <  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	9	None	add
31	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  >>  1.0  &&  x  <  a)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  >>  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (a    >=    1.0    &&    x    <    a)    {    }  else  if  (a  >>  1.0  &&  x  <  a)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
32	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  ==  1.0  &&  x  <  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  }  else  if  (a  ==  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (a    >=    1.0    &&    x    <    a)    {    }  else  if  (a  ==  1.0  &&  x  <  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	9	None	add
33	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,<null>,double,int)  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    null,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,<null>,double,int)	3	None	replace
34	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  sum,  null,  maxIterations);  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  sum,  null,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  sum,  null,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    null,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  sum	3	None	replace
35	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  a)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >=  1.0  &&  a  <  =  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
36	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  =  DEFAULT_EPSILON)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (a  >=  1.0  &&  x  <  =  DEFAULT_EPSILON)  {	  }    else    if    (a    >=    1.0    &&    x    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  =  x)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  =  x)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0  &&  a  <  =  x)  {	  }    else    if    (a    >=    1.0    &&    x    <    =    a)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  }  else  if(a  <  1.0  &&  x  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    }  else  if(a  <  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	12	None	add
39	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  else  if(a  <  1.0  &&  x  >  a)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    else  if(a  <  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  'else'  without  'if'	12	None	add
40	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  <  }  else  if(a  <  1.0  &&  x  >  a)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  <  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    <  }  else  if(a  <  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
41	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  }  else  if(a  >=  1.0  &&  x  >  a)  {  [CE]  variable  ret  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  }  else  if(a  >=  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    }  else  if(a  >=  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	12	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  regularizedGammaP(a,  x,  epsilon,  maxIterations);	      ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
43	[BUG]  [BUGGY]  ret  =  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  regularizedGammaP(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  regularizedGammaP(a,  x,  epsilon,  maxIterations);	      ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	15	2	replace
44	[BUG]  [BUGGY]  ret  =  regularizedGammaQ(a,  x,  epsilon,  n);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  regularizedGammaQ(a,  x,  epsilon,  n);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  regularizedGammaQ(a,  x,  epsilon,  n);	      ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
45	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  <  =  0.0)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >=  1.0  &&  a  <  =  0.0)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  }  else  if  (x  >  1.0  &&  a  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >  1.0  &&  a  <  =  0.0)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >  1.0  &&  a  <  =  0.0)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon);  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
48	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon);  [CE]  cannot  find  symbol  an  [FE]                  AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  an,  epsilon);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  an	6	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  >=  1.0  &&  a  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
50	[BUG]  [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0  &&  a  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if  (a  >=  1.0  &&  x  <  epsilon)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
52	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  epsilon)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  epsilon)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (a  >=  1.0  &&  x  <  epsilon)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  <  1.0  &&  a  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
54	[BUG]  [BUGGY]  }  else  if(x  <  1.0  &&  a  <  a)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  1.0  &&  a  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
56	[BUG]  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	compilable	  [FE]  AssertionFailedError  	1	1	add
57	[BUG]  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  1.0  -  periodicizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
58	[BUG]  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);	  	non-compiled	[CE]  cannot  find  symbol  minIterations	1	None	add
59	[BUG]  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Ret  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Ret	1	None	add
60	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  Ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Ret  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  Ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    Ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  cannot  find  symbol  Ret	14	None	add
61	[BUG]  [BUGGY]  Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  Ret  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	Ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  Ret	4	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  <  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if  (a  <  1.0  &&  x  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    =    a)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
63	[BUG]  [BUGGY]  }  else  if  (a  <  1.0  &&  x  <  a)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  <  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (a  <  1.0  &&  x  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    =    a)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
64	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  else  if  (a  >=  1.0  &&  x  <  a)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  else  if  (a  >=  1.0  &&  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (a    >=    1.0    &&    x    <    a)    {    else  if  (a  >=  1.0  &&  x  <  a)  {	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
66	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  maxIterations);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
67	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  DEFAULT_EPSILON,  epsilon);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double,double)  [FE]                  AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  DEFAULT_EPSILON,  epsilon);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  DEFAULT_EPSILON,  epsilon);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double,double)	6	None	replace
68	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  >  0.0))  {  ret  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  >  0.0))  {  ret  =  1.0;  }  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  >  0.0))  {  ret  =  1.0;  }	      if(Double.isNaN(a)||    Double.isNaN(x)||    (a    <    =    0.0)||(x    <    0.0))    {    ret    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  a  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  variable  a  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  a  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    double  a  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	12	None	add
70	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	12	None	add
71	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  a  =  1.0  -  regularizedGammaQ(a,  0,  epsilon,  maxIterations);  [CE]  variable  a  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  a  =  1.0  -  regularizedGammaQ(a,  0,  epsilon,  maxIterations);  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    double  a  =  1.0  -  regularizedGammaQ(a,  0,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	12	None	add
72	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  >  0.0))  {  ret  =  0.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  >  0.0))  {  ret  =  0.0;  }  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  >  0.0))  {  ret  =  0.0;  }	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  n,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    null,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	3	None	replace
74	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  else  if  (x  >=  1.0  &&  a  >  a)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  else  if  (x  >=  1.0  &&  a  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if    (x    >=    1.0    &&    a    >    a)    {    else  if  (x  >=  1.0  &&  a  >  a)  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  <  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
76	[BUG]  [BUGGY]  }  else  if(x  <  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  ==  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  &&  x  ==  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
78	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  ==  a)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  ==  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  &&  x  ==  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >=  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  &&  x  >=  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
80	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >=  a)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >=  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  &&  x  >=  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
81	[BUG]  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	1	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations  +  1);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations  +  1);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
83	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations  +  1);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations  +  1);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  ||  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  ||  x  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
85	[BUG]  [BUGGY]  }  else  if(a  <  1.0  ||  x  <  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  ||  x  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  ||  x  <  a)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  1.0)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  >=  1.0  &&  a  <  1.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
87	[BUG]  [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  1.0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >=  1.0  &&  a  <  1.0)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0  &&  a  <  1.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
88	[BUG]  [BUGGY]  ret  =  regularizedGammaQ(a,  x,  epsilon,  n,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  regularizedGammaQ(a,  x,  epsilon,  n,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  regularizedGammaQ(a,  x,  epsilon,  n,  maxIterations);	      ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
89	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    double  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	12	None	add
90	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  double  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}    else    if(a    <    1.0    &&    x    >    a)    {    double  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);  }  else  if(a  <  1.0  &&  x  >  a)  {	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	12	None	add
91	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  0,  maxIterations);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double,int,int)  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  0,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  0,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double,int,int)	2	None	replace
92	[BUG]  [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,int,double,int)  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  1.0  -  regularizedGammaQ(a,  x,  0,  epsilon,  maxIterations);	      ret    =    1.0    -    regularizedGammaQ(a,    x,    null,    maxIterations);    	non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,int,double,int)	3	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  Double.NaN;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	ret  =  Double.NaN;	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
94	[BUG]  [BUGGY]  ret  =  Double.NaN;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  ret  =  Double.NaN;  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	ret  =  Double.NaN;	      if(Double.isNaN(a)||    Double.isNaN(x)||(a    <    =    0.0)||(x    <    0.0))    {    ret    =    0.0;    }    	compilable	  [FE]  AssertionFailedError  	16	1	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  a  ||  a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  <  a  ||  a  <  1.0  &&  x  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
96	[BUG]  [BUGGY]  }  else  if(x  <  a  ||  a  <  1.0  &&  x  >  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  <  a  ||  a  <  1.0  &&  x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  <  a  ||  a  <  1.0  &&  x  >  a)  {	  }    else    if(a    <    1.0    &&    x    >    a)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
97	[BUG]  [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]      ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]    }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	        ret    =    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    double  ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  regularizedGammaP(double,double,double,int)	14	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  >  a)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
99	[BUG]  [BUGGY]  }  else  if(x  >  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >  a)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
100	[BUG]  [BUGGY]  }  else  if(x  >  1.0  &&  a  <  =  1.0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >  1.0  &&  a  <  =  1.0)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >  1.0  &&  a  <  =  1.0)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(x  >  1.0  &&  a  <  a)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
102	[BUG]  [BUGGY]  }  else  if(x  >  1.0  &&  a  <  a)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;    [BUGGY]  }  else  if(x  >  1.0  &&  a  <  a)  {  [BUGGY]      ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >  1.0  &&  a  <  a)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
