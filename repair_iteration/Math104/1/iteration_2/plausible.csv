10	[BUG]    [BUGGY]    }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    [CE]    'else'    without    'if'    [FE]        AssertionFailedError        [CONTEXT]        {    double    ret;    if    (Double.isNaN(a)    ||    Double.isNaN(x)    ||    (a    <=    0.0)    ||    (x    <    0.0))    {    ret    =    Double.NaN;    }    else    if    (x    ==    0.0)    {    ret    =    0.0;        [BUGGY]    }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    [BUGGY]            ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    }    else    {    double    n    =    0.0;    //    current    element    index    double    an    =    1.0    /    a;    //    n-th    element    in    the    series    double    sum    =    an;    //    partial    sum    while    (Math.abs(an)    >    epsilon    &&    n    <    maxIterations)    {    [CLASS]    Gamma    1    [METHOD]    regularizedGammaP    [RETURN_TYPE]    double    double    a    double    x    double    epsilon    int    maxIterations    [VARIABLES]    boolean    double[]    lanczos    double    DEFAULT_EPSILON    HALF_LOG_2_PI    a    an    epsilon    g    n    ret    sum    tmp    x    long    serialVersionUID    int    maxIterations    	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    	plausible		64	0
12	[BUG]    [BUGGY]    }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    [CE]    'else'    without    'if'    [FE]        AssertionFailedError        [CONTEXT]        {    double    ret;    if    (Double.isNaN(a)    ||    Double.isNaN(x)    ||    (a    <=    0.0)    ||    (x    <    0.0))    {    ret    =    Double.NaN;    }    else    if    (x    ==    0.0)    {    ret    =    0.0;        [BUGGY]    }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    [BUGGY]            ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    }    else    {    double    n    =    0.0;    //    current    element    index    double    an    =    1.0    /    a;    //    n-th    element    in    the    series    double    sum    =    an;    //    partial    sum    while    (Math.abs(an)    >    epsilon    &&    n    <    maxIterations)    {    [CLASS]    Gamma    1    [METHOD]    regularizedGammaP    [RETURN_TYPE]    double    double    a    double    x    double    epsilon    int    maxIterations    [VARIABLES]    boolean    double[]    lanczos    double    DEFAULT_EPSILON    HALF_LOG_2_PI    a    an    epsilon    g    n    ret    sum    tmp    x    long    serialVersionUID    int    maxIterations    	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x!=  0.0)  {	  }    else    if    (a    >=    1.0    &&    x    <    a)    {    else    if    (a    >=    1.0    &&    x    <    a)    {    	plausible		64	0
21	[BUG]    [BUGGY]    }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    [CE]    variable    ret    might    not    have    been    initialized    [FE]                AssertionFailedError        [CONTEXT]        {    double    ret;    if    (Double.isNaN(a)    ||    Double.isNaN(x)    ||    (a    <=    0.0)    ||    (x    <    0.0))    {    ret    =    Double.NaN;    }    else    if    (x    ==    0.0)    {    ret    =    0.0;        [BUGGY]    }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    [BUGGY]            ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    }    else    {    double    n    =    0.0;    //    current    element    index    double    an    =    1.0    /    a;    //    n-th    element    in    the    series    double    sum    =    an;    //    partial    sum    while    (Math.abs(an)    >    epsilon    &&    n    <    maxIterations)    {    [CLASS]    Gamma    1    [METHOD]    regularizedGammaP    [RETURN_TYPE]    double    double    a    double    x    double    epsilon    int    maxIterations    [VARIABLES]    boolean    double[]    lanczos    double    DEFAULT_EPSILON    HALF_LOG_2_PI    a    an    epsilon    g    n    ret    sum    tmp    x    long    serialVersionUID    int    maxIterations    	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  >=  1.0  &&  a  >  epsilon)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    	plausible		11	0
21	[BUG]    [BUGGY]    }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    [CE]    variable    ret    might    not    have    been    initialized    [FE]                AssertionFailedError        [CONTEXT]        {    double    ret;    if    (Double.isNaN(a)    ||    Double.isNaN(x)    ||    (a    <=    0.0)    ||    (x    <    0.0))    {    ret    =    Double.NaN;    }    else    if    (x    ==    0.0)    {    ret    =    0.0;        [BUGGY]    }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    [BUGGY]            ret    =    1.0    -    regularizedGammaQ(a,    x,    epsilon,    maxIterations);    }    else    {    double    n    =    0.0;    //    current    element    index    double    an    =    1.0    /    a;    //    n-th    element    in    the    series    double    sum    =    an;    //    partial    sum    while    (Math.abs(an)    >    epsilon    &&    n    <    maxIterations)    {    [CLASS]    Gamma    1    [METHOD]    regularizedGammaP    [RETURN_TYPE]    double    double    a    double    x    double    epsilon    int    maxIterations    [VARIABLES]    boolean    double[]    lanczos    double    DEFAULT_EPSILON    HALF_LOG_2_PI    a    an    epsilon    g    n    ret    sum    tmp    x    long    serialVersionUID    int    maxIterations    	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(x  ==  1.0  &&  a  >  epsilon)  {	  }    else    if    (x    >=    1.0    &&    a    >    a)    {    }    else    if    (x!=    1.0    &&    a    >    a)    {    	plausible		11	0
