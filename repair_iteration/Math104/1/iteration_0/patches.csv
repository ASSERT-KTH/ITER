bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);		compilable	  [FE]  AssertionFailedError  	2	1	add
2	[BUG]  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);		compilable	  [FE]  AssertionFailedError  	2	1	add
3	[BUG]  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  maxIterations);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,<null>,int)  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  1.0  -  regularizedGammaQ(a,  x,  null,  maxIterations);		non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,<null>,int)	2	None	add
4	[BUG]  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]        AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  minIterations);		non-compiled	[CE]  cannot  find  symbol  minIterations	2	None	add
5	[BUG]  [BUGGY]    ret  =  1.0  -  regularizedGammaq(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaq(a,  x,  epsilon,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  1.0  -  regularizedGammaq(a,  x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	2	None	add
6	[BUG]  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon);  [CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double)  [FE]            AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon);		non-compiled	[CE]  no  suitable  method  found  for  regularizedGammaQ(double,double,double)	2	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if  (x  >=  1.0  &&  a  >  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
8	[BUG]  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if  (x  >=  1.0  &&  a  >  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (x  >=  1.0  &&  a  >  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if  (a  >=  1.0  &&  x  <  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
10	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (a  >=  1.0  &&  x  <  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
11	[BUG]  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  =  a)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  <  =  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if  (a  >=  1.0  &&  x  <  =  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	}  else  if(a  <  1.0  &&  x  >  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
13	[BUG]  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]  }  else  if(a  <  1.0  &&  x  >  a)  {  [BUGGY]    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	}  else  if(a  <  1.0  &&  x  >  a)  {	}  else  if  (a  >=  1.0  &&  x  >  a)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	add	    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);		compilable	  [FE]  AssertionFailedError  	2	2	add
15	[BUG]  [BUGGY]    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    ret  =  regularizedGammaQ(a,  x,  epsilon,  maxIterations);		compilable	  [FE]  AssertionFailedError  	2	2	add
16	[BUG]  [BUGGY]    if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    if(Double.isNaN(a)||  Double.isNaN(x)||(a  <  =  0.0)||(x  <  0.0))  {  ret  =  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
17	[BUG]  [BUGGY]    if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  0.0))  {  ret  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  {  double  ret;  if  (Double.isNaN(a)  ||  Double.isNaN(x)  ||  (a  <=  0.0)  ||  (x  <  0.0))  {  ret  =  Double.NaN;  }  else  if  (x  ==  0.0)  {  ret  =  0.0;  [BUGGY]    if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  0.0))  {  ret  =  1.0;  }  [BUGGY]  }  else  if  (a  >=  1.0  &&  x  >  a)  {    ret  =  1.0  -  regularizedGammaQ(a,  x,  epsilon,  maxIterations);  }  else  {  double  n  =  0.0;  //  current  element  index  double  an  =  1.0  /  a;  //  n-th  element  in  the  series  double  sum  =  an;  //  partial  sum  while  (Math.abs(an)  >  epsilon  &&  n  <  maxIterations)  {  [CLASS]  Gamma  1  [METHOD]  regularizedGammaP  [RETURN_TYPE]  double  double  a  double  x  double  epsilon  int  maxIterations  [VARIABLES]  boolean  double[]  lanczos  double  DEFAULT_EPSILON  HALF_LOG_2_PI  a  an  epsilon  g  n  ret  sum  tmp  x  long  serialVersionUID  int  maxIterations  	projects/Math104/src/java/org/apache/commons/math/special/Gamma.java	1.0	162	162	1	replace	    if(Double.isNaN(a)||  Double.isNaN(x)||  (a  <  =  0.0)||(x  <  0.0))  {  ret  =  1.0;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
