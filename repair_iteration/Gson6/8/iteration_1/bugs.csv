bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
2	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
3	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
4	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
5	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
6	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  ClassCastException  	15	2	replace
7	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  ClassCastException  	15	2	replace
8	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  if(typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
9	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
10	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
11	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	  	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
13	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
14	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  ClassCastException  	15	2	replace
15	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  ClassCastException  	15	2	replace
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
17	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
18	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
19	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
21	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	15	2	replace
22	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
23	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
24	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	if  (TypeAdapter.class.isAssignableFrom(value))  {  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
