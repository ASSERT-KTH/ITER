bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
3	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
4	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
5	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
6	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	21	2	replace
8	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	21	2	replace
9	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
10	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
11	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
13	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
14	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	17	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
16	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
17	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
18	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
19	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
20	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	17	2	replace
21	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	17	2	replace
22	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
23	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
24	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
25	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	12	None	add
26	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
27	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
28	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
29	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
30	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
31	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
32	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
33	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
34	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	18	None	add
35	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;	  	non-compiled	[CE]  >  expected	18	None	add
36	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
37	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
38	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
39	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
40	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	7	None	replace
41	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
42	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
43	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
44	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
45	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]              ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
46	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
47	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]                ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
48	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	3	None	replace
49	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
50	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	compilable	  [FE]  ClassCastException  	3	2	replace
51	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	compilable	  [FE]  ClassCastException  	3	2	replace
52	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	3	None	replace
53	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
54	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException    [CONTEXT]      [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	23	None	replace
61	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
62	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	23	None	replace
63	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
64	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
65	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
66	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
67	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
68	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
69	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
70	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	19	None	replace
71	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
72	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
73	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	9	None	replace
74	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	9	None	replace
75	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
76	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	9	None	replace
77	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	9	None	replace
78	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
79	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
80	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	13	None	replace
81	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
82	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	13	None	replace
83	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
84	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
85	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
86	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
87	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
88	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
89	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	4	None	add
90	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
91	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	1	None	add
92	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;	  	non-compiled	[CE]  >  expected	1	None	add
93	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
94	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	14	None	add
95	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	14	None	add
96	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
97	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
98	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
99	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
100	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
101	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
102	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	10	2	replace
103	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	10	2	replace
104	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeClass  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	10	None	replace
105	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
106	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	5	None	replace
107	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
108	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
109	[BUG]  [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
110	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
111	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
112	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
113	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
114	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
115	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  if(value.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	8	None	replace
116	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
117	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	6	None	add
118	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	6	None	add
119	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	6	None	add
120	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
121	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	16	None	add
122	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;	  	non-compiled	[CE]  >  expected	16	None	add
123	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
124	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
125	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	2	2	replace
126	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	2	2	replace
127	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
128	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
129	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	2	None	replace
130	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
131	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
132	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
133	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
134	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
135	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
136	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
137	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
138	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
139	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
140	[BUG]  [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	23	None	replace
141	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
142	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
143	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
144	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	17	None	replace
145	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	18	None	add
146	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
147	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  not  a  statement	18	None	add
148	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
149	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
150	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
151	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
152	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
153	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
154	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
155	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
156	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	7	None	replace
157	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	7	None	replace
158	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
159	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
160	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
161	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
162	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
163	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
164	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
165	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
166	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
167	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
168	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
169	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	19	2	replace
170	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	19	2	replace
171	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
172	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	19	None	replace
173	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapterClass!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
174	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
175	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
176	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
177	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
178	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
179	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
180	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
181	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
182	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
183	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
184	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
185	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(typeAdapter  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	15	None	replace
186	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
187	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
188	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
189	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
190	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
191	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	5	2	replace
192	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	3	None	replace
193	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
194	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
195	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
196	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
197	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
198	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
199	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
200	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
201	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                                  NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
203	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
204	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
206	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  t  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
207	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	5	None	replace
208	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
209	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(TypeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	5	2	replace
210	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
211	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
212	[BUG]  [BUGGY]  if(value.equals(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(typeAdapterClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapterClass))  {	  if(typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	23	None	replace
213	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
214	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	7	2	replace
215	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
216	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >=  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
217	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	20	None	add
218	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	20	None	add
219	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	20	None	add
220	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	20	None	add
221	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	20	None	add
222	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	20	None	add
223	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
224	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
225	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class);  [CE]  illegal  start  of  type  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
226	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
227	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class);  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
228	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	3	None	replace
229	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(path))  {  [CE]  cannot  find  symbol  path  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(path))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(path))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  path	3	None	replace
230	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
231	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
232	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	12	None	add
233	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	12	None	add
234	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	12	None	add
235	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	12	None	add
236	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeName  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeName	10	None	replace
237	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeObjectClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeObjectClass  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeObjectClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeObjectClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeAdapterClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeObjectClass	10	None	replace
238	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
239	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
240	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
241	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
242	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	19	None	replace
243	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	19	None	replace
244	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
245	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
246	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	18	None	add
247	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	18	None	add
248	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  not  a  statement	18	None	add
249	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
250	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
251	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	2	None	replace
252	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
253	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	2	None	replace
254	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]      [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
255	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]      [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	15	None	replace
256	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	4	None	add
257	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	4	None	add
258	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	4	None	add
259	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
260	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	4	None	add
261	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
262	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
263	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
264	[BUG]  [BUGGY]  if(value.equals(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(value.equals(typeAdapter.class))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
265	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
266	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
267	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
268	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	13	None	replace
269	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	13	None	replace
270	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  not  a  statement	1	None	add
271	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
272	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));	  	non-compiled	[CE]  not  a  statement	1	None	add
273	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
274	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
275	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
